{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/uploads/me.jpg","path":"uploads/me.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1458282499730},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1458282499733},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1458282499748},{"_id":"themes/next/.gitignore","hash":"63d003fa46cf9665b4dab1786f9dc694812a5a79","modified":1458282499744},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1458282499751},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1458282499754},{"_id":"themes/next/_config.yml","hash":"7d6fdc660a17e11f7d6beee02c5b6264c0f5bc8e","modified":1468146900238},{"_id":"themes/next/package.json","hash":"afc2cbda2fe4643808c151135d5528267ee634c4","modified":1458282500077},{"_id":"themes/next/gulpfile.coffee","hash":"0494704f9e1ac8f63b9bd2791c443ffbf6091df3","modified":1458282499776},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1458282499759},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1458282499763},{"_id":"themes/next/bower.json","hash":"93adc30dab22314f3757c3b6d3c13771de994b08","modified":1458282499772},{"_id":"source/_posts/Ajax的多种跨域方式.md","hash":"c6743e5dbe1f0d564c7dff649bab0798ec0beb0b","modified":1458285032002},{"_id":"source/_posts/DAY1-构建原型图.md","hash":"7540ecf68b46e28ebfd032cb8ace4fb679993264","modified":1458411323662},{"_id":"source/_posts/DAY2-播放器页面的实现.md","hash":"b2becaa81251475887028b81d41d529f4ea92fcd","modified":1458483055575},{"_id":"source/_posts/DAY3-Backbone-js-API阅读.md","hash":"d5cf8d0262d058f52f47404796f1767d014a27b2","modified":1459775381163},{"_id":"source/_posts/ES6-学习笔记.md","hash":"3b28adad439a7bc89eca339db33f340634d33fec","modified":1461049205856},{"_id":"source/_posts/DAY4-Backbone-js-API阅读（二）.md","hash":"9339d19611f8f9c83c5ebe0e2d596263579bf6f3","modified":1458662301900},{"_id":"source/_posts/ES6-学习笔记（七）.md","hash":"735305943f9e9513f123a0c7cdd5b238bdde0e4e","modified":1461567951789},{"_id":"source/_posts/ES6-学习笔记（二）.md","hash":"ea3d8fa7e53658a5ddfe41b3b2bd10131aaf49fe","modified":1461049208150},{"_id":"source/_posts/ES6-学习笔记（三）.md","hash":"9696f56f1ab36eab901da29217c31dedc8e74ed0","modified":1461052239429},{"_id":"source/_posts/ES6-学习笔记（六）.md","hash":"e7e82dfa498d865a65dee2eca0421d8e9d534f87","modified":1461423849097},{"_id":"source/_posts/ES6-学习笔记（四）.md","hash":"236bd0b361bf4224691ad5bfd2c20ee202155201","modified":1461136151952},{"_id":"source/_posts/Function的类型判断.md","hash":"726aa2b6f44f87412a85671f2f7ca5ee65fb7377","modified":1458285045130},{"_id":"source/_posts/Javascript-事件监听-event-和-target-兼容性写法.md","hash":"57052b2e3a3ebc3385d6f6233afa7f31d4377f07","modified":1458285048328},{"_id":"source/_posts/clearfix-闭合浮动.md","hash":"4abeb65ed285f05c12f649a02b5719ab60e2e12f","modified":1458285042095},{"_id":"source/_posts/angular-注意点-长期更新.md","hash":"706d4f54a4fefac5bfbd05b4593d4668f617513d","modified":1465787076579},{"_id":"source/_posts/ES6-学习笔记（五）.md","hash":"e7fb508df497b74a87cf62c48c9e936d13e144a2","modified":1461423846033},{"_id":"source/_posts/DAY5-完成-总结.md","hash":"a3d1bc6e9540988e8c42bb00449ec3eccc8ed996","modified":1459068468320},{"_id":"source/_posts/reflow-和-repaint-简易分析.md","hash":"9278f1f72cde4b7bcb104ce11b826f22693620c5","modified":1466187526856},{"_id":"source/_posts/ele-me-二面代码题实现.md","hash":"764a2ff28035e7f103b2bec2b9d443207d9e2b74","modified":1461485921646},{"_id":"source/_posts/两列布局一列固定宽度一列自适应宽度实现.md","hash":"dd9848b3cf91c6220679d4a40c3e70875165cae6","modified":1458285039687},{"_id":"source/_posts/一道有趣的JS题目的分析.md","hash":"0374fc6a1037d7ae32fd06ab6cf5c1126c93e8fa","modified":1458285035211},{"_id":"source/_posts/gulp-简单使用.md","hash":"62ca6a556c1073a23406d99a4ebe0de56911cbb9","modified":1459779208611},{"_id":"source/_posts/简单使用-require-js.md","hash":"bd44a719fb709e8f9cc9166947c726e4f1296f2f","modified":1459151272124},{"_id":"source/tags/index.md","hash":"24dff4ab035160df392719283fe89a1c1cf36bdf","modified":1458283966744},{"_id":"source/categories/index.md","hash":"5cd07c8385e55f2cd931e8f2787d92e71a5a8fc5","modified":1458284030083},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1458282499737},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a09da7ff6504131e928b9c99dcec98a411331812","modified":1458282499741},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1458282500083},{"_id":"themes/next/test/.jshintrc","hash":"1dae9d1cf7df1ae6d5c5efd6cffb949e9b8dcebb","modified":1458282500927},{"_id":"source/_posts/准备开始一个新的项目-Oxygen轻音乐.md","hash":"5546d8d2e9adec44acfe4baba14469359ae4e28f","modified":1458326756494},{"_id":"source/_posts/Webpack-Babel-使用-ES6-新特性.md","hash":"1e4a7e50a2b37aac7bdac3eac01375c573467975","modified":1462525421034},{"_id":"source/_posts/双飞翼布局和圣杯布局.md","hash":"635260345967dfda84801a0999509dc9a5fda38a","modified":1458287045433},{"_id":"themes/next/.git/config","hash":"340cff4364d9733a32042fdb93097c334a781c93","modified":1458282499659},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1458282499641},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1458282238865},{"_id":"themes/next/.git/index","hash":"2c3afad5213d7058aa0d4cd50585cb4a8efe0713","modified":1458282500948},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1458282500935},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1458282500944},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1458282499780},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1458282499787},{"_id":"themes/next/.git/packed-refs","hash":"90ff12b4594b7a902e7465a9c2fbb782a598da34","modified":1458282499629},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1458282499784},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1458282499791},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1458282499812},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f730afe485f539c3528e39d642984d67eef76c41","modified":1458283392841},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1458282499800},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1458282499804},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1458282499795},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1458282499816},{"_id":"themes/next/layout/_layout.swig","hash":"1b157843c811ffd0e865093586f0b6f172b73018","modified":1458282499819},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1458282500062},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1458282500054},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1458282500058},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1458282500066},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1458282500073},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1458282500069},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458282500457},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1458282500088},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1458282500095},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1458282500105},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1458282238935},{"_id":"themes/next/.git/logs/HEAD","hash":"5d2cc6d24dbadc3a4e2a4aa94a020c7f04f89696","modified":1458282499649},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1458282238871},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1458282238882},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1458282238881},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1458282238895},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1458282238914},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1458282238934},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1458282238926},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1458282238918},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1458282238924},{"_id":"themes/next/source/uploads/me.jpg","hash":"5d2b89747498f1bb62dbccd65dc00e02d13e6ce5","modified":1455956109508},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1458282500461},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1458282500472},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1458282500457},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1458282500493},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1458282500467},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1458282500492},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1458282500499},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1458282500494},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1458282500483},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1458282500503},{"_id":"themes/next/layout/_partials/comments.swig","hash":"325dd5923d845a539fc0524ca72ce40edd1e516a","modified":1458282499849},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1458282499852},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1458282500477},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1458282500504},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1458282499869},{"_id":"themes/next/layout/_partials/footer.swig","hash":"cba20577cea89196d714ddfe6b3ea00f7c906ba7","modified":1458282499856},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1458282499872},{"_id":"themes/next/layout/_partials/head.swig","hash":"9d6501b54b959d28a6e0b5fde87d25fc38b97660","modified":1458282499862},{"_id":"themes/next/layout/_partials/header.swig","hash":"b3f4f07f03bedd615039934b44d552b91e2a4a1d","modified":1458282499866},{"_id":"themes/next/layout/_macro/reward.swig","hash":"89f3d2e978d4062b470e774eda21c2ed3a086ab9","modified":1458282499839},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6de4ea6db39fe8e04b058bcefc5b23f954726e77","modified":1458282499845},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1458282499915},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1458282499919},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1458282499824},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"1a51b8caa5130ff55948ae59dddb87ee0550c1e9","modified":1458282500048},{"_id":"themes/next/layout/_macro/post.swig","hash":"a61cf39c2d79f790fbb4a8e07ac2bbb06b95390d","modified":1458282499834},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458282500332},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458282500331},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458282500340},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458282500430},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458282500446},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458282499937},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458282499937},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1458282500521},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1458282500488},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1458282500530},{"_id":"themes/next/source/js/src/utils.js","hash":"1bea7614af19c2a2db7d10d3fb88d1fa81519e35","modified":1458282500563},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1458282500554},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1458282500515},{"_id":"themes/next/.git/refs/heads/master","hash":"26fb7e5f3db7ddb2911bede9756e96e5b59f0726","modified":1458282499646},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1458282500540},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1458282500332},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1458282500430},{"_id":"themes/next/source/css/_variables/default.styl","hash":"17779fa6fa3c9e1262ba100a86a8dec730c2f312","modified":1458282500452},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1458282500331},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1458282499875},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1458282499880},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1458282499883},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1458282500567},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1458282500570},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1458282500769},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"10ca6744a8594c1a085b50120f4ed0a1ef433f40","modified":1458282500340},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1458282500638},{"_id":"themes/next/source/css/_variables/base.styl","hash":"f171c71d42f8798608235206dd41b37193faed88","modified":1458282500446},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1458282500648},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1458282500652},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1458282500685},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1458282500688},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1458282500691},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1458282500694},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"9f87ded9cde425048e8ae063cbb481e78a0e469c","modified":1458282500437},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1458282499941},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1458282499887},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1458282499900},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1458282500680},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"09821c5735c97c0e1c3c8a6be2b82f4d70614d8a","modified":1458282499936},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1458282499945},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1458282499981},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1458282499911},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1458282499904},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"aebc73513c9cbbbbda2935e2eb18e09bb1c24bf8","modified":1458282500011},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"5bd98c26cc188a2a30504d1330a0eaae34034db0","modified":1458282500024},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"8eecd19c756df615afb3f5ec6a527cd7bd06d20c","modified":1458282500033},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1458282500041},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1458282500641},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1458282500824},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1458282500810},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1458282500846},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1458282500867},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1458282500870},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1458282500836},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1458282500819},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1458282500815},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1458282500905},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1458282500914},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1458282500804},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8b37699252a24741716b40fb70972a77453cbfe1","modified":1458282500545},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1458282499634},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1458282500924},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1458282500110},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1458282500300},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1458282500117},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1458282500121},{"_id":"themes/next/.git/objects/pack/pack-efce2474b4c6a818931a5e86f770b90615e5bf35.idx","hash":"fc431ccc525e5da9f14b451edd0a221515e33308","modified":1458282499412},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"5d2cc6d24dbadc3a4e2a4aa94a020c7f04f89696","modified":1458282499648},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1458282500113},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1458282500255},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1458282500305},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1458282500174},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1458282500316},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1458282500321},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"d110befc142dbb881c4fdcb94df65ed2f603f1c1","modified":1458282500326},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1458282500355},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"05be2af57229c5125297c945d2e60ca97070bae1","modified":1458282500309},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1458282500346},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1458282500352},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1458282500371},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1458282500384},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1458282500388},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1458282500391},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"f70fa81275eb4e0ea5e5a740b7a35539c6ffa9ba","modified":1458282500395},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1458282500392},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1458282500360},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1458282500404},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1458282500414},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"59c0f66602ebc1c05c16f117bc8710d9f3744538","modified":1458282500400},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"96f95471da25d0e80c6b82f1e834b03c9aba58a9","modified":1458282500409},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1458282500418},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1458282500425},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5187512cc4b2ce095230928c7046e0b26c3897bd","modified":1458282500376},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1458282500366},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"802e599b1ac749eac162dae396f66b0acaa5edcc","modified":1458282500421},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1458282500571},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1458282500572},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1458282500574},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1458282500575},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1458282500576},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1458282500621},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1458282500660},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1458282500676},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1458282500609},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1458282500703},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1458282500707},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1458282500573},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1458282500635},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1458282500699},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"c1186e609d4810ebfb3e675e9045b023a557d1db","modified":1458282499989},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1458282499952},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"096e7a6958b3bcacaa94361266832871ccb989c0","modified":1458282499956},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"61347b9cf5c42a02f28cda4b6d920d6d17099d44","modified":1458282499964},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1458282499971},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1458282499977},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"da8aa3beab56d8c306dd97cf41127a3859e2d00c","modified":1458282499997},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1458282500864},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1458282500855},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1458282500735},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1458282500124},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1458282500766},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"12724e07713c9e8d577d921c131f04de7a5e65b1","modified":1458282500149},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"9f0606d4d94ffa6bd77f91628507bba19133cf36","modified":1458282500153},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1458282500162},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1458282500166},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1458282500170},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1458282500182},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1458282500716},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1458282500191},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"5dba4ca272d7c767b57233cd99fba95dbf82153f","modified":1458282500195},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1458282500198},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1458282500202},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1458282500206},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"758d64ad65f718537ab5bfe5592a626abc40987e","modified":1458282500209},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1458282500213},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"8539c1122966a6aea64267d48af05603caa5fa29","modified":1458282500158},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1458282500221},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"70407054dbb5180c69e50ea2655d32835494394e","modified":1458282500225},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1458282500229},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1458282500233},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"0e91a5a80fb62ed38c97cb649b166f945c6ce5f1","modified":1458282500217},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1458282500187},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1458282500244},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"546ad04994f74643334fd36cdb548c17f71b11be","modified":1458282500248},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"99c4b7d1459569cda394c733845d368008a180bf","modified":1458282500251},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1458282500379},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"5d2cc6d24dbadc3a4e2a4aa94a020c7f04f89696","modified":1458282499640},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1458282500128},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1458282500131},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1458282500136},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1458282500237},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"97832be1f30b631dbc2202524918b6eb55e74c4b","modified":1458282500241},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1458282500144},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1458282500265},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1458282500260},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1458282500272},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1458282500275},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"f168f79ba8cc80c775907da4cc00d01771ac1e1e","modified":1458282500141},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1458282500283},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"dcb4548d07cbb38b645b1753cf3ee7157e16921a","modified":1458282500290},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"0f368e6e95c0ba46580b491819e46ae31910c94b","modified":1458282500294},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1458282500757},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1458282500888},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1458282500762},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1458282500280},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1458282500268},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1458282500577},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1458282500587},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1458282500598},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1458282500605},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1458282500594},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1458282500751},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1458282500580},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"68ed6b0ad40745cb07ecd38f13960bb217aef848","modified":1458282500179},{"_id":"themes/next/.git/objects/pack/pack-efce2474b4c6a818931a5e86f770b90615e5bf35.pack","hash":"e867af750b5bb152600136d3a0e3c50958b9b3cb","modified":1458282499523},{"_id":"public/categories/index.html","hash":"7124ebd6b9cea73fba1f82697b2980f4a082bfbc","modified":1468146945935},{"_id":"public/tags/index.html","hash":"96a34417e328016a2d586952a31e2858c3e1f930","modified":1468146946790},{"_id":"public/2016/06/05/angular-注意点-长期更新/index.html","hash":"343058bd89245d544c93df8ef9a6f8feab8f9d72","modified":1468146946805},{"_id":"public/2016/06/17/reflow-和-repaint-简易分析/index.html","hash":"b99a0753d92049ff44f0e0c130ffdd9e9d1933cf","modified":1468146946805},{"_id":"public/2016/05/04/Webpack-Babel-使用-ES6-新特性/index.html","hash":"6ccf5db59be99a8cf31f1c59588014b1c6387eae","modified":1468146946805},{"_id":"public/2016/04/23/ES6-学习笔记（六）/index.html","hash":"0f9dc10fb4c19bf07c92aefb03275badea68c59e","modified":1468146948556},{"_id":"public/2016/04/24/ES6-学习笔记（七）/index.html","hash":"653ca609e29836dc6029f022b57049a38c92f9a6","modified":1468146948571},{"_id":"public/2016/04/20/ES6-学习笔记（四）/index.html","hash":"b13a00e40dad45f3efcdd30fdf5a899301b6e09a","modified":1468146948571},{"_id":"public/2016/04/21/ES6-学习笔记（五）/index.html","hash":"c0a7cc61e0af90bfd456bc3c019a56ee2e87329f","modified":1468146948571},{"_id":"public/2016/04/16/ES6-学习笔记（二）/index.html","hash":"82597c274cacf5d2950c0b1c00e74a2a2f878008","modified":1468146948571},{"_id":"public/2016/04/18/ES6-学习笔记（三）/index.html","hash":"4722c703b19758cc329a5cda09e3600051f624ff","modified":1468146948571},{"_id":"public/2016/04/13/ele-me-二面代码题实现/index.html","hash":"2eb41da24300d4820124de43faf6f496595a7f27","modified":1468146948571},{"_id":"public/2016/04/06/ES6-学习笔记/index.html","hash":"385eecddee56225595e4c3e7f3df05f36b5dedf6","modified":1468146948571},{"_id":"public/2016/04/04/gulp-简单使用/index.html","hash":"11912dcf95df65d747ac857bc2269106e764f93b","modified":1468146948571},{"_id":"public/2016/03/28/简单使用-require-js/index.html","hash":"677719d2daa6a738d1dbbc599a3390130c6eb911","modified":1468146948571},{"_id":"public/2016/03/27/DAY5-完成-总结/index.html","hash":"38f446e7c7e2a6e14d10f65d20747da6d81f3a98","modified":1468146948571},{"_id":"public/2016/03/22/DAY4-Backbone-js-API阅读（二）/index.html","hash":"1b79f7c002052fa247d4142a3658543ae3712377","modified":1468146948571},{"_id":"public/2016/03/20/DAY1-构建原型图/index.html","hash":"fa7c1da96a9122f8322a095459c5a23b3d33cadd","modified":1468146948571},{"_id":"public/2016/03/19/准备开始一个新的项目-Oxygen轻音乐/index.html","hash":"3096c7dd2124944401d0bff7eb6694c965457a4e","modified":1468146948571},{"_id":"public/2016/03/20/DAY2-播放器页面的实现/index.html","hash":"377e5c12c34c590d24398fa5f95425883df72406","modified":1468146948571},{"_id":"public/2016/03/21/DAY3-Backbone-js-API阅读/index.html","hash":"7d12922af9db3f10b2ec3ccff3a662236caeb7db","modified":1468146948571},{"_id":"public/categories/项目/index.html","hash":"130da0ea2f5462f2f6471d3e7d8dfb3d9d332fba","modified":1468146948609},{"_id":"public/categories/前端/ECMAScript-6/index.html","hash":"638abb093cbf11fa7004305f627e83c803ef8ab5","modified":1468146948609},{"_id":"public/categories/前端/Angular/index.html","hash":"9dbba8fad2e48abd860ed5a87fc4267518eb280b","modified":1468146948609},{"_id":"public/categories/前端/page/2/index.html","hash":"8ba6b2f3b512e3f9ed4173f4894f7b55f0a0b091","modified":1468146948609},{"_id":"public/categories/前端/CSS/index.html","hash":"a5ce8df28f097c34c4a79470964dacd4baac075f","modified":1468146948609},{"_id":"public/categories/Javascript/index.html","hash":"be09935dae9cfe12a1c6642e2a109dc6e319d7c6","modified":1468146948609},{"_id":"public/tags/Oxygen/index.html","hash":"d1e4b0f7838f08c4d974f95b73e708c92ebc8f8c","modified":1468146948609},{"_id":"public/tags/布局/index.html","hash":"2c32e18714e0bf115ac4705c5e73b6e1d5112376","modified":1468146948609},{"_id":"public/tags/Javascript/page/2/index.html","hash":"315896d825510651e4408ad821bd63aefab7a406","modified":1468146948609},{"_id":"public/tags/面试/index.html","hash":"6a50abd27ed97d67a296f676fe3f44a190771991","modified":1468146948609},{"_id":"public/archives/page/3/index.html","hash":"057b8f9f5b720744d3104fdba1a349498eeee596","modified":1468146948609},{"_id":"public/tags/CSS/index.html","hash":"70f000658341302f7bfbc55693eb8bc6b8eed673","modified":1468146948609},{"_id":"public/tags/gulp/index.html","hash":"1b39006df0df5a359140a67d0392d8296d5b4ad4","modified":1468146948609},{"_id":"public/tags/模块化/index.html","hash":"df54c42fbe3c2e0b883428a929fbd455282069f4","modified":1468146948609},{"_id":"public/archives/2016/03/page/2/index.html","hash":"c4f2e56f64207cc2cd21c8868c453c4b6b65a0b9","modified":1468146948609},{"_id":"public/archives/2016/page/3/index.html","hash":"a5bd63880935971077b359bac4fbcf0e3c355ce7","modified":1468146948609},{"_id":"public/archives/2016/05/index.html","hash":"4de84e92e4a90c41fcf582fab020c8b6707e2989","modified":1468146948609},{"_id":"public/archives/2016/06/index.html","hash":"fceaecac5af9a736450e357b0ed1604912ec507d","modified":1468146948609},{"_id":"public/2016/03/18/Javascript-事件监听-event-和-target-兼容性写法/index.html","hash":"6f942751af4c06b5343fd11aa2ed2e8eebd7f35a","modified":1468146948609},{"_id":"public/2016/03/18/一道有趣的JS题目的分析/index.html","hash":"40b5fd4af869c66219dbd15d9b671fc0331fab43","modified":1468146948609},{"_id":"public/2016/03/18/clearfix-闭合浮动/index.html","hash":"87da743316b1cf746acd83d9e6dc381bf184bb4b","modified":1468146948609},{"_id":"public/2016/03/18/Function的类型判断/index.html","hash":"ad2c40f1682118a9077040cbb434018718d691ee","modified":1468146948609},{"_id":"public/2016/03/18/Ajax的多种跨域方式/index.html","hash":"cf59306bf84e830b9e9cd2a0b1e0f8431ecd1cab","modified":1468146948609},{"_id":"public/2016/03/18/双飞翼布局和圣杯布局/index.html","hash":"33c3270f7bdcfaf8ca80ff0f9a79c88bd785e390","modified":1468146948609},{"_id":"public/2016/03/18/两列布局一列固定宽度一列自适应宽度实现/index.html","hash":"4cf1ea35c1ce8a481c3ce01dcb3d03979a76bc91","modified":1468146948609},{"_id":"public/categories/前端/index.html","hash":"0f66593a288aaa6f772ad0234f0b9f4d08831f2d","modified":1468146948609},{"_id":"public/index.html","hash":"29e7729721e564e233b28e89feb644f6c9efc645","modified":1468146948609},{"_id":"public/page/2/index.html","hash":"60a2137184fe9ba13b1c139f2de6e33e999edc59","modified":1468146948609},{"_id":"public/tags/Javascript/index.html","hash":"3969a24c6049bcbfdfdcd284c5ccc63a6b4492ea","modified":1468146948609},{"_id":"public/page/3/index.html","hash":"addb5c1a7c276013378b0d3191507ece49e56225","modified":1468146948609},{"_id":"public/archives/index.html","hash":"879e0172822c5294942c4e2c8d24b1ea3962c7c0","modified":1468146948609},{"_id":"public/archives/page/2/index.html","hash":"e289ca75806f8c60201294e82dd797fcdd8a88d3","modified":1468146948609},{"_id":"public/archives/2016/index.html","hash":"af29fb65198dd81d029f5050c9edf4f8b1cd7f8b","modified":1468146948609},{"_id":"public/archives/2016/03/index.html","hash":"5811a62d172d01f876a251beefd1f9513f834c3f","modified":1468146948609},{"_id":"public/archives/2016/page/2/index.html","hash":"74d0a2c1c0795ce3ddb6e9b3e8fe95cb1758bc72","modified":1468146948609},{"_id":"public/archives/2016/04/index.html","hash":"00b8b45335541247896ec498202dc9d161475d67","modified":1468146948609},{"_id":"public/uploads/me.jpg","hash":"5d2b89747498f1bb62dbccd65dc00e02d13e6ce5","modified":1468146948624},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1468146948624},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1468146948624},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1468146948624},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1468146948624},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1468146948624},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1468146948624},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1468146948624},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1468146948624},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1468146948624},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1468146948624},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1468146948624},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1468146948624},{"_id":"public/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1468146948624},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1468146948624},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1468146948624},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1468146948624},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1468146948624},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1468146948624},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1468146948624},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1468146948624},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1468146948624},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1468146948624},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1468146948624},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1468146952491},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1468146952491},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1468146952491},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1468146952507},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1468146952507},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1468146952507},{"_id":"public/js/src/utils.js","hash":"b9ddf9afd352a7be1675613911543820ddcf9cd2","modified":1468146952507},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1468146952507},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1468146952507},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1468146952507},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1468146952507},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1468146952507},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1468146952508},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1468146952508},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1468146952508},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1468146952508},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1468146952508},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1468146952508},{"_id":"public/js/src/schemes/pisces.js","hash":"94f935331995bfeadf1084fb8f0665ab39fd1c8d","modified":1468146952508},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1468146952508},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1468146952508},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1468146952509},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1468146952509},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1468146952509},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1468146952509},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1468146952509},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1468146952509},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1468146952509},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1468146952509},{"_id":"public/css/main.css","hash":"a8be9bcb7c4b104d591f2469c75c429fc6c3362f","modified":1468146952509},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1468146952509},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1468146952509},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1468146952510},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1468146952510},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1468146952510},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1468146952510},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1468146952510},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1468146952510},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1468146952510},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1468146952510},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1468146952529}],"Category":[{"name":"项目","_id":"ciqggs7fe0003ikvdffso7r4g"},{"name":"前端","_id":"ciqggs7ft0007ikvdxeu833hw"},{"name":"ECMAScript 6","parent":"ciqggs7ft0007ikvdxeu833hw","_id":"ciqggs7k2000oikvdjplx0p1j"},{"name":"Angular","parent":"ciqggs7ft0007ikvdxeu833hw","_id":"ciqggs7lt001hikvdr2tmtv8n"},{"name":"CSS","parent":"ciqggs7ft0007ikvdxeu833hw","_id":"ciqggs7mf001uikvdm0ddm2jy"},{"name":"Javascript","_id":"ciqggs7mv0027ikvdjrddqlbm"}],"Data":[],"Page":[{"title":"tags","date":"2016-03-18T06:51:59.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-03-18 14:51:59\ntype: \"tags\"\n---\n","updated":"2016-03-18T06:52:46.744Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciqggs7jn000jikvdaawbt09f","content":"","excerpt":"","more":""},{"title":"categories","date":"2016-03-18T06:53:33.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-03-18 14:53:33\ntype: \"categories\"\n---\n","updated":"2016-03-18T06:53:50.083Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ciqggs7k2000likvdv1pol79k","content":"","excerpt":"","more":""}],"Post":[{"title":"DAY1 构建原型图","date":"2016-03-19T18:06:46.000Z","_content":"> 昨晚5点多睡觉，早上12点才起床，下午爬去参加了珠海的 GDG。主讲是 360 的一个高级网络工程师（我才知道珠海也有 360 的分部），还有一个腾讯的员工，讲的内容一般般，收获还是有一点的。晚上又折腾了一下 deepin 操作系统，打算还是暂时不碰 Linux。睡前先把首页的原型图大概切一下先。\n\n## 首页原型图\n![](http://7xoehm.com1.z0.glb.clouddn.com/github%E9%A6%96%E9%A1%B5%E5%8E%9F%E5%9E%8B%E5%9B%BE.PNG)\n\n> 明天再做详细的切图啦，今天实在太累了……GG思密达\n","source":"_posts/DAY1-构建原型图.md","raw":"---\ntitle: DAY1 构建原型图\ndate: 2016-03-20 02:06:46\ntags: Oxygen\ncategories: 项目\n---\n> 昨晚5点多睡觉，早上12点才起床，下午爬去参加了珠海的 GDG。主讲是 360 的一个高级网络工程师（我才知道珠海也有 360 的分部），还有一个腾讯的员工，讲的内容一般般，收获还是有一点的。晚上又折腾了一下 deepin 操作系统，打算还是暂时不碰 Linux。睡前先把首页的原型图大概切一下先。\n\n## 首页原型图\n![](http://7xoehm.com1.z0.glb.clouddn.com/github%E9%A6%96%E9%A1%B5%E5%8E%9F%E5%9E%8B%E5%9B%BE.PNG)\n\n> 明天再做详细的切图啦，今天实在太累了……GG思密达\n","slug":"DAY1-构建原型图","published":1,"updated":"2016-03-19T18:15:23.662Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqggs7fe0000ikvdu74o23gm","content":"<blockquote>\n<p>昨晚5点多睡觉，早上12点才起床，下午爬去参加了珠海的 GDG。主讲是 360 的一个高级网络工程师（我才知道珠海也有 360 的分部），还有一个腾讯的员工，讲的内容一般般，收获还是有一点的。晚上又折腾了一下 deepin 操作系统，打算还是暂时不碰 Linux。睡前先把首页的原型图大概切一下先。</p>\n</blockquote>\n<h2 id=\"首页原型图\"><a href=\"#首页原型图\" class=\"headerlink\" title=\"首页原型图\"></a>首页原型图</h2><p><img src=\"http://7xoehm.com1.z0.glb.clouddn.com/github%E9%A6%96%E9%A1%B5%E5%8E%9F%E5%9E%8B%E5%9B%BE.PNG\" alt=\"\"></p>\n<blockquote>\n<p>明天再做详细的切图啦，今天实在太累了……GG思密达</p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>昨晚5点多睡觉，早上12点才起床，下午爬去参加了珠海的 GDG。主讲是 360 的一个高级网络工程师（我才知道珠海也有 360 的分部），还有一个腾讯的员工，讲的内容一般般，收获还是有一点的。晚上又折腾了一下 deepin 操作系统，打算还是暂时不碰 Linux。睡前先把首页的原型图大概切一下先。</p>\n</blockquote>\n<h2 id=\"首页原型图\"><a href=\"#首页原型图\" class=\"headerlink\" title=\"首页原型图\"></a>首页原型图</h2><p><img src=\"http://7xoehm.com1.z0.glb.clouddn.com/github%E9%A6%96%E9%A1%B5%E5%8E%9F%E5%9E%8B%E5%9B%BE.PNG\" alt=\"\"></p>\n<blockquote>\n<p>明天再做详细的切图啦，今天实在太累了……GG思密达</p>\n</blockquote>\n"},{"title":"Ajax的多种跨域方式","date":"2016-03-18T05:19:02.000Z","_content":"## CORS（Cross-Origin Resource Sharing，跨源资源共享）\n> CORS 的实现相对简单，当我们使用 XMLHttpRequest 进行跨域时，会给request的地址加入一个 Origin 头部，其中包含请求页面的源信息（`eg. Origin: http://www.baidu.com`），如果服务器接收到 request 后，需要给 response 加上 Access-Control-Allow-Origin 头部（`eg. Access-Control-Allow-Origin: http://www.baidu.com`），当然，如果是公共资源，将地址改成`*`就可以允许所有源地址进行跨域访问。如果服务器没有加入和 Origin 头部地址对应的头部或者 Access-Control-Allow-Origin 允许的跨域地址不相符合（`eg. Access-Control-Allow-Origin: http://www.google.com`），那么浏览器将会驳回请求，导致跨域失败。\n\n### 1.XDomainRequest\n\nXDomainRequest（以下简称XDR）是IE部分实现CORS规范的一个类型，和 XMLHttpRequest（以下简称XHR）不同的是，XDR 有以下不同：\n\n* cookie 不会随请求发送，也不会随响应返回\n* 只能设置请求头部信息中的 Content-Type 字段\n* 不能访问响应头部信息\n* 只支持 GET 和 POST 请求\n* 浏览器支持：只有IE8+\n\n### 2.XMLHttpRequest\n\n使用 XMLHttpRequest（以下简称XHR）跨域和 XDR 跨域不同之处有以下几点：\n\n* 可以访问status\n* 可以访问statusText\n* 支持同步请求\n\n同时，跨域 XHR 也有以下限制（每个浏览器安全策略不同，例如chrome可以对跨域的XHR使用setRequestHeader）：\n\n* 不能使用 setRequestHeader() 设置自定义头部\n* 不能发送和接收cookie（可以通过设置 withCredentials 属性为 true 来允许发送cookie，同时服务器必须设置 Access-Control-Allow-Credentials: true）\n* 调用 getAllResponseHeaders() 方法总会返回字符串\n\n### 3.Preflighted Requests\n\nPreflighted Requests 是一种透明服务器验证机制，使用即可支持开发人员使用自定义头部、GET 或 POST 以外的方法以及不同类型的主体内容。上面提到跨域XHR不能使用 setRequestHeader() 设置自定义头部，如果使用了 setRequestHeader() 设置自定义头部（eg. xhr.setRequestHeader(\"halo\", \"loha\")），那么在发出正式请求之前，浏览器首先会发出一个 OPTION 方法的请求，其中包括以下头部内容：\n\n* Origin: 参照上面\n* Access-Control-Request-Method: 请求自身的方法，例如GET\n* Access-Control-Request-Headers: 自定义头部信息，多个头部以逗号分隔，例如halo\n\n当服务器接收到OPTION方法请求后，返回以下头部信息：\n\n* Access-Control-Allow-Origin: 必须同源\n* Access-Control-Allow-Method: 必须包含OPTION请求中的方法\n* Access-Control-Allow-Headers: 必须包含 OPTION请求中的Header名\n* Access-Control-Max-Age: 设置该 Preflighted 可以缓存的时间\n\n当OPTION成功请求并收到返回，浏览器将会检查response的头部信息，如果符合条件则正式发起请求，同时缓存此次 Preflighted 请求的结果。反之，如果不符合，那么真正的请求会失败。\n\n### 4.JSONP\n\nJSONP（JSON with padding， 填充式JSON）与 JSON 并无关系，JSONP 的跨域实现主要运用 `<script>` 不受同域限制的原理，在请求的 URL 后加入一个 callback 参数，该 callback 参数代表服务器需要返回的JS代码的函数名称（`eg. <script src=\"http://localhost?callback=func\">`），“func”这个名称将是服务器返回 JS 代码的函数名称（`eg. 以php为例，echo \"func(123)\"`），当 `<script>` 接收到这段代码的时候，便会运行 func 函数，并把“123”作为数据代进去（前提是你在前面已经写了一个func函数），至此，JSONP 完成。不过 JSONP 有以下缺点：\n\n* 安全性无法保证\n* 只能使用 GET 方法请求\n\n### 5.图像ping\n\n图像ping 利用 `<img>` 去访问一个 URL，同时对该 `<img>` 的 `onload` 和 `onerror` 事件进行监听，可以得知请求的成功与失败，但无法获取返回数据，多用于跟踪网页点击次数等。图像ping 有以下缺点：\n\n* 只能使用 GET 方法请求\n* 无法获取返回数据\n\n### 6.iframe\n\n想要操作 iframe 的内容，那么 iframe 和主页面必须同域。\n使用 document.domain 可以修改iframe和主页面的域名为同一个，前提是两个页面处于同一主域名下（eg. p2p.a.com和www.a.com可以设置为a.com），这样就可以操作 iframe 里的 contentDocument 了\n使用 location.hash（eg. 将a.com变为a.com#abc不会导致页面刷新），不过由于同域原因，要加多一个和主页面同域的页面才能成功修改主页面的 hash，主页面使用定时器检测 hash 变化。可以查看以下网址了解：\n>http://www.cnblogs.com/rainman/archive/2011/02/20/1959325.html\n\n使用 window.name，同样需要第三个和主页面同域的页面做代理，window.name 可容纳2M的内容。具体方法查看：\n> http://www.cnblogs.com/rainman/archive/2011/02/21/1960044.html\n\n使用 postMessage，参考\n> http://www.cnblogs.com/dolphinX/p/3464056.html\n\n### 7.Web Sockets\n\n以 node.js 为例，基于 socket.io 可以很容易建立 Web Sockets， HTML5 的 Web Sockets 使用的是 `ws://` 和 `wss://` 协议，这样可以减少 `http://` 和 `https://` 协议字节级的开销，带宽消耗小。具体实现请查阅Google。\n","source":"_posts/Ajax的多种跨域方式.md","raw":"---\ntitle: Ajax的多种跨域方式\ndate: 2016-03-18 13:19:02\ncategories: 前端\ntags: Javascript\n---\n## CORS（Cross-Origin Resource Sharing，跨源资源共享）\n> CORS 的实现相对简单，当我们使用 XMLHttpRequest 进行跨域时，会给request的地址加入一个 Origin 头部，其中包含请求页面的源信息（`eg. Origin: http://www.baidu.com`），如果服务器接收到 request 后，需要给 response 加上 Access-Control-Allow-Origin 头部（`eg. Access-Control-Allow-Origin: http://www.baidu.com`），当然，如果是公共资源，将地址改成`*`就可以允许所有源地址进行跨域访问。如果服务器没有加入和 Origin 头部地址对应的头部或者 Access-Control-Allow-Origin 允许的跨域地址不相符合（`eg. Access-Control-Allow-Origin: http://www.google.com`），那么浏览器将会驳回请求，导致跨域失败。\n\n### 1.XDomainRequest\n\nXDomainRequest（以下简称XDR）是IE部分实现CORS规范的一个类型，和 XMLHttpRequest（以下简称XHR）不同的是，XDR 有以下不同：\n\n* cookie 不会随请求发送，也不会随响应返回\n* 只能设置请求头部信息中的 Content-Type 字段\n* 不能访问响应头部信息\n* 只支持 GET 和 POST 请求\n* 浏览器支持：只有IE8+\n\n### 2.XMLHttpRequest\n\n使用 XMLHttpRequest（以下简称XHR）跨域和 XDR 跨域不同之处有以下几点：\n\n* 可以访问status\n* 可以访问statusText\n* 支持同步请求\n\n同时，跨域 XHR 也有以下限制（每个浏览器安全策略不同，例如chrome可以对跨域的XHR使用setRequestHeader）：\n\n* 不能使用 setRequestHeader() 设置自定义头部\n* 不能发送和接收cookie（可以通过设置 withCredentials 属性为 true 来允许发送cookie，同时服务器必须设置 Access-Control-Allow-Credentials: true）\n* 调用 getAllResponseHeaders() 方法总会返回字符串\n\n### 3.Preflighted Requests\n\nPreflighted Requests 是一种透明服务器验证机制，使用即可支持开发人员使用自定义头部、GET 或 POST 以外的方法以及不同类型的主体内容。上面提到跨域XHR不能使用 setRequestHeader() 设置自定义头部，如果使用了 setRequestHeader() 设置自定义头部（eg. xhr.setRequestHeader(\"halo\", \"loha\")），那么在发出正式请求之前，浏览器首先会发出一个 OPTION 方法的请求，其中包括以下头部内容：\n\n* Origin: 参照上面\n* Access-Control-Request-Method: 请求自身的方法，例如GET\n* Access-Control-Request-Headers: 自定义头部信息，多个头部以逗号分隔，例如halo\n\n当服务器接收到OPTION方法请求后，返回以下头部信息：\n\n* Access-Control-Allow-Origin: 必须同源\n* Access-Control-Allow-Method: 必须包含OPTION请求中的方法\n* Access-Control-Allow-Headers: 必须包含 OPTION请求中的Header名\n* Access-Control-Max-Age: 设置该 Preflighted 可以缓存的时间\n\n当OPTION成功请求并收到返回，浏览器将会检查response的头部信息，如果符合条件则正式发起请求，同时缓存此次 Preflighted 请求的结果。反之，如果不符合，那么真正的请求会失败。\n\n### 4.JSONP\n\nJSONP（JSON with padding， 填充式JSON）与 JSON 并无关系，JSONP 的跨域实现主要运用 `<script>` 不受同域限制的原理，在请求的 URL 后加入一个 callback 参数，该 callback 参数代表服务器需要返回的JS代码的函数名称（`eg. <script src=\"http://localhost?callback=func\">`），“func”这个名称将是服务器返回 JS 代码的函数名称（`eg. 以php为例，echo \"func(123)\"`），当 `<script>` 接收到这段代码的时候，便会运行 func 函数，并把“123”作为数据代进去（前提是你在前面已经写了一个func函数），至此，JSONP 完成。不过 JSONP 有以下缺点：\n\n* 安全性无法保证\n* 只能使用 GET 方法请求\n\n### 5.图像ping\n\n图像ping 利用 `<img>` 去访问一个 URL，同时对该 `<img>` 的 `onload` 和 `onerror` 事件进行监听，可以得知请求的成功与失败，但无法获取返回数据，多用于跟踪网页点击次数等。图像ping 有以下缺点：\n\n* 只能使用 GET 方法请求\n* 无法获取返回数据\n\n### 6.iframe\n\n想要操作 iframe 的内容，那么 iframe 和主页面必须同域。\n使用 document.domain 可以修改iframe和主页面的域名为同一个，前提是两个页面处于同一主域名下（eg. p2p.a.com和www.a.com可以设置为a.com），这样就可以操作 iframe 里的 contentDocument 了\n使用 location.hash（eg. 将a.com变为a.com#abc不会导致页面刷新），不过由于同域原因，要加多一个和主页面同域的页面才能成功修改主页面的 hash，主页面使用定时器检测 hash 变化。可以查看以下网址了解：\n>http://www.cnblogs.com/rainman/archive/2011/02/20/1959325.html\n\n使用 window.name，同样需要第三个和主页面同域的页面做代理，window.name 可容纳2M的内容。具体方法查看：\n> http://www.cnblogs.com/rainman/archive/2011/02/21/1960044.html\n\n使用 postMessage，参考\n> http://www.cnblogs.com/dolphinX/p/3464056.html\n\n### 7.Web Sockets\n\n以 node.js 为例，基于 socket.io 可以很容易建立 Web Sockets， HTML5 的 Web Sockets 使用的是 `ws://` 和 `wss://` 协议，这样可以减少 `http://` 和 `https://` 协议字节级的开销，带宽消耗小。具体实现请查阅Google。\n","slug":"Ajax的多种跨域方式","published":1,"updated":"2016-03-18T07:10:32.002Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqggs7fe0001ikvdsqgtbyl0","content":"<h2 id=\"CORS（Cross-Origin-Resource-Sharing，跨源资源共享）\"><a href=\"#CORS（Cross-Origin-Resource-Sharing，跨源资源共享）\" class=\"headerlink\" title=\"CORS（Cross-Origin Resource Sharing，跨源资源共享）\"></a>CORS（Cross-Origin Resource Sharing，跨源资源共享）</h2><blockquote>\n<p>CORS 的实现相对简单，当我们使用 XMLHttpRequest 进行跨域时，会给request的地址加入一个 Origin 头部，其中包含请求页面的源信息（<code>eg. Origin: http://www.baidu.com</code>），如果服务器接收到 request 后，需要给 response 加上 Access-Control-Allow-Origin 头部（<code>eg. Access-Control-Allow-Origin: http://www.baidu.com</code>），当然，如果是公共资源，将地址改成<code>*</code>就可以允许所有源地址进行跨域访问。如果服务器没有加入和 Origin 头部地址对应的头部或者 Access-Control-Allow-Origin 允许的跨域地址不相符合（<code>eg. Access-Control-Allow-Origin: http://www.google.com</code>），那么浏览器将会驳回请求，导致跨域失败。</p>\n</blockquote>\n<h3 id=\"1-XDomainRequest\"><a href=\"#1-XDomainRequest\" class=\"headerlink\" title=\"1.XDomainRequest\"></a>1.XDomainRequest</h3><p>XDomainRequest（以下简称XDR）是IE部分实现CORS规范的一个类型，和 XMLHttpRequest（以下简称XHR）不同的是，XDR 有以下不同：</p>\n<ul>\n<li>cookie 不会随请求发送，也不会随响应返回</li>\n<li>只能设置请求头部信息中的 Content-Type 字段</li>\n<li>不能访问响应头部信息</li>\n<li>只支持 GET 和 POST 请求</li>\n<li>浏览器支持：只有IE8+</li>\n</ul>\n<h3 id=\"2-XMLHttpRequest\"><a href=\"#2-XMLHttpRequest\" class=\"headerlink\" title=\"2.XMLHttpRequest\"></a>2.XMLHttpRequest</h3><p>使用 XMLHttpRequest（以下简称XHR）跨域和 XDR 跨域不同之处有以下几点：</p>\n<ul>\n<li>可以访问status</li>\n<li>可以访问statusText</li>\n<li>支持同步请求</li>\n</ul>\n<p>同时，跨域 XHR 也有以下限制（每个浏览器安全策略不同，例如chrome可以对跨域的XHR使用setRequestHeader）：</p>\n<ul>\n<li>不能使用 setRequestHeader() 设置自定义头部</li>\n<li>不能发送和接收cookie（可以通过设置 withCredentials 属性为 true 来允许发送cookie，同时服务器必须设置 Access-Control-Allow-Credentials: true）</li>\n<li>调用 getAllResponseHeaders() 方法总会返回字符串</li>\n</ul>\n<h3 id=\"3-Preflighted-Requests\"><a href=\"#3-Preflighted-Requests\" class=\"headerlink\" title=\"3.Preflighted Requests\"></a>3.Preflighted Requests</h3><p>Preflighted Requests 是一种透明服务器验证机制，使用即可支持开发人员使用自定义头部、GET 或 POST 以外的方法以及不同类型的主体内容。上面提到跨域XHR不能使用 setRequestHeader() 设置自定义头部，如果使用了 setRequestHeader() 设置自定义头部（eg. xhr.setRequestHeader(“halo”, “loha”)），那么在发出正式请求之前，浏览器首先会发出一个 OPTION 方法的请求，其中包括以下头部内容：</p>\n<ul>\n<li>Origin: 参照上面</li>\n<li>Access-Control-Request-Method: 请求自身的方法，例如GET</li>\n<li>Access-Control-Request-Headers: 自定义头部信息，多个头部以逗号分隔，例如halo</li>\n</ul>\n<p>当服务器接收到OPTION方法请求后，返回以下头部信息：</p>\n<ul>\n<li>Access-Control-Allow-Origin: 必须同源</li>\n<li>Access-Control-Allow-Method: 必须包含OPTION请求中的方法</li>\n<li>Access-Control-Allow-Headers: 必须包含 OPTION请求中的Header名</li>\n<li>Access-Control-Max-Age: 设置该 Preflighted 可以缓存的时间</li>\n</ul>\n<p>当OPTION成功请求并收到返回，浏览器将会检查response的头部信息，如果符合条件则正式发起请求，同时缓存此次 Preflighted 请求的结果。反之，如果不符合，那么真正的请求会失败。</p>\n<h3 id=\"4-JSONP\"><a href=\"#4-JSONP\" class=\"headerlink\" title=\"4.JSONP\"></a>4.JSONP</h3><p>JSONP（JSON with padding， 填充式JSON）与 JSON 并无关系，JSONP 的跨域实现主要运用 <code>&lt;script&gt;</code> 不受同域限制的原理，在请求的 URL 后加入一个 callback 参数，该 callback 参数代表服务器需要返回的JS代码的函数名称（<code>eg. &lt;script src=&quot;http://localhost?callback=func&quot;&gt;</code>），“func”这个名称将是服务器返回 JS 代码的函数名称（<code>eg. 以php为例，echo &quot;func(123)&quot;</code>），当 <code>&lt;script&gt;</code> 接收到这段代码的时候，便会运行 func 函数，并把“123”作为数据代进去（前提是你在前面已经写了一个func函数），至此，JSONP 完成。不过 JSONP 有以下缺点：</p>\n<ul>\n<li>安全性无法保证</li>\n<li>只能使用 GET 方法请求</li>\n</ul>\n<h3 id=\"5-图像ping\"><a href=\"#5-图像ping\" class=\"headerlink\" title=\"5.图像ping\"></a>5.图像ping</h3><p>图像ping 利用 <code>&lt;img&gt;</code> 去访问一个 URL，同时对该 <code>&lt;img&gt;</code> 的 <code>onload</code> 和 <code>onerror</code> 事件进行监听，可以得知请求的成功与失败，但无法获取返回数据，多用于跟踪网页点击次数等。图像ping 有以下缺点：</p>\n<ul>\n<li>只能使用 GET 方法请求</li>\n<li>无法获取返回数据</li>\n</ul>\n<h3 id=\"6-iframe\"><a href=\"#6-iframe\" class=\"headerlink\" title=\"6.iframe\"></a>6.iframe</h3><p>想要操作 iframe 的内容，那么 iframe 和主页面必须同域。<br>使用 document.domain 可以修改iframe和主页面的域名为同一个，前提是两个页面处于同一主域名下（eg. p2p.a.com和www.a.com可以设置为a.com），这样就可以操作 iframe 里的 contentDocument 了<br>使用 location.hash（eg. 将a.com变为a.com#abc不会导致页面刷新），不过由于同域原因，要加多一个和主页面同域的页面才能成功修改主页面的 hash，主页面使用定时器检测 hash 变化。可以查看以下网址了解：</p>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/rainman/archive/2011/02/20/1959325.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/rainman/archive/2011/02/20/1959325.html</a></p>\n</blockquote>\n<p>使用 window.name，同样需要第三个和主页面同域的页面做代理，window.name 可容纳2M的内容。具体方法查看：</p>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/rainman/archive/2011/02/21/1960044.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/rainman/archive/2011/02/21/1960044.html</a></p>\n</blockquote>\n<p>使用 postMessage，参考</p>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/dolphinX/p/3464056.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/dolphinX/p/3464056.html</a></p>\n</blockquote>\n<h3 id=\"7-Web-Sockets\"><a href=\"#7-Web-Sockets\" class=\"headerlink\" title=\"7.Web Sockets\"></a>7.Web Sockets</h3><p>以 node.js 为例，基于 socket.io 可以很容易建立 Web Sockets， HTML5 的 Web Sockets 使用的是 <code>ws://</code> 和 <code>wss://</code> 协议，这样可以减少 <code>http://</code> 和 <code>https://</code> 协议字节级的开销，带宽消耗小。具体实现请查阅Google。</p>\n","excerpt":"","more":"<h2 id=\"CORS（Cross-Origin-Resource-Sharing，跨源资源共享）\"><a href=\"#CORS（Cross-Origin-Resource-Sharing，跨源资源共享）\" class=\"headerlink\" title=\"CORS（Cross-Origin Resource Sharing，跨源资源共享）\"></a>CORS（Cross-Origin Resource Sharing，跨源资源共享）</h2><blockquote>\n<p>CORS 的实现相对简单，当我们使用 XMLHttpRequest 进行跨域时，会给request的地址加入一个 Origin 头部，其中包含请求页面的源信息（<code>eg. Origin: http://www.baidu.com</code>），如果服务器接收到 request 后，需要给 response 加上 Access-Control-Allow-Origin 头部（<code>eg. Access-Control-Allow-Origin: http://www.baidu.com</code>），当然，如果是公共资源，将地址改成<code>*</code>就可以允许所有源地址进行跨域访问。如果服务器没有加入和 Origin 头部地址对应的头部或者 Access-Control-Allow-Origin 允许的跨域地址不相符合（<code>eg. Access-Control-Allow-Origin: http://www.google.com</code>），那么浏览器将会驳回请求，导致跨域失败。</p>\n</blockquote>\n<h3 id=\"1-XDomainRequest\"><a href=\"#1-XDomainRequest\" class=\"headerlink\" title=\"1.XDomainRequest\"></a>1.XDomainRequest</h3><p>XDomainRequest（以下简称XDR）是IE部分实现CORS规范的一个类型，和 XMLHttpRequest（以下简称XHR）不同的是，XDR 有以下不同：</p>\n<ul>\n<li>cookie 不会随请求发送，也不会随响应返回</li>\n<li>只能设置请求头部信息中的 Content-Type 字段</li>\n<li>不能访问响应头部信息</li>\n<li>只支持 GET 和 POST 请求</li>\n<li>浏览器支持：只有IE8+</li>\n</ul>\n<h3 id=\"2-XMLHttpRequest\"><a href=\"#2-XMLHttpRequest\" class=\"headerlink\" title=\"2.XMLHttpRequest\"></a>2.XMLHttpRequest</h3><p>使用 XMLHttpRequest（以下简称XHR）跨域和 XDR 跨域不同之处有以下几点：</p>\n<ul>\n<li>可以访问status</li>\n<li>可以访问statusText</li>\n<li>支持同步请求</li>\n</ul>\n<p>同时，跨域 XHR 也有以下限制（每个浏览器安全策略不同，例如chrome可以对跨域的XHR使用setRequestHeader）：</p>\n<ul>\n<li>不能使用 setRequestHeader() 设置自定义头部</li>\n<li>不能发送和接收cookie（可以通过设置 withCredentials 属性为 true 来允许发送cookie，同时服务器必须设置 Access-Control-Allow-Credentials: true）</li>\n<li>调用 getAllResponseHeaders() 方法总会返回字符串</li>\n</ul>\n<h3 id=\"3-Preflighted-Requests\"><a href=\"#3-Preflighted-Requests\" class=\"headerlink\" title=\"3.Preflighted Requests\"></a>3.Preflighted Requests</h3><p>Preflighted Requests 是一种透明服务器验证机制，使用即可支持开发人员使用自定义头部、GET 或 POST 以外的方法以及不同类型的主体内容。上面提到跨域XHR不能使用 setRequestHeader() 设置自定义头部，如果使用了 setRequestHeader() 设置自定义头部（eg. xhr.setRequestHeader(“halo”, “loha”)），那么在发出正式请求之前，浏览器首先会发出一个 OPTION 方法的请求，其中包括以下头部内容：</p>\n<ul>\n<li>Origin: 参照上面</li>\n<li>Access-Control-Request-Method: 请求自身的方法，例如GET</li>\n<li>Access-Control-Request-Headers: 自定义头部信息，多个头部以逗号分隔，例如halo</li>\n</ul>\n<p>当服务器接收到OPTION方法请求后，返回以下头部信息：</p>\n<ul>\n<li>Access-Control-Allow-Origin: 必须同源</li>\n<li>Access-Control-Allow-Method: 必须包含OPTION请求中的方法</li>\n<li>Access-Control-Allow-Headers: 必须包含 OPTION请求中的Header名</li>\n<li>Access-Control-Max-Age: 设置该 Preflighted 可以缓存的时间</li>\n</ul>\n<p>当OPTION成功请求并收到返回，浏览器将会检查response的头部信息，如果符合条件则正式发起请求，同时缓存此次 Preflighted 请求的结果。反之，如果不符合，那么真正的请求会失败。</p>\n<h3 id=\"4-JSONP\"><a href=\"#4-JSONP\" class=\"headerlink\" title=\"4.JSONP\"></a>4.JSONP</h3><p>JSONP（JSON with padding， 填充式JSON）与 JSON 并无关系，JSONP 的跨域实现主要运用 <code>&lt;script&gt;</code> 不受同域限制的原理，在请求的 URL 后加入一个 callback 参数，该 callback 参数代表服务器需要返回的JS代码的函数名称（<code>eg. &lt;script src=&quot;http://localhost?callback=func&quot;&gt;</code>），“func”这个名称将是服务器返回 JS 代码的函数名称（<code>eg. 以php为例，echo &quot;func(123)&quot;</code>），当 <code>&lt;script&gt;</code> 接收到这段代码的时候，便会运行 func 函数，并把“123”作为数据代进去（前提是你在前面已经写了一个func函数），至此，JSONP 完成。不过 JSONP 有以下缺点：</p>\n<ul>\n<li>安全性无法保证</li>\n<li>只能使用 GET 方法请求</li>\n</ul>\n<h3 id=\"5-图像ping\"><a href=\"#5-图像ping\" class=\"headerlink\" title=\"5.图像ping\"></a>5.图像ping</h3><p>图像ping 利用 <code>&lt;img&gt;</code> 去访问一个 URL，同时对该 <code>&lt;img&gt;</code> 的 <code>onload</code> 和 <code>onerror</code> 事件进行监听，可以得知请求的成功与失败，但无法获取返回数据，多用于跟踪网页点击次数等。图像ping 有以下缺点：</p>\n<ul>\n<li>只能使用 GET 方法请求</li>\n<li>无法获取返回数据</li>\n</ul>\n<h3 id=\"6-iframe\"><a href=\"#6-iframe\" class=\"headerlink\" title=\"6.iframe\"></a>6.iframe</h3><p>想要操作 iframe 的内容，那么 iframe 和主页面必须同域。<br>使用 document.domain 可以修改iframe和主页面的域名为同一个，前提是两个页面处于同一主域名下（eg. p2p.a.com和www.a.com可以设置为a.com），这样就可以操作 iframe 里的 contentDocument 了<br>使用 location.hash（eg. 将a.com变为a.com#abc不会导致页面刷新），不过由于同域原因，要加多一个和主页面同域的页面才能成功修改主页面的 hash，主页面使用定时器检测 hash 变化。可以查看以下网址了解：</p>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/rainman/archive/2011/02/20/1959325.html\">http://www.cnblogs.com/rainman/archive/2011/02/20/1959325.html</a></p>\n</blockquote>\n<p>使用 window.name，同样需要第三个和主页面同域的页面做代理，window.name 可容纳2M的内容。具体方法查看：</p>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/rainman/archive/2011/02/21/1960044.html\">http://www.cnblogs.com/rainman/archive/2011/02/21/1960044.html</a></p>\n</blockquote>\n<p>使用 postMessage，参考</p>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/dolphinX/p/3464056.html\">http://www.cnblogs.com/dolphinX/p/3464056.html</a></p>\n</blockquote>\n<h3 id=\"7-Web-Sockets\"><a href=\"#7-Web-Sockets\" class=\"headerlink\" title=\"7.Web Sockets\"></a>7.Web Sockets</h3><p>以 node.js 为例，基于 socket.io 可以很容易建立 Web Sockets， HTML5 的 Web Sockets 使用的是 <code>ws://</code> 和 <code>wss://</code> 协议，这样可以减少 <code>http://</code> 和 <code>https://</code> 协议字节级的开销，带宽消耗小。具体实现请查阅Google。</p>\n"},{"title":"DAY2 播放器页面的实现","date":"2016-03-20T13:51:14.000Z","_content":"> 早上8点多起床转角遇到爱——一只好大的蜘蛛，面对面吓蒙逼了。下午将播放器的图给切出来，主要还是微调一下样式比较麻烦，测试了一下 IE 9+ 都是正常显示的，IE 8 不支持 `border-radius` 和 `box-shadow` 就没办法啦，`rem` 也不能用，但是这个能用正常的 `px` 解决。\n\n## 最终页面效果图\n![](http://7xoehm.com1.z0.glb.clouddn.com/github%E7%AC%AC%E4%BA%8C%E7%89%88.png)\n\n## 实现过程\n* 进度条的布局，典型的双飞翼布局方式，左右固定了 60px 作为左右两个时间的空间\n* 进度条的实现，用了三个 div 分别代表 `当前进度`，`加载进度`，`进度总长`\n* 歌曲的封面，为了实现宽度固定，焦点居中，使用 div 的 `background` 加载封面，`background-position` 可以实现焦点居中\n* 歌词的显示，使用 `<ul>` 可以实现，后面也方便进行滚动\n* 控制器的样式，引入了 `font-awesome` 作为图标\n* 音量调节的弹出，使用 CSS 的 `:hover` 进行一个样式优先级转换，还是尽量避免使用 JS 实现效果\n* 一些字体的凹凸感，使用了 `text-shadow` 实现，阴影往下偏移1个像素，发散一个像素，颜色使用比字体颜色偏浅的黑色\n\n\n> [demo查看](http://www.libinhong.com:8080/index)\n","source":"_posts/DAY2-播放器页面的实现.md","raw":"---\ntitle: DAY2 播放器页面的实现\ndate: 2016-03-20 21:51:14\ntags: Oxygen\ncategories: 项目\n---\n> 早上8点多起床转角遇到爱——一只好大的蜘蛛，面对面吓蒙逼了。下午将播放器的图给切出来，主要还是微调一下样式比较麻烦，测试了一下 IE 9+ 都是正常显示的，IE 8 不支持 `border-radius` 和 `box-shadow` 就没办法啦，`rem` 也不能用，但是这个能用正常的 `px` 解决。\n\n## 最终页面效果图\n![](http://7xoehm.com1.z0.glb.clouddn.com/github%E7%AC%AC%E4%BA%8C%E7%89%88.png)\n\n## 实现过程\n* 进度条的布局，典型的双飞翼布局方式，左右固定了 60px 作为左右两个时间的空间\n* 进度条的实现，用了三个 div 分别代表 `当前进度`，`加载进度`，`进度总长`\n* 歌曲的封面，为了实现宽度固定，焦点居中，使用 div 的 `background` 加载封面，`background-position` 可以实现焦点居中\n* 歌词的显示，使用 `<ul>` 可以实现，后面也方便进行滚动\n* 控制器的样式，引入了 `font-awesome` 作为图标\n* 音量调节的弹出，使用 CSS 的 `:hover` 进行一个样式优先级转换，还是尽量避免使用 JS 实现效果\n* 一些字体的凹凸感，使用了 `text-shadow` 实现，阴影往下偏移1个像素，发散一个像素，颜色使用比字体颜色偏浅的黑色\n\n\n> [demo查看](http://www.libinhong.com:8080/index)\n","slug":"DAY2-播放器页面的实现","published":1,"updated":"2016-03-20T14:10:55.575Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqggs7ft0004ikvd3rrage0k","content":"<blockquote>\n<p>早上8点多起床转角遇到爱——一只好大的蜘蛛，面对面吓蒙逼了。下午将播放器的图给切出来，主要还是微调一下样式比较麻烦，测试了一下 IE 9+ 都是正常显示的，IE 8 不支持 <code>border-radius</code> 和 <code>box-shadow</code> 就没办法啦，<code>rem</code> 也不能用，但是这个能用正常的 <code>px</code> 解决。</p>\n</blockquote>\n<h2 id=\"最终页面效果图\"><a href=\"#最终页面效果图\" class=\"headerlink\" title=\"最终页面效果图\"></a>最终页面效果图</h2><p><img src=\"http://7xoehm.com1.z0.glb.clouddn.com/github%E7%AC%AC%E4%BA%8C%E7%89%88.png\" alt=\"\"></p>\n<h2 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h2><ul>\n<li>进度条的布局，典型的双飞翼布局方式，左右固定了 60px 作为左右两个时间的空间</li>\n<li>进度条的实现，用了三个 div 分别代表 <code>当前进度</code>，<code>加载进度</code>，<code>进度总长</code></li>\n<li>歌曲的封面，为了实现宽度固定，焦点居中，使用 div 的 <code>background</code> 加载封面，<code>background-position</code> 可以实现焦点居中</li>\n<li>歌词的显示，使用 <code>&lt;ul&gt;</code> 可以实现，后面也方便进行滚动</li>\n<li>控制器的样式，引入了 <code>font-awesome</code> 作为图标</li>\n<li>音量调节的弹出，使用 CSS 的 <code>:hover</code> 进行一个样式优先级转换，还是尽量避免使用 JS 实现效果</li>\n<li>一些字体的凹凸感，使用了 <code>text-shadow</code> 实现，阴影往下偏移1个像素，发散一个像素，颜色使用比字体颜色偏浅的黑色</li>\n</ul>\n<blockquote>\n<p><a href=\"http://www.libinhong.com:8080/index\" target=\"_blank\" rel=\"external\">demo查看</a></p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>早上8点多起床转角遇到爱——一只好大的蜘蛛，面对面吓蒙逼了。下午将播放器的图给切出来，主要还是微调一下样式比较麻烦，测试了一下 IE 9+ 都是正常显示的，IE 8 不支持 <code>border-radius</code> 和 <code>box-shadow</code> 就没办法啦，<code>rem</code> 也不能用，但是这个能用正常的 <code>px</code> 解决。</p>\n</blockquote>\n<h2 id=\"最终页面效果图\"><a href=\"#最终页面效果图\" class=\"headerlink\" title=\"最终页面效果图\"></a>最终页面效果图</h2><p><img src=\"http://7xoehm.com1.z0.glb.clouddn.com/github%E7%AC%AC%E4%BA%8C%E7%89%88.png\" alt=\"\"></p>\n<h2 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h2><ul>\n<li>进度条的布局，典型的双飞翼布局方式，左右固定了 60px 作为左右两个时间的空间</li>\n<li>进度条的实现，用了三个 div 分别代表 <code>当前进度</code>，<code>加载进度</code>，<code>进度总长</code></li>\n<li>歌曲的封面，为了实现宽度固定，焦点居中，使用 div 的 <code>background</code> 加载封面，<code>background-position</code> 可以实现焦点居中</li>\n<li>歌词的显示，使用 <code>&lt;ul&gt;</code> 可以实现，后面也方便进行滚动</li>\n<li>控制器的样式，引入了 <code>font-awesome</code> 作为图标</li>\n<li>音量调节的弹出，使用 CSS 的 <code>:hover</code> 进行一个样式优先级转换，还是尽量避免使用 JS 实现效果</li>\n<li>一些字体的凹凸感，使用了 <code>text-shadow</code> 实现，阴影往下偏移1个像素，发散一个像素，颜色使用比字体颜色偏浅的黑色</li>\n</ul>\n<blockquote>\n<p><a href=\"http://www.libinhong.com:8080/index\">demo查看</a></p>\n</blockquote>\n"},{"title":"DAY3 Backbone.js API阅读","date":"2016-03-21T06:04:56.000Z","_content":"> 原来机房看 API 的学习效率奇低，今天在机房上一天课，下午5点半下个脚都是麻的，今天主要还是熟悉一下 `Backbone.js` 的API，下面看几个比较重要的 API，也算是对今天学习的一个备忘录。官方文档写得有点简单了，后来看官方提供的 `Todos` 的例子的源码加上一边看官方文档才渐渐明白运行机制。\n\n# Backbone.js\n\n`Backbone.js` 强制依赖 `Underscore.js`，其很多实现方式都利用了 Underscore 的 API，由于之前通读过 Underscore 的源代码，所以这个并没有太大问题。此外，Backbone.js 还半依赖 `JQuery.js`，主要是 Backbone 里的一个 `save` 函数当执行时会执行 `Backbone.sync` 从而需要使用 `ajax` 访问服务器进行 `Model` 的保存，当然，可以通过重载 `Backbone.sync` 来使用其他方式保存 Model，例如[Backbone.localStorage.js](https://github.com/Rlilyyy/Backbone.localStorage)就是一个用于重载 sync 的库。\n\n## Model\n\nModel 用于处理 `数据交互`和 `逻辑`，一般地，使用 Backbone.Model.extend(properties, [classProperties]) 创建一个新的模型，properties 为一个对象实例，里面包含多个属性：\n* defaults——用于设置一些初始的模型属性，如下面代码所示：\n```JavaScript\nvar Meal = Backbone.Model.extend({\n  defaults: {\n    \"appetizer\":  \"caesar salad\",\n    \"entree\":     \"ravioli\",\n    \"dessert\":    \"cheesecake\"\n  }\n});\n```\n* initialize——在模型创建后执行的函数\n* save——将模型的 attributes 模型状态保存到持久层\n* validate——用于验证调用 save 以后传入的 attributes 的值的合法性，如果有返回数据，代表验证失败，save 就不会成功保存模型，如果在 set 中传入 `{validate:true}`，那么会执行 validate 验证。\n* fetch——从服务器更新模型数据，如果数据有更新，则会触发 `change` 事件，同时接受 `success` 和 `error` 回调\n* previous——在该模型的 change 事件中，可以通过此函数获取上一次更改的值\n* previousAttributes——同样用过此函数获取上一次更改的属性散列副本\n* 可以重载 Model 中的函数，如 `get`，`set`\n","source":"_posts/DAY3-Backbone-js-API阅读.md","raw":"---\ntitle: DAY3 Backbone.js API阅读\ndate: 2016-03-21 14:04:56\ntags: Oxygen\ncategories: 项目\n---\n> 原来机房看 API 的学习效率奇低，今天在机房上一天课，下午5点半下个脚都是麻的，今天主要还是熟悉一下 `Backbone.js` 的API，下面看几个比较重要的 API，也算是对今天学习的一个备忘录。官方文档写得有点简单了，后来看官方提供的 `Todos` 的例子的源码加上一边看官方文档才渐渐明白运行机制。\n\n# Backbone.js\n\n`Backbone.js` 强制依赖 `Underscore.js`，其很多实现方式都利用了 Underscore 的 API，由于之前通读过 Underscore 的源代码，所以这个并没有太大问题。此外，Backbone.js 还半依赖 `JQuery.js`，主要是 Backbone 里的一个 `save` 函数当执行时会执行 `Backbone.sync` 从而需要使用 `ajax` 访问服务器进行 `Model` 的保存，当然，可以通过重载 `Backbone.sync` 来使用其他方式保存 Model，例如[Backbone.localStorage.js](https://github.com/Rlilyyy/Backbone.localStorage)就是一个用于重载 sync 的库。\n\n## Model\n\nModel 用于处理 `数据交互`和 `逻辑`，一般地，使用 Backbone.Model.extend(properties, [classProperties]) 创建一个新的模型，properties 为一个对象实例，里面包含多个属性：\n* defaults——用于设置一些初始的模型属性，如下面代码所示：\n```JavaScript\nvar Meal = Backbone.Model.extend({\n  defaults: {\n    \"appetizer\":  \"caesar salad\",\n    \"entree\":     \"ravioli\",\n    \"dessert\":    \"cheesecake\"\n  }\n});\n```\n* initialize——在模型创建后执行的函数\n* save——将模型的 attributes 模型状态保存到持久层\n* validate——用于验证调用 save 以后传入的 attributes 的值的合法性，如果有返回数据，代表验证失败，save 就不会成功保存模型，如果在 set 中传入 `{validate:true}`，那么会执行 validate 验证。\n* fetch——从服务器更新模型数据，如果数据有更新，则会触发 `change` 事件，同时接受 `success` 和 `error` 回调\n* previous——在该模型的 change 事件中，可以通过此函数获取上一次更改的值\n* previousAttributes——同样用过此函数获取上一次更改的属性散列副本\n* 可以重载 Model 中的函数，如 `get`，`set`\n","slug":"DAY3-Backbone-js-API阅读","published":1,"updated":"2016-04-04T13:09:41.163Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqggs7ft0005ikvd43ccqm05","content":"<blockquote>\n<p>原来机房看 API 的学习效率奇低，今天在机房上一天课，下午5点半下个脚都是麻的，今天主要还是熟悉一下 <code>Backbone.js</code> 的API，下面看几个比较重要的 API，也算是对今天学习的一个备忘录。官方文档写得有点简单了，后来看官方提供的 <code>Todos</code> 的例子的源码加上一边看官方文档才渐渐明白运行机制。</p>\n</blockquote>\n<h1 id=\"Backbone-js\"><a href=\"#Backbone-js\" class=\"headerlink\" title=\"Backbone.js\"></a>Backbone.js</h1><p><code>Backbone.js</code> 强制依赖 <code>Underscore.js</code>，其很多实现方式都利用了 Underscore 的 API，由于之前通读过 Underscore 的源代码，所以这个并没有太大问题。此外，Backbone.js 还半依赖 <code>JQuery.js</code>，主要是 Backbone 里的一个 <code>save</code> 函数当执行时会执行 <code>Backbone.sync</code> 从而需要使用 <code>ajax</code> 访问服务器进行 <code>Model</code> 的保存，当然，可以通过重载 <code>Backbone.sync</code> 来使用其他方式保存 Model，例如<a href=\"https://github.com/Rlilyyy/Backbone.localStorage\" target=\"_blank\" rel=\"external\">Backbone.localStorage.js</a>就是一个用于重载 sync 的库。</p>\n<h2 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h2><p>Model 用于处理 <code>数据交互</code>和 <code>逻辑</code>，一般地，使用 Backbone.Model.extend(properties, [classProperties]) 创建一个新的模型，properties 为一个对象实例，里面包含多个属性：</p>\n<ul>\n<li><p>defaults——用于设置一些初始的模型属性，如下面代码所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Meal = Backbone.Model.extend(&#123;</span><br><span class=\"line\">  defaults: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"appetizer\"</span>:  <span class=\"string\">\"caesar salad\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"entree\"</span>:     <span class=\"string\">\"ravioli\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"dessert\"</span>:    <span class=\"string\">\"cheesecake\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>initialize——在模型创建后执行的函数</p>\n</li>\n<li>save——将模型的 attributes 模型状态保存到持久层</li>\n<li>validate——用于验证调用 save 以后传入的 attributes 的值的合法性，如果有返回数据，代表验证失败，save 就不会成功保存模型，如果在 set 中传入 <code>{validate:true}</code>，那么会执行 validate 验证。</li>\n<li>fetch——从服务器更新模型数据，如果数据有更新，则会触发 <code>change</code> 事件，同时接受 <code>success</code> 和 <code>error</code> 回调</li>\n<li>previous——在该模型的 change 事件中，可以通过此函数获取上一次更改的值</li>\n<li>previousAttributes——同样用过此函数获取上一次更改的属性散列副本</li>\n<li>可以重载 Model 中的函数，如 <code>get</code>，<code>set</code></li>\n</ul>\n","excerpt":"","more":"<blockquote>\n<p>原来机房看 API 的学习效率奇低，今天在机房上一天课，下午5点半下个脚都是麻的，今天主要还是熟悉一下 <code>Backbone.js</code> 的API，下面看几个比较重要的 API，也算是对今天学习的一个备忘录。官方文档写得有点简单了，后来看官方提供的 <code>Todos</code> 的例子的源码加上一边看官方文档才渐渐明白运行机制。</p>\n</blockquote>\n<h1 id=\"Backbone-js\"><a href=\"#Backbone-js\" class=\"headerlink\" title=\"Backbone.js\"></a>Backbone.js</h1><p><code>Backbone.js</code> 强制依赖 <code>Underscore.js</code>，其很多实现方式都利用了 Underscore 的 API，由于之前通读过 Underscore 的源代码，所以这个并没有太大问题。此外，Backbone.js 还半依赖 <code>JQuery.js</code>，主要是 Backbone 里的一个 <code>save</code> 函数当执行时会执行 <code>Backbone.sync</code> 从而需要使用 <code>ajax</code> 访问服务器进行 <code>Model</code> 的保存，当然，可以通过重载 <code>Backbone.sync</code> 来使用其他方式保存 Model，例如<a href=\"https://github.com/Rlilyyy/Backbone.localStorage\">Backbone.localStorage.js</a>就是一个用于重载 sync 的库。</p>\n<h2 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h2><p>Model 用于处理 <code>数据交互</code>和 <code>逻辑</code>，一般地，使用 Backbone.Model.extend(properties, [classProperties]) 创建一个新的模型，properties 为一个对象实例，里面包含多个属性：</p>\n<ul>\n<li><p>defaults——用于设置一些初始的模型属性，如下面代码所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Meal = Backbone.Model.extend(&#123;</span><br><span class=\"line\">  defaults: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"appetizer\"</span>:  <span class=\"string\">\"caesar salad\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"entree\"</span>:     <span class=\"string\">\"ravioli\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"dessert\"</span>:    <span class=\"string\">\"cheesecake\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>initialize——在模型创建后执行的函数</p>\n</li>\n<li>save——将模型的 attributes 模型状态保存到持久层</li>\n<li>validate——用于验证调用 save 以后传入的 attributes 的值的合法性，如果有返回数据，代表验证失败，save 就不会成功保存模型，如果在 set 中传入 <code>{validate:true}</code>，那么会执行 validate 验证。</li>\n<li>fetch——从服务器更新模型数据，如果数据有更新，则会触发 <code>change</code> 事件，同时接受 <code>success</code> 和 <code>error</code> 回调</li>\n<li>previous——在该模型的 change 事件中，可以通过此函数获取上一次更改的值</li>\n<li>previousAttributes——同样用过此函数获取上一次更改的属性散列副本</li>\n<li>可以重载 Model 中的函数，如 <code>get</code>，<code>set</code></li>\n</ul>\n"},{"title":"ES6 学习笔记","date":"2016-04-06T00:11:04.000Z","_content":"\n# let 和 const\n\n## let\n> 使用 `let` 定义的变量只在块级作用域里可以访问，而 `var` 定义的变量没有块级作用域的概念，只要在作用域内即可访问\n\n### 我们可以在循环内使用 let 代替 var\n```JavaScript\nfor(let i=0;i<5;i++) {\n    console.log(i);// 0,1,2,3,4\n}\nconsole.log(i);// Uncaught ReferenceError: i is not defined\n```\n\n### let 声明的变量不存在变量提升\n```JavaScript\nconsole.log(i);// undefined\nconsole.log(j);// Uncaught ReferenceError\n\nvar i = 5;\nlet j = 6;\n```\n\n### 暂时性死区(temporal dead zone，简称TDZ)\n> 在使用 let 和 const 定义变量的块级作用域里，会形成封闭的块级作用域，在使用 let 或 const 定义变量的语句之前，该变量无法被赋值，都会抛出 ReferenceError\n\n```JavaScript\nif(true) {\n    tmp = \"a\";// ReferenceError\n    console.log(tmp);// ReferenceError\n\n    // 死区结束\n    let tmp;\n    console.log(tmp);// undefined\n\n    tmp = \"b\";\n    console.log(tmp);// b\n}\n```\n\n### 其他一些限制\n* 使用 let 声明的变量不允许在同一块级作用域内重复声明\n* 块级作用域内声明的函数只在该块级作用域内可用\n* ES6 块级作用域内的声明的函数不存在函数提升\n\n## const\n> 使用 `const` 声明的变量无法更改，严格模式下重复赋值会报错，而常规模式下不报错也不赋值成功\n\n### 限制\n* const 同样存在暂时性死区\n* const 不允许重复定义，不存在变量提升\n* 使用 const 声明一个对象，只保证该对象的指针不被修改，不保证该对象内部属性不被修改\n* 使用 const 声明的变量只在当前块级作用域内有效\n* 使用 const 声明的变量可以跨模块使用\n```JavaScript\n// constants.js 模块\nexport const A = 1;\nexport const B = 3;\nexport const C = 4;\n\n// test1.js 模块\nimport * as constants from './constants';\nconsole.log(constants.A); // 1\nconsole.log(constants.B); // 3\n\n// test2.js 模块\nimport {A, B} from './constants';\nconsole.log(A); // 1\nconsole.log(B); // 3\n```\n* 在 window 作用域下使用 const 声明的变量不会变为 window.? 变量\n\n# 解构赋值\n> ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）\n\n```JavaScript\n// ES5\nvar a = 1;\nvar b = 2;\nvar c = 3;\n\n// ES6\n// 解构成功\nvar [a, b, c] = [1, 2, 3];\n\n// 解构失败——部分解构\nvar [x, y] = [1];\nconsole.log(x);// 1\nconsole.log(y);// undefined\n\n// 解构成功——不完全解构\nvar [i, [j], k] = [1, [2, 3], 4];\nconsole.log(i);// 1\nconsole.log(j);// 2\nconsole.log(k);// 4\n\n// 模式匹配的解构\nvar [a1, [a2, a3]] = [1, [2, 3]];\nconsole.log(a1);// 1\nconsole.log(a2);// 2\nconsole.log(a3);// 3\n\nvar [, , tmp] = [1, 2, 3];\nconsole.log(tmp);// 3\n\nvar [x1, ...x2] = [1, 2, 3, 4, 5];\nconsole.log(x1);// 1\nconsole.log(x2);// [2, 3, 4, 5]\n\nvar [y1, y2, ...y3] = [1];\nconsole.log(y1);// 1\nconsole.log(y2);// undefined\nconsole.log(y3);// []\n\n// 有默认值的解构赋值\n// 只有对应赋值是 undefined，默认值才会生效\nvar [z1 ,z2 = 2] = [1, undefined];\nconsole.log(z1);// 1\nconsole.log(z2);// 2\n\n// 对象的解构赋值\n// 位置可以不同\nvar {q2, q1} = {q1: 1, q2: 2};\nconsole.log(q1);// 1\nconsole.log(q2);// 2\n\n// 下面这个有点反人类\n// 真正被赋值的是后者 t1, t2，而不是前者 r1, r2\nvar {r1: t1, r2: t2} = {r1: 1, r2: 2};\nconsole.log(t1);// 1\nconsole.log(t2);// 2\n\n// 字符串的解构赋值\nvar [s1, s2, s3] = \"abc\";\nconsole.log(s1);// a\nconsole.log(s2);// b\nconsole.log(s3);// c\n\n// 函数参数的解构赋值\nfunction func([x, y]) {\n    return x + y;\n}\nfunc([1, 2]);// 3\n\nfunction func2([x = 1, y = 2] = []) {\n    return [x, y];\n}\nfunc2([2, 3]);// [2, 3]\nfunc2([2]);// [2, 2]\nfunc2([]);// [1, 2]\n\n// 变量赋值交换\nfunction exchange([x, y]) {\n    var [x, y] = [y, x];\n    return [x, y];\n}\nexchange([1, 2]);// [2, 1]\n```\n\n# 字符串\n\n## Unicode 表示法\n```JavaScript\n// 单字节 Unicode\nconsole.log(\"\\u0061\");// a\n\n// 双字节 Unicode\nconsole.log(\"\\u{20BB7}\");// 𠮷\n\nlet hello = 123;\nhell\\u{6F} // 123\n\n// 对于双字节字符，用 codePointAt() 正确获取对应十进制字符码\nvar s = \"𠮷a\";\n// 这里是“𠮷”的十进制字符码\nconsole.log(s.codePointAt(0));// 134071\n// 这里是“𠮷”的第二个十进制字符码\nconsole.log(s.codePointAt(1));// 57271\n// 这里是“a”的十进制字符码\nconsole.log(s.codePointAt(2));// 97\n\n// 合成字符的规范化，用于正确判断相等性\nconsole.log(\"\\u01D1\".normalize() === \"\\u004F\\u030C\".normalize()) // true\nconsole.log(\"\\u01D1\" === \"\\u004F\\u030C\");\n```\n\n## 其他函数\n* includes(code, startIndex)：返回布尔值，表示是否找到了参数字符串\n* startsWith(code, startIndex)：返回布尔值，表示参数字符串是否在源字符串的头部\n* endsWith(code, startIndex)：返回布尔值，表示参数字符串是否在源字符串的尾部\n* repeat()：返回一个新字符串，表示将原字符串重复n次\n\n## 模板字符串\n```JavaScript\n// ES5\n$(\"#result\").append(\n  \"There are <b>\" + basket.count + \"</b> \" +\n  \"items in your basket, \" +\n  \"<em>\" + basket.onSale +\n  \"</em> are on sale!\"\n);\n\n// ES6\n// 注意模板字符串使用 `` 代替 \"\"\n// ${} 代表变量\n$(\"#result\").append(`\n  There are <b>${basket.count}</b> items\n   in your basket, <em>${basket.onSale}</em>\n  are on sale!\n`);\n\n// 可以在模板字符串内运算\nvar x = 1;\nvar y = 2;\n\n`${x} + ${y} = ${x + y}`\n// \"1 + 2 = 3\"\n\n`${x} + ${y * 2} = ${x + y * 2}`\n// \"1 + 4 = 5\"\n\nvar obj = {x: 1, y: 2};\n`${obj.x + obj.y}`\n// 3\n\n// 可以调用函数\nfunction fn() {\n  return \"Hello World\";\n}\n\n`foo ${fn()} bar`\n// foo Hello World bar\n\n// raw 会自动转义斜杠\nString.raw`Hi\\n${2+3}!`;// Hi\\n5!\n\n// 此外还有标签模板等扩展，更详细的看教程\n```\n\n# 数组的扩展\n\n## 新的数组函数\n* Array.from()，用于将类数组对象转换为真正的数组，如果有第二个参数可是实现类似 map() 的效果，使用[...array]会有相同结果\n* Array.of()，用于将一组数值转换为数组对象\n* (new Array()).copyWithin(target, startIndex, endIndex)，用于将 startIndex 到 endIndex 的元素复制到 target 位为开头的位置上\n* (new Array()).find(arr, callback)，用于寻找 arr 数组中符合 callback 中条件的第一个元素\n* (new Array()).findIndex(arr, callback)，用于寻找 arr 数组中符合 callback 中条件的第一个元素的索引\n* (new Array()).fill(char, starIndex, endIndex)，用于用 char 填充数组\n* (new Array()).entries()，返回所有键-值(key-value)对\n* (new Array()).keys()，返回所有键(key)的值\n* (new Array()).values()，返回所有值(value)\n\n> 以上例子参考自阮一峰老师的《ECMAScript 6入门》一书的开源版本，地址：http://es6.ruanyifeng.com/#README\n","source":"_posts/ES6-学习笔记.md","raw":"---\ntitle: ES6 学习笔记\ndate: 2016-04-06 08:11:04\ncategories:\n    - 前端\n    - ECMAScript 6\ntags: Javascript\n---\n\n# let 和 const\n\n## let\n> 使用 `let` 定义的变量只在块级作用域里可以访问，而 `var` 定义的变量没有块级作用域的概念，只要在作用域内即可访问\n\n### 我们可以在循环内使用 let 代替 var\n```JavaScript\nfor(let i=0;i<5;i++) {\n    console.log(i);// 0,1,2,3,4\n}\nconsole.log(i);// Uncaught ReferenceError: i is not defined\n```\n\n### let 声明的变量不存在变量提升\n```JavaScript\nconsole.log(i);// undefined\nconsole.log(j);// Uncaught ReferenceError\n\nvar i = 5;\nlet j = 6;\n```\n\n### 暂时性死区(temporal dead zone，简称TDZ)\n> 在使用 let 和 const 定义变量的块级作用域里，会形成封闭的块级作用域，在使用 let 或 const 定义变量的语句之前，该变量无法被赋值，都会抛出 ReferenceError\n\n```JavaScript\nif(true) {\n    tmp = \"a\";// ReferenceError\n    console.log(tmp);// ReferenceError\n\n    // 死区结束\n    let tmp;\n    console.log(tmp);// undefined\n\n    tmp = \"b\";\n    console.log(tmp);// b\n}\n```\n\n### 其他一些限制\n* 使用 let 声明的变量不允许在同一块级作用域内重复声明\n* 块级作用域内声明的函数只在该块级作用域内可用\n* ES6 块级作用域内的声明的函数不存在函数提升\n\n## const\n> 使用 `const` 声明的变量无法更改，严格模式下重复赋值会报错，而常规模式下不报错也不赋值成功\n\n### 限制\n* const 同样存在暂时性死区\n* const 不允许重复定义，不存在变量提升\n* 使用 const 声明一个对象，只保证该对象的指针不被修改，不保证该对象内部属性不被修改\n* 使用 const 声明的变量只在当前块级作用域内有效\n* 使用 const 声明的变量可以跨模块使用\n```JavaScript\n// constants.js 模块\nexport const A = 1;\nexport const B = 3;\nexport const C = 4;\n\n// test1.js 模块\nimport * as constants from './constants';\nconsole.log(constants.A); // 1\nconsole.log(constants.B); // 3\n\n// test2.js 模块\nimport {A, B} from './constants';\nconsole.log(A); // 1\nconsole.log(B); // 3\n```\n* 在 window 作用域下使用 const 声明的变量不会变为 window.? 变量\n\n# 解构赋值\n> ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）\n\n```JavaScript\n// ES5\nvar a = 1;\nvar b = 2;\nvar c = 3;\n\n// ES6\n// 解构成功\nvar [a, b, c] = [1, 2, 3];\n\n// 解构失败——部分解构\nvar [x, y] = [1];\nconsole.log(x);// 1\nconsole.log(y);// undefined\n\n// 解构成功——不完全解构\nvar [i, [j], k] = [1, [2, 3], 4];\nconsole.log(i);// 1\nconsole.log(j);// 2\nconsole.log(k);// 4\n\n// 模式匹配的解构\nvar [a1, [a2, a3]] = [1, [2, 3]];\nconsole.log(a1);// 1\nconsole.log(a2);// 2\nconsole.log(a3);// 3\n\nvar [, , tmp] = [1, 2, 3];\nconsole.log(tmp);// 3\n\nvar [x1, ...x2] = [1, 2, 3, 4, 5];\nconsole.log(x1);// 1\nconsole.log(x2);// [2, 3, 4, 5]\n\nvar [y1, y2, ...y3] = [1];\nconsole.log(y1);// 1\nconsole.log(y2);// undefined\nconsole.log(y3);// []\n\n// 有默认值的解构赋值\n// 只有对应赋值是 undefined，默认值才会生效\nvar [z1 ,z2 = 2] = [1, undefined];\nconsole.log(z1);// 1\nconsole.log(z2);// 2\n\n// 对象的解构赋值\n// 位置可以不同\nvar {q2, q1} = {q1: 1, q2: 2};\nconsole.log(q1);// 1\nconsole.log(q2);// 2\n\n// 下面这个有点反人类\n// 真正被赋值的是后者 t1, t2，而不是前者 r1, r2\nvar {r1: t1, r2: t2} = {r1: 1, r2: 2};\nconsole.log(t1);// 1\nconsole.log(t2);// 2\n\n// 字符串的解构赋值\nvar [s1, s2, s3] = \"abc\";\nconsole.log(s1);// a\nconsole.log(s2);// b\nconsole.log(s3);// c\n\n// 函数参数的解构赋值\nfunction func([x, y]) {\n    return x + y;\n}\nfunc([1, 2]);// 3\n\nfunction func2([x = 1, y = 2] = []) {\n    return [x, y];\n}\nfunc2([2, 3]);// [2, 3]\nfunc2([2]);// [2, 2]\nfunc2([]);// [1, 2]\n\n// 变量赋值交换\nfunction exchange([x, y]) {\n    var [x, y] = [y, x];\n    return [x, y];\n}\nexchange([1, 2]);// [2, 1]\n```\n\n# 字符串\n\n## Unicode 表示法\n```JavaScript\n// 单字节 Unicode\nconsole.log(\"\\u0061\");// a\n\n// 双字节 Unicode\nconsole.log(\"\\u{20BB7}\");// 𠮷\n\nlet hello = 123;\nhell\\u{6F} // 123\n\n// 对于双字节字符，用 codePointAt() 正确获取对应十进制字符码\nvar s = \"𠮷a\";\n// 这里是“𠮷”的十进制字符码\nconsole.log(s.codePointAt(0));// 134071\n// 这里是“𠮷”的第二个十进制字符码\nconsole.log(s.codePointAt(1));// 57271\n// 这里是“a”的十进制字符码\nconsole.log(s.codePointAt(2));// 97\n\n// 合成字符的规范化，用于正确判断相等性\nconsole.log(\"\\u01D1\".normalize() === \"\\u004F\\u030C\".normalize()) // true\nconsole.log(\"\\u01D1\" === \"\\u004F\\u030C\");\n```\n\n## 其他函数\n* includes(code, startIndex)：返回布尔值，表示是否找到了参数字符串\n* startsWith(code, startIndex)：返回布尔值，表示参数字符串是否在源字符串的头部\n* endsWith(code, startIndex)：返回布尔值，表示参数字符串是否在源字符串的尾部\n* repeat()：返回一个新字符串，表示将原字符串重复n次\n\n## 模板字符串\n```JavaScript\n// ES5\n$(\"#result\").append(\n  \"There are <b>\" + basket.count + \"</b> \" +\n  \"items in your basket, \" +\n  \"<em>\" + basket.onSale +\n  \"</em> are on sale!\"\n);\n\n// ES6\n// 注意模板字符串使用 `` 代替 \"\"\n// ${} 代表变量\n$(\"#result\").append(`\n  There are <b>${basket.count}</b> items\n   in your basket, <em>${basket.onSale}</em>\n  are on sale!\n`);\n\n// 可以在模板字符串内运算\nvar x = 1;\nvar y = 2;\n\n`${x} + ${y} = ${x + y}`\n// \"1 + 2 = 3\"\n\n`${x} + ${y * 2} = ${x + y * 2}`\n// \"1 + 4 = 5\"\n\nvar obj = {x: 1, y: 2};\n`${obj.x + obj.y}`\n// 3\n\n// 可以调用函数\nfunction fn() {\n  return \"Hello World\";\n}\n\n`foo ${fn()} bar`\n// foo Hello World bar\n\n// raw 会自动转义斜杠\nString.raw`Hi\\n${2+3}!`;// Hi\\n5!\n\n// 此外还有标签模板等扩展，更详细的看教程\n```\n\n# 数组的扩展\n\n## 新的数组函数\n* Array.from()，用于将类数组对象转换为真正的数组，如果有第二个参数可是实现类似 map() 的效果，使用[...array]会有相同结果\n* Array.of()，用于将一组数值转换为数组对象\n* (new Array()).copyWithin(target, startIndex, endIndex)，用于将 startIndex 到 endIndex 的元素复制到 target 位为开头的位置上\n* (new Array()).find(arr, callback)，用于寻找 arr 数组中符合 callback 中条件的第一个元素\n* (new Array()).findIndex(arr, callback)，用于寻找 arr 数组中符合 callback 中条件的第一个元素的索引\n* (new Array()).fill(char, starIndex, endIndex)，用于用 char 填充数组\n* (new Array()).entries()，返回所有键-值(key-value)对\n* (new Array()).keys()，返回所有键(key)的值\n* (new Array()).values()，返回所有值(value)\n\n> 以上例子参考自阮一峰老师的《ECMAScript 6入门》一书的开源版本，地址：http://es6.ruanyifeng.com/#README\n","slug":"ES6-学习笔记","published":1,"updated":"2016-04-19T07:00:05.856Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqggs7jn000iikvd9xlo0rbz","content":"<h1 id=\"let-和-const\"><a href=\"#let-和-const\" class=\"headerlink\" title=\"let 和 const\"></a>let 和 const</h1><h2 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h2><blockquote>\n<p>使用 <code>let</code> 定义的变量只在块级作用域里可以访问，而 <code>var</code> 定义的变量没有块级作用域的概念，只要在作用域内即可访问</p>\n</blockquote>\n<h3 id=\"我们可以在循环内使用-let-代替-var\"><a href=\"#我们可以在循环内使用-let-代替-var\" class=\"headerlink\" title=\"我们可以在循环内使用 let 代替 var\"></a>我们可以在循环内使用 let 代替 var</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);<span class=\"comment\">// 0,1,2,3,4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i);<span class=\"comment\">// Uncaught ReferenceError: i is not defined</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"let-声明的变量不存在变量提升\"><a href=\"#let-声明的变量不存在变量提升\" class=\"headerlink\" title=\"let 声明的变量不存在变量提升\"></a>let 声明的变量不存在变量提升</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(i);<span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(j);<span class=\"comment\">// Uncaught ReferenceError</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> j = <span class=\"number\">6</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"暂时性死区-temporal-dead-zone，简称TDZ\"><a href=\"#暂时性死区-temporal-dead-zone，简称TDZ\" class=\"headerlink\" title=\"暂时性死区(temporal dead zone，简称TDZ)\"></a>暂时性死区(temporal dead zone，简称TDZ)</h3><blockquote>\n<p>在使用 let 和 const 定义变量的块级作用域里，会形成封闭的块级作用域，在使用 let 或 const 定义变量的语句之前，该变量无法被赋值，都会抛出 ReferenceError</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    tmp = <span class=\"string\">\"a\"</span>;<span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(tmp);<span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 死区结束</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(tmp);<span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">    tmp = <span class=\"string\">\"b\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(tmp);<span class=\"comment\">// b</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他一些限制\"><a href=\"#其他一些限制\" class=\"headerlink\" title=\"其他一些限制\"></a>其他一些限制</h3><ul>\n<li>使用 let 声明的变量不允许在同一块级作用域内重复声明</li>\n<li>块级作用域内声明的函数只在该块级作用域内可用</li>\n<li>ES6 块级作用域内的声明的函数不存在函数提升</li>\n</ul>\n<h2 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h2><blockquote>\n<p>使用 <code>const</code> 声明的变量无法更改，严格模式下重复赋值会报错，而常规模式下不报错也不赋值成功</p>\n</blockquote>\n<h3 id=\"限制\"><a href=\"#限制\" class=\"headerlink\" title=\"限制\"></a>限制</h3><ul>\n<li>const 同样存在暂时性死区</li>\n<li>const 不允许重复定义，不存在变量提升</li>\n<li>使用 const 声明一个对象，只保证该对象的指针不被修改，不保证该对象内部属性不被修改</li>\n<li>使用 const 声明的变量只在当前块级作用域内有效</li>\n<li><p>使用 const 声明的变量可以跨模块使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// constants.js 模块</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> A = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> B = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> C = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// test1.js 模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> constants <span class=\"keyword\">from</span> <span class=\"string\">'./constants'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(constants.A); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(constants.B); <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// test2.js 模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;A, B&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./constants'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(A); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(B); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 window 作用域下使用 const 声明的变量不会变为 window.? 变量</p>\n</li>\n</ul>\n<h1 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h1><blockquote>\n<p>ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"comment\">// 解构成功</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解构失败——部分解构</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> [x, y] = [<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x);<span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(y);<span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解构成功——不完全解构</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> [i, [j], k] = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i);<span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(j);<span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(k);<span class=\"comment\">// 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模式匹配的解构</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> [a1, [a2, a3]] = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>]];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a1);<span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a2);<span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a3);<span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> [, , tmp] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tmp);<span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> [x1, ...x2] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x1);<span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x2);<span class=\"comment\">// [2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> [y1, y2, ...y3] = [<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(y1);<span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(y2);<span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(y3);<span class=\"comment\">// []</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 有默认值的解构赋值</span></span><br><span class=\"line\"><span class=\"comment\">// 只有对应赋值是 undefined，默认值才会生效</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> [z1 ,z2 = <span class=\"number\">2</span>] = [<span class=\"number\">1</span>, <span class=\"literal\">undefined</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(z1);<span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(z2);<span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对象的解构赋值</span></span><br><span class=\"line\"><span class=\"comment\">// 位置可以不同</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;q2, q1&#125; = &#123;q1: <span class=\"number\">1</span>, q2: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(q1);<span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(q2);<span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面这个有点反人类</span></span><br><span class=\"line\"><span class=\"comment\">// 真正被赋值的是后者 t1, t2，而不是前者 r1, r2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;r1: t1, r2: t2&#125; = &#123;r1: <span class=\"number\">1</span>, r2: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(t1);<span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(t2);<span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 字符串的解构赋值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> [s1, s2, s3] = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s1);<span class=\"comment\">// a</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s2);<span class=\"comment\">// b</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s3);<span class=\"comment\">// c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数参数的解构赋值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">[x, y]</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func([<span class=\"number\">1</span>, <span class=\"number\">2</span>]);<span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func2</span>(<span class=\"params\">[x = 1, y = 2] = []</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func2([<span class=\"number\">2</span>, <span class=\"number\">3</span>]);<span class=\"comment\">// [2, 3]</span></span><br><span class=\"line\">func2([<span class=\"number\">2</span>]);<span class=\"comment\">// [2, 2]</span></span><br><span class=\"line\">func2([]);<span class=\"comment\">// [1, 2]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 变量赋值交换</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">exchange</span>(<span class=\"params\">[x, y]</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> [x, y] = [y, x];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exchange([<span class=\"number\">1</span>, <span class=\"number\">2</span>]);<span class=\"comment\">// [2, 1]</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h1><h2 id=\"Unicode-表示法\"><a href=\"#Unicode-表示法\" class=\"headerlink\" title=\"Unicode 表示法\"></a>Unicode 表示法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单字节 Unicode</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\u0061\"</span>);<span class=\"comment\">// a</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 双字节 Unicode</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\u&#123;20BB7&#125;\"</span>);<span class=\"comment\">// 𠮷</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> hello = <span class=\"number\">123</span>;</span><br><span class=\"line\">hell\\u&#123;<span class=\"number\">6</span>F&#125; <span class=\"comment\">// 123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对于双字节字符，用 codePointAt() 正确获取对应十进制字符码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"𠮷a\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 这里是“𠮷”的十进制字符码</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s.codePointAt(<span class=\"number\">0</span>));<span class=\"comment\">// 134071</span></span><br><span class=\"line\"><span class=\"comment\">// 这里是“𠮷”的第二个十进制字符码</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s.codePointAt(<span class=\"number\">1</span>));<span class=\"comment\">// 57271</span></span><br><span class=\"line\"><span class=\"comment\">// 这里是“a”的十进制字符码</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s.codePointAt(<span class=\"number\">2</span>));<span class=\"comment\">// 97</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 合成字符的规范化，用于正确判断相等性</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\u01D1\"</span>.normalize() === <span class=\"string\">\"\\u004F\\u030C\"</span>.normalize()) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\u01D1\"</span> === <span class=\"string\">\"\\u004F\\u030C\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他函数\"><a href=\"#其他函数\" class=\"headerlink\" title=\"其他函数\"></a>其他函数</h2><ul>\n<li>includes(code, startIndex)：返回布尔值，表示是否找到了参数字符串</li>\n<li>startsWith(code, startIndex)：返回布尔值，表示参数字符串是否在源字符串的头部</li>\n<li>endsWith(code, startIndex)：返回布尔值，表示参数字符串是否在源字符串的尾部</li>\n<li>repeat()：返回一个新字符串，表示将原字符串重复n次</li>\n</ul>\n<h2 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\">$(<span class=\"string\">\"#result\"</span>).append(</span><br><span class=\"line\">  <span class=\"string\">\"There are &lt;b&gt;\"</span> + basket.count + <span class=\"string\">\"&lt;/b&gt; \"</span> +</span><br><span class=\"line\">  <span class=\"string\">\"items in your basket, \"</span> +</span><br><span class=\"line\">  <span class=\"string\">\"&lt;em&gt;\"</span> + basket.onSale +</span><br><span class=\"line\">  <span class=\"string\">\"&lt;/em&gt; are on sale!\"</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"comment\">// 注意模板字符串使用 `` 代替 \"\"</span></span><br><span class=\"line\"><span class=\"comment\">// $&#123;&#125; 代表变量</span></span><br><span class=\"line\">$(<span class=\"string\">\"#result\"</span>).append(<span class=\"string\">`</span><br><span class=\"line\">  There are &lt;b&gt;<span class=\"subst\">$&#123;basket.count&#125;</span>&lt;/b&gt; items</span><br><span class=\"line\">   in your basket, &lt;em&gt;<span class=\"subst\">$&#123;basket.onSale&#125;</span>&lt;/em&gt;</span><br><span class=\"line\">  are on sale!</span><br><span class=\"line\">`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以在模板字符串内运算</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`<span class=\"subst\">$&#123;x&#125;</span> + <span class=\"subst\">$&#123;y&#125;</span> = <span class=\"subst\">$&#123;x + y&#125;</span>`</span></span><br><span class=\"line\"><span class=\"comment\">// \"1 + 2 = 3\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`<span class=\"subst\">$&#123;x&#125;</span> + <span class=\"subst\">$&#123;y * 2&#125;</span> = <span class=\"subst\">$&#123;x + y * 2&#125;</span>`</span></span><br><span class=\"line\"><span class=\"comment\">// \"1 + 4 = 5\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;x: <span class=\"number\">1</span>, y: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"string\">`<span class=\"subst\">$&#123;obj.x + obj.y&#125;</span>`</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以调用函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"Hello World\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`foo <span class=\"subst\">$&#123;fn()&#125;</span> bar`</span></span><br><span class=\"line\"><span class=\"comment\">// foo Hello World bar</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// raw 会自动转义斜杠</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>.raw<span class=\"string\">`Hi\\n<span class=\"subst\">$&#123;2+3&#125;</span>!`</span>;<span class=\"comment\">// Hi\\n5!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此外还有标签模板等扩展，更详细的看教程</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"数组的扩展\"><a href=\"#数组的扩展\" class=\"headerlink\" title=\"数组的扩展\"></a>数组的扩展</h1><h2 id=\"新的数组函数\"><a href=\"#新的数组函数\" class=\"headerlink\" title=\"新的数组函数\"></a>新的数组函数</h2><ul>\n<li>Array.from()，用于将类数组对象转换为真正的数组，如果有第二个参数可是实现类似 map() 的效果，使用[…array]会有相同结果</li>\n<li>Array.of()，用于将一组数值转换为数组对象</li>\n<li>(new Array()).copyWithin(target, startIndex, endIndex)，用于将 startIndex 到 endIndex 的元素复制到 target 位为开头的位置上</li>\n<li>(new Array()).find(arr, callback)，用于寻找 arr 数组中符合 callback 中条件的第一个元素</li>\n<li>(new Array()).findIndex(arr, callback)，用于寻找 arr 数组中符合 callback 中条件的第一个元素的索引</li>\n<li>(new Array()).fill(char, starIndex, endIndex)，用于用 char 填充数组</li>\n<li>(new Array()).entries()，返回所有键-值(key-value)对</li>\n<li>(new Array()).keys()，返回所有键(key)的值</li>\n<li>(new Array()).values()，返回所有值(value)</li>\n</ul>\n<blockquote>\n<p>以上例子参考自阮一峰老师的《ECMAScript 6入门》一书的开源版本，地址：<a href=\"http://es6.ruanyifeng.com/#README\" target=\"_blank\" rel=\"external\">http://es6.ruanyifeng.com/#README</a></p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"let-和-const\"><a href=\"#let-和-const\" class=\"headerlink\" title=\"let 和 const\"></a>let 和 const</h1><h2 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h2><blockquote>\n<p>使用 <code>let</code> 定义的变量只在块级作用域里可以访问，而 <code>var</code> 定义的变量没有块级作用域的概念，只要在作用域内即可访问</p>\n</blockquote>\n<h3 id=\"我们可以在循环内使用-let-代替-var\"><a href=\"#我们可以在循环内使用-let-代替-var\" class=\"headerlink\" title=\"我们可以在循环内使用 let 代替 var\"></a>我们可以在循环内使用 let 代替 var</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);<span class=\"comment\">// 0,1,2,3,4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i);<span class=\"comment\">// Uncaught ReferenceError: i is not defined</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"let-声明的变量不存在变量提升\"><a href=\"#let-声明的变量不存在变量提升\" class=\"headerlink\" title=\"let 声明的变量不存在变量提升\"></a>let 声明的变量不存在变量提升</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(i);<span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(j);<span class=\"comment\">// Uncaught ReferenceError</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> j = <span class=\"number\">6</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"暂时性死区-temporal-dead-zone，简称TDZ\"><a href=\"#暂时性死区-temporal-dead-zone，简称TDZ\" class=\"headerlink\" title=\"暂时性死区(temporal dead zone，简称TDZ)\"></a>暂时性死区(temporal dead zone，简称TDZ)</h3><blockquote>\n<p>在使用 let 和 const 定义变量的块级作用域里，会形成封闭的块级作用域，在使用 let 或 const 定义变量的语句之前，该变量无法被赋值，都会抛出 ReferenceError</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    tmp = <span class=\"string\">\"a\"</span>;<span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(tmp);<span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 死区结束</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(tmp);<span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">    tmp = <span class=\"string\">\"b\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(tmp);<span class=\"comment\">// b</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他一些限制\"><a href=\"#其他一些限制\" class=\"headerlink\" title=\"其他一些限制\"></a>其他一些限制</h3><ul>\n<li>使用 let 声明的变量不允许在同一块级作用域内重复声明</li>\n<li>块级作用域内声明的函数只在该块级作用域内可用</li>\n<li>ES6 块级作用域内的声明的函数不存在函数提升</li>\n</ul>\n<h2 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h2><blockquote>\n<p>使用 <code>const</code> 声明的变量无法更改，严格模式下重复赋值会报错，而常规模式下不报错也不赋值成功</p>\n</blockquote>\n<h3 id=\"限制\"><a href=\"#限制\" class=\"headerlink\" title=\"限制\"></a>限制</h3><ul>\n<li>const 同样存在暂时性死区</li>\n<li>const 不允许重复定义，不存在变量提升</li>\n<li>使用 const 声明一个对象，只保证该对象的指针不被修改，不保证该对象内部属性不被修改</li>\n<li>使用 const 声明的变量只在当前块级作用域内有效</li>\n<li><p>使用 const 声明的变量可以跨模块使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// constants.js 模块</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> A = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> B = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> C = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// test1.js 模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> constants <span class=\"keyword\">from</span> <span class=\"string\">'./constants'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(constants.A); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(constants.B); <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// test2.js 模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;A, B&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./constants'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(A); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(B); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 window 作用域下使用 const 声明的变量不会变为 window.? 变量</p>\n</li>\n</ul>\n<h1 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h1><blockquote>\n<p>ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"comment\">// 解构成功</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解构失败——部分解构</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> [x, y] = [<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x);<span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(y);<span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解构成功——不完全解构</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> [i, [j], k] = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i);<span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(j);<span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(k);<span class=\"comment\">// 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模式匹配的解构</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> [a1, [a2, a3]] = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>]];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a1);<span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a2);<span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a3);<span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> [, , tmp] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tmp);<span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> [x1, ...x2] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x1);<span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x2);<span class=\"comment\">// [2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> [y1, y2, ...y3] = [<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(y1);<span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(y2);<span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(y3);<span class=\"comment\">// []</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 有默认值的解构赋值</span></span><br><span class=\"line\"><span class=\"comment\">// 只有对应赋值是 undefined，默认值才会生效</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> [z1 ,z2 = <span class=\"number\">2</span>] = [<span class=\"number\">1</span>, <span class=\"literal\">undefined</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(z1);<span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(z2);<span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对象的解构赋值</span></span><br><span class=\"line\"><span class=\"comment\">// 位置可以不同</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;q2, q1&#125; = &#123;q1: <span class=\"number\">1</span>, q2: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(q1);<span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(q2);<span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面这个有点反人类</span></span><br><span class=\"line\"><span class=\"comment\">// 真正被赋值的是后者 t1, t2，而不是前者 r1, r2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;r1: t1, r2: t2&#125; = &#123;r1: <span class=\"number\">1</span>, r2: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(t1);<span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(t2);<span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 字符串的解构赋值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> [s1, s2, s3] = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s1);<span class=\"comment\">// a</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s2);<span class=\"comment\">// b</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s3);<span class=\"comment\">// c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数参数的解构赋值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">[x, y]</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func([<span class=\"number\">1</span>, <span class=\"number\">2</span>]);<span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func2</span>(<span class=\"params\">[x = 1, y = 2] = []</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func2([<span class=\"number\">2</span>, <span class=\"number\">3</span>]);<span class=\"comment\">// [2, 3]</span></span><br><span class=\"line\">func2([<span class=\"number\">2</span>]);<span class=\"comment\">// [2, 2]</span></span><br><span class=\"line\">func2([]);<span class=\"comment\">// [1, 2]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 变量赋值交换</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">exchange</span>(<span class=\"params\">[x, y]</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> [x, y] = [y, x];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exchange([<span class=\"number\">1</span>, <span class=\"number\">2</span>]);<span class=\"comment\">// [2, 1]</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h1><h2 id=\"Unicode-表示法\"><a href=\"#Unicode-表示法\" class=\"headerlink\" title=\"Unicode 表示法\"></a>Unicode 表示法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单字节 Unicode</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\u0061\"</span>);<span class=\"comment\">// a</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 双字节 Unicode</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\u&#123;20BB7&#125;\"</span>);<span class=\"comment\">// 𠮷</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> hello = <span class=\"number\">123</span>;</span><br><span class=\"line\">hell\\u&#123;<span class=\"number\">6</span>F&#125; <span class=\"comment\">// 123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对于双字节字符，用 codePointAt() 正确获取对应十进制字符码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"𠮷a\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 这里是“𠮷”的十进制字符码</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s.codePointAt(<span class=\"number\">0</span>));<span class=\"comment\">// 134071</span></span><br><span class=\"line\"><span class=\"comment\">// 这里是“𠮷”的第二个十进制字符码</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s.codePointAt(<span class=\"number\">1</span>));<span class=\"comment\">// 57271</span></span><br><span class=\"line\"><span class=\"comment\">// 这里是“a”的十进制字符码</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s.codePointAt(<span class=\"number\">2</span>));<span class=\"comment\">// 97</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 合成字符的规范化，用于正确判断相等性</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\u01D1\"</span>.normalize() === <span class=\"string\">\"\\u004F\\u030C\"</span>.normalize()) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"\\u01D1\"</span> === <span class=\"string\">\"\\u004F\\u030C\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他函数\"><a href=\"#其他函数\" class=\"headerlink\" title=\"其他函数\"></a>其他函数</h2><ul>\n<li>includes(code, startIndex)：返回布尔值，表示是否找到了参数字符串</li>\n<li>startsWith(code, startIndex)：返回布尔值，表示参数字符串是否在源字符串的头部</li>\n<li>endsWith(code, startIndex)：返回布尔值，表示参数字符串是否在源字符串的尾部</li>\n<li>repeat()：返回一个新字符串，表示将原字符串重复n次</li>\n</ul>\n<h2 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\">$(<span class=\"string\">\"#result\"</span>).append(</span><br><span class=\"line\">  <span class=\"string\">\"There are &lt;b&gt;\"</span> + basket.count + <span class=\"string\">\"&lt;/b&gt; \"</span> +</span><br><span class=\"line\">  <span class=\"string\">\"items in your basket, \"</span> +</span><br><span class=\"line\">  <span class=\"string\">\"&lt;em&gt;\"</span> + basket.onSale +</span><br><span class=\"line\">  <span class=\"string\">\"&lt;/em&gt; are on sale!\"</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"comment\">// 注意模板字符串使用 `` 代替 \"\"</span></span><br><span class=\"line\"><span class=\"comment\">// $&#123;&#125; 代表变量</span></span><br><span class=\"line\">$(<span class=\"string\">\"#result\"</span>).append(<span class=\"string\">`</span><br><span class=\"line\">  There are &lt;b&gt;<span class=\"subst\">$&#123;basket.count&#125;</span>&lt;/b&gt; items</span><br><span class=\"line\">   in your basket, &lt;em&gt;<span class=\"subst\">$&#123;basket.onSale&#125;</span>&lt;/em&gt;</span><br><span class=\"line\">  are on sale!</span><br><span class=\"line\">`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以在模板字符串内运算</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`<span class=\"subst\">$&#123;x&#125;</span> + <span class=\"subst\">$&#123;y&#125;</span> = <span class=\"subst\">$&#123;x + y&#125;</span>`</span></span><br><span class=\"line\"><span class=\"comment\">// \"1 + 2 = 3\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`<span class=\"subst\">$&#123;x&#125;</span> + <span class=\"subst\">$&#123;y * 2&#125;</span> = <span class=\"subst\">$&#123;x + y * 2&#125;</span>`</span></span><br><span class=\"line\"><span class=\"comment\">// \"1 + 4 = 5\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;x: <span class=\"number\">1</span>, y: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"string\">`<span class=\"subst\">$&#123;obj.x + obj.y&#125;</span>`</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以调用函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"Hello World\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`foo <span class=\"subst\">$&#123;fn()&#125;</span> bar`</span></span><br><span class=\"line\"><span class=\"comment\">// foo Hello World bar</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// raw 会自动转义斜杠</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>.raw<span class=\"string\">`Hi\\n<span class=\"subst\">$&#123;2+3&#125;</span>!`</span>;<span class=\"comment\">// Hi\\n5!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此外还有标签模板等扩展，更详细的看教程</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"数组的扩展\"><a href=\"#数组的扩展\" class=\"headerlink\" title=\"数组的扩展\"></a>数组的扩展</h1><h2 id=\"新的数组函数\"><a href=\"#新的数组函数\" class=\"headerlink\" title=\"新的数组函数\"></a>新的数组函数</h2><ul>\n<li>Array.from()，用于将类数组对象转换为真正的数组，如果有第二个参数可是实现类似 map() 的效果，使用[…array]会有相同结果</li>\n<li>Array.of()，用于将一组数值转换为数组对象</li>\n<li>(new Array()).copyWithin(target, startIndex, endIndex)，用于将 startIndex 到 endIndex 的元素复制到 target 位为开头的位置上</li>\n<li>(new Array()).find(arr, callback)，用于寻找 arr 数组中符合 callback 中条件的第一个元素</li>\n<li>(new Array()).findIndex(arr, callback)，用于寻找 arr 数组中符合 callback 中条件的第一个元素的索引</li>\n<li>(new Array()).fill(char, starIndex, endIndex)，用于用 char 填充数组</li>\n<li>(new Array()).entries()，返回所有键-值(key-value)对</li>\n<li>(new Array()).keys()，返回所有键(key)的值</li>\n<li>(new Array()).values()，返回所有值(value)</li>\n</ul>\n<blockquote>\n<p>以上例子参考自阮一峰老师的《ECMAScript 6入门》一书的开源版本，地址：<a href=\"http://es6.ruanyifeng.com/#README\">http://es6.ruanyifeng.com/#README</a></p>\n</blockquote>\n"},{"title":"DAY4 Backbone.js API阅读（二）","date":"2016-03-22T04:52:00.000Z","_content":"\n## Collection\n> Backbone.js 的 C 层不同于通常 MVC 架构的 `Controller` 层，而是 `Collection` 层，Collection 层不仅负责与数据库的交互和 Model 的数据交互，同时也是 Model 的一个有序集合。当集合中的 Model 发生变化时，将会触发该集合的 `change` 事件，当使用 `fetch()` 函数时，可能会触发 `add` 或者 `remove` 事件。而一些在 Model 上触发的事件可能也会在 Collection 中触发。\n\n* extend——用于创建一个新的 Collection 集合并对其进行相应扩充和定义，如下定义：\n```JavaScript\nvar books = Backbone.Collection.extend({\n    model: Book,\n    ……\n})\n```\n* model——用于定义该集合中的 Model 类型\n* add——向 Collection 添加一个或多个 Model，同时会触发 `add` 事件\n* remove——从 Collection 移除一个或多个 Model，同时会触发 `remove` 事件\n* reset——当有大量 Model 需要更改的时候，这时候使用 reset 插入一个模型组，同时触发 `reset` 事件，但是不会触发 `add` 和 `remove` 事件\n* set——通过传入一组 Model，如果传入的 Model 在 Collection 已经存在，那么将会合并，如果不存在，那么将会添加，如果 Collection 中存在传入 Model 组中不存在的 Model，那么该 Model 将会被删除。以上将会触发 `add`，`remove`，`change` 事件\n* fetch——从服务端拉取更新数据，并使用 `reset` 到 Collection 中。\n* comparator——设置 Collection 排序的依据，例如：\n```JavaScript\nvar Chapter  = Backbone.Model;\nvar chapters = new Backbone.Collection;\n\nchapters.comparator = 'page';\n\nchapters.add(new Chapter({page: 9, title: \"The End\"}));\nchapters.add(new Chapter({page: 5, title: \"The Middle\"}));\nchapters.add(new Chapter({page: 1, title: \"The Beginning\"}));\n\nalert(chapters.pluck('title'));\n```\n* Collection 同时提供了多个 Underscore.js 的函数，例如：\n```JavaScript\nbooks.each(function(book) {\n    // doing something\n})\n```\n> `reset` 用于重置数据，即将原有数据删除，添加传入的新数据，而 `set` 则更新数据，只有当原先集合中的某个 Model 不存在于新传入的数据中时，该 Model 才会被删除，否则只是合并数据。总结就是 reset 是重置，set 是更新。\n\n## View\n>View 用来处理视图的渲染以及视图的更新，我们可以自定义一个 `render` 函数来定义当模型数据发生变化时（render 可以绑定在自身模型的 change 事件上）如何渲染视图。\n\n* 一般地，我们如下所示去扩充一个自定义 View：\n```JavaScript\nvar DocumentRow = Backbone.View.extend({\n\n  tagName: \"li\",\n\n  className: \"document-row\",\n\n  events: {\n    \"click .icon\":          \"open\",\n    \"click .button.edit\":   \"openEditDialog\",\n    \"click .button.delete\": \"destroy\"\n  },\n\n  initialize: function() {\n    this.listenTo(this.model, \"change\", this.render);\n  },\n\n  render: function() {\n    ...\n  }\n\n});\n```\n* tagName——代表 View 的标签类型，设置以后同时也会设置 View 的 `el`\n* className——设置 View 的样式类\n* events——在该视图中绑定相应的事件\n* initialize——在 View 被实例化时执行\n* render——默认无任何操作，我们可以重载该函数，定义如何渲染视图，将其绑定到 Model 的 change 事件，这样当 Model 发生变化时，可以立即调用 render 函数更新视图。\n* el——引用了该 View 的 dom 元素\n* $el——通过引用 el，对其进行封装，其可以使用 JQuery 的函数\n* setElement——将 View 从旧的引用 dom 对象切换到新的 dom 对象引用，视图的事件委托和 $el 也响应迁移\n* template——利用 Underscore 的 template 方法可以为 View 设定一个模板，有两种方法，如下所示：\n```JavaScript\n// first\nvar LibraryView = Backbone.View.extend({\n  template: _.template(...)\n});\n\n// second\n<script id=\"teamTemplate\" type=\"text/template\">\n    <%= name %>\n</script>\n\nApp.Views.Team = Backbone.View.extend({\n    className : '.team-element',\n    tagName : 'div',\n    model : new App.Models.Team\n    render : function() {\n        // Compile the template\n        var compiledTemplate = _.template($('#teamTemplate').html());\n        // Model attributes loaded into the template. Template is\n        // appended to the DOM element referred by the el attribute\n        $(this.el).html(compiledTemplate(this.model.toJSON()));\n    }\n});\n```\n>明天继续看 Router 的使用，今晚参加了网易的笔试，还是有点累。\n","source":"_posts/DAY4-Backbone-js-API阅读（二）.md","raw":"---\ntitle: DAY4 Backbone.js API阅读（二）\ndate: 2016-03-22 12:52:00\ntags: Oxygen\ncategories: 项目\n---\n\n## Collection\n> Backbone.js 的 C 层不同于通常 MVC 架构的 `Controller` 层，而是 `Collection` 层，Collection 层不仅负责与数据库的交互和 Model 的数据交互，同时也是 Model 的一个有序集合。当集合中的 Model 发生变化时，将会触发该集合的 `change` 事件，当使用 `fetch()` 函数时，可能会触发 `add` 或者 `remove` 事件。而一些在 Model 上触发的事件可能也会在 Collection 中触发。\n\n* extend——用于创建一个新的 Collection 集合并对其进行相应扩充和定义，如下定义：\n```JavaScript\nvar books = Backbone.Collection.extend({\n    model: Book,\n    ……\n})\n```\n* model——用于定义该集合中的 Model 类型\n* add——向 Collection 添加一个或多个 Model，同时会触发 `add` 事件\n* remove——从 Collection 移除一个或多个 Model，同时会触发 `remove` 事件\n* reset——当有大量 Model 需要更改的时候，这时候使用 reset 插入一个模型组，同时触发 `reset` 事件，但是不会触发 `add` 和 `remove` 事件\n* set——通过传入一组 Model，如果传入的 Model 在 Collection 已经存在，那么将会合并，如果不存在，那么将会添加，如果 Collection 中存在传入 Model 组中不存在的 Model，那么该 Model 将会被删除。以上将会触发 `add`，`remove`，`change` 事件\n* fetch——从服务端拉取更新数据，并使用 `reset` 到 Collection 中。\n* comparator——设置 Collection 排序的依据，例如：\n```JavaScript\nvar Chapter  = Backbone.Model;\nvar chapters = new Backbone.Collection;\n\nchapters.comparator = 'page';\n\nchapters.add(new Chapter({page: 9, title: \"The End\"}));\nchapters.add(new Chapter({page: 5, title: \"The Middle\"}));\nchapters.add(new Chapter({page: 1, title: \"The Beginning\"}));\n\nalert(chapters.pluck('title'));\n```\n* Collection 同时提供了多个 Underscore.js 的函数，例如：\n```JavaScript\nbooks.each(function(book) {\n    // doing something\n})\n```\n> `reset` 用于重置数据，即将原有数据删除，添加传入的新数据，而 `set` 则更新数据，只有当原先集合中的某个 Model 不存在于新传入的数据中时，该 Model 才会被删除，否则只是合并数据。总结就是 reset 是重置，set 是更新。\n\n## View\n>View 用来处理视图的渲染以及视图的更新，我们可以自定义一个 `render` 函数来定义当模型数据发生变化时（render 可以绑定在自身模型的 change 事件上）如何渲染视图。\n\n* 一般地，我们如下所示去扩充一个自定义 View：\n```JavaScript\nvar DocumentRow = Backbone.View.extend({\n\n  tagName: \"li\",\n\n  className: \"document-row\",\n\n  events: {\n    \"click .icon\":          \"open\",\n    \"click .button.edit\":   \"openEditDialog\",\n    \"click .button.delete\": \"destroy\"\n  },\n\n  initialize: function() {\n    this.listenTo(this.model, \"change\", this.render);\n  },\n\n  render: function() {\n    ...\n  }\n\n});\n```\n* tagName——代表 View 的标签类型，设置以后同时也会设置 View 的 `el`\n* className——设置 View 的样式类\n* events——在该视图中绑定相应的事件\n* initialize——在 View 被实例化时执行\n* render——默认无任何操作，我们可以重载该函数，定义如何渲染视图，将其绑定到 Model 的 change 事件，这样当 Model 发生变化时，可以立即调用 render 函数更新视图。\n* el——引用了该 View 的 dom 元素\n* $el——通过引用 el，对其进行封装，其可以使用 JQuery 的函数\n* setElement——将 View 从旧的引用 dom 对象切换到新的 dom 对象引用，视图的事件委托和 $el 也响应迁移\n* template——利用 Underscore 的 template 方法可以为 View 设定一个模板，有两种方法，如下所示：\n```JavaScript\n// first\nvar LibraryView = Backbone.View.extend({\n  template: _.template(...)\n});\n\n// second\n<script id=\"teamTemplate\" type=\"text/template\">\n    <%= name %>\n</script>\n\nApp.Views.Team = Backbone.View.extend({\n    className : '.team-element',\n    tagName : 'div',\n    model : new App.Models.Team\n    render : function() {\n        // Compile the template\n        var compiledTemplate = _.template($('#teamTemplate').html());\n        // Model attributes loaded into the template. Template is\n        // appended to the DOM element referred by the el attribute\n        $(this.el).html(compiledTemplate(this.model.toJSON()));\n    }\n});\n```\n>明天继续看 Router 的使用，今晚参加了网易的笔试，还是有点累。\n","slug":"DAY4-Backbone-js-API阅读（二）","published":1,"updated":"2016-03-22T15:58:21.900Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqggs7jn000kikvduosv4iif","content":"<h2 id=\"Collection\"><a href=\"#Collection\" class=\"headerlink\" title=\"Collection\"></a>Collection</h2><blockquote>\n<p>Backbone.js 的 C 层不同于通常 MVC 架构的 <code>Controller</code> 层，而是 <code>Collection</code> 层，Collection 层不仅负责与数据库的交互和 Model 的数据交互，同时也是 Model 的一个有序集合。当集合中的 Model 发生变化时，将会触发该集合的 <code>change</code> 事件，当使用 <code>fetch()</code> 函数时，可能会触发 <code>add</code> 或者 <code>remove</code> 事件。而一些在 Model 上触发的事件可能也会在 Collection 中触发。</p>\n</blockquote>\n<ul>\n<li><p>extend——用于创建一个新的 Collection 集合并对其进行相应扩充和定义，如下定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> books = Backbone.Collection.extend(&#123;</span><br><span class=\"line\">    model: Book,</span><br><span class=\"line\">    ……</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>model——用于定义该集合中的 Model 类型</p>\n</li>\n<li>add——向 Collection 添加一个或多个 Model，同时会触发 <code>add</code> 事件</li>\n<li>remove——从 Collection 移除一个或多个 Model，同时会触发 <code>remove</code> 事件</li>\n<li>reset——当有大量 Model 需要更改的时候，这时候使用 reset 插入一个模型组，同时触发 <code>reset</code> 事件，但是不会触发 <code>add</code> 和 <code>remove</code> 事件</li>\n<li>set——通过传入一组 Model，如果传入的 Model 在 Collection 已经存在，那么将会合并，如果不存在，那么将会添加，如果 Collection 中存在传入 Model 组中不存在的 Model，那么该 Model 将会被删除。以上将会触发 <code>add</code>，<code>remove</code>，<code>change</code> 事件</li>\n<li>fetch——从服务端拉取更新数据，并使用 <code>reset</code> 到 Collection 中。</li>\n<li><p>comparator——设置 Collection 排序的依据，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Chapter  = Backbone.Model;</span><br><span class=\"line\"><span class=\"keyword\">var</span> chapters = <span class=\"keyword\">new</span> Backbone.Collection;</span><br><span class=\"line\"></span><br><span class=\"line\">chapters.comparator = <span class=\"string\">'page'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">chapters.add(<span class=\"keyword\">new</span> Chapter(&#123;page: <span class=\"number\">9</span>, title: <span class=\"string\">\"The End\"</span>&#125;));</span><br><span class=\"line\">chapters.add(<span class=\"keyword\">new</span> Chapter(&#123;page: <span class=\"number\">5</span>, title: <span class=\"string\">\"The Middle\"</span>&#125;));</span><br><span class=\"line\">chapters.add(<span class=\"keyword\">new</span> Chapter(&#123;page: <span class=\"number\">1</span>, title: <span class=\"string\">\"The Beginning\"</span>&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">alert(chapters.pluck(<span class=\"string\">'title'</span>));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Collection 同时提供了多个 Underscore.js 的函数，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">books.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">book</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// doing something</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p><code>reset</code> 用于重置数据，即将原有数据删除，添加传入的新数据，而 <code>set</code> 则更新数据，只有当原先集合中的某个 Model 不存在于新传入的数据中时，该 Model 才会被删除，否则只是合并数据。总结就是 reset 是重置，set 是更新。</p>\n</blockquote>\n<h2 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h2><blockquote>\n<p>View 用来处理视图的渲染以及视图的更新，我们可以自定义一个 <code>render</code> 函数来定义当模型数据发生变化时（render 可以绑定在自身模型的 change 事件上）如何渲染视图。</p>\n</blockquote>\n<ul>\n<li><p>一般地，我们如下所示去扩充一个自定义 View：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> DocumentRow = Backbone.View.extend(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  tagName: <span class=\"string\">\"li\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  className: <span class=\"string\">\"document-row\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  events: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"click .icon\"</span>:          <span class=\"string\">\"open\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"click .button.edit\"</span>:   <span class=\"string\">\"openEditDialog\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"click .button.delete\"</span>: <span class=\"string\">\"destroy\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  initialize: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listenTo(<span class=\"keyword\">this</span>.model, <span class=\"string\">\"change\"</span>, <span class=\"keyword\">this</span>.render);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>tagName——代表 View 的标签类型，设置以后同时也会设置 View 的 <code>el</code></p>\n</li>\n<li>className——设置 View 的样式类</li>\n<li>events——在该视图中绑定相应的事件</li>\n<li>initialize——在 View 被实例化时执行</li>\n<li>render——默认无任何操作，我们可以重载该函数，定义如何渲染视图，将其绑定到 Model 的 change 事件，这样当 Model 发生变化时，可以立即调用 render 函数更新视图。</li>\n<li>el——引用了该 View 的 dom 元素</li>\n<li>$el——通过引用 el，对其进行封装，其可以使用 JQuery 的函数</li>\n<li>setElement——将 View 从旧的引用 dom 对象切换到新的 dom 对象引用，视图的事件委托和 $el 也响应迁移</li>\n<li>template——利用 Underscore 的 template 方法可以为 View 设定一个模板，有两种方法，如下所示：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// first</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> LibraryView = Backbone.View.extend(&#123;</span><br><span class=\"line\">  template: _.template(...)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// second</span></span><br><span class=\"line\">&lt;script id=<span class=\"string\">\"teamTemplate\"</span> type=<span class=\"string\">\"text/template\"</span>&gt;</span><br><span class=\"line\">    &lt;%= name %&gt;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">App.Views.Team = Backbone.View.extend(&#123;</span><br><span class=\"line\">    className : <span class=\"string\">'.team-element'</span>,</span><br><span class=\"line\">    tagName : <span class=\"string\">'div'</span>,</span><br><span class=\"line\">    model : <span class=\"keyword\">new</span> App.Models.Team</span><br><span class=\"line\">    render : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Compile the template</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> compiledTemplate = _.template($(<span class=\"string\">'#teamTemplate'</span>).html());</span><br><span class=\"line\">        <span class=\"comment\">// Model attributes loaded into the template. Template is</span></span><br><span class=\"line\">        <span class=\"comment\">// appended to the DOM element referred by the el attribute</span></span><br><span class=\"line\">        $(<span class=\"keyword\">this</span>.el).html(compiledTemplate(<span class=\"keyword\">this</span>.model.toJSON()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>明天继续看 Router 的使用，今晚参加了网易的笔试，还是有点累。</p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"Collection\"><a href=\"#Collection\" class=\"headerlink\" title=\"Collection\"></a>Collection</h2><blockquote>\n<p>Backbone.js 的 C 层不同于通常 MVC 架构的 <code>Controller</code> 层，而是 <code>Collection</code> 层，Collection 层不仅负责与数据库的交互和 Model 的数据交互，同时也是 Model 的一个有序集合。当集合中的 Model 发生变化时，将会触发该集合的 <code>change</code> 事件，当使用 <code>fetch()</code> 函数时，可能会触发 <code>add</code> 或者 <code>remove</code> 事件。而一些在 Model 上触发的事件可能也会在 Collection 中触发。</p>\n</blockquote>\n<ul>\n<li><p>extend——用于创建一个新的 Collection 集合并对其进行相应扩充和定义，如下定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> books = Backbone.Collection.extend(&#123;</span><br><span class=\"line\">    model: Book,</span><br><span class=\"line\">    ……</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>model——用于定义该集合中的 Model 类型</p>\n</li>\n<li>add——向 Collection 添加一个或多个 Model，同时会触发 <code>add</code> 事件</li>\n<li>remove——从 Collection 移除一个或多个 Model，同时会触发 <code>remove</code> 事件</li>\n<li>reset——当有大量 Model 需要更改的时候，这时候使用 reset 插入一个模型组，同时触发 <code>reset</code> 事件，但是不会触发 <code>add</code> 和 <code>remove</code> 事件</li>\n<li>set——通过传入一组 Model，如果传入的 Model 在 Collection 已经存在，那么将会合并，如果不存在，那么将会添加，如果 Collection 中存在传入 Model 组中不存在的 Model，那么该 Model 将会被删除。以上将会触发 <code>add</code>，<code>remove</code>，<code>change</code> 事件</li>\n<li>fetch——从服务端拉取更新数据，并使用 <code>reset</code> 到 Collection 中。</li>\n<li><p>comparator——设置 Collection 排序的依据，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Chapter  = Backbone.Model;</span><br><span class=\"line\"><span class=\"keyword\">var</span> chapters = <span class=\"keyword\">new</span> Backbone.Collection;</span><br><span class=\"line\"></span><br><span class=\"line\">chapters.comparator = <span class=\"string\">'page'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">chapters.add(<span class=\"keyword\">new</span> Chapter(&#123;page: <span class=\"number\">9</span>, title: <span class=\"string\">\"The End\"</span>&#125;));</span><br><span class=\"line\">chapters.add(<span class=\"keyword\">new</span> Chapter(&#123;page: <span class=\"number\">5</span>, title: <span class=\"string\">\"The Middle\"</span>&#125;));</span><br><span class=\"line\">chapters.add(<span class=\"keyword\">new</span> Chapter(&#123;page: <span class=\"number\">1</span>, title: <span class=\"string\">\"The Beginning\"</span>&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">alert(chapters.pluck(<span class=\"string\">'title'</span>));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Collection 同时提供了多个 Underscore.js 的函数，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">books.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">book</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// doing something</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p><code>reset</code> 用于重置数据，即将原有数据删除，添加传入的新数据，而 <code>set</code> 则更新数据，只有当原先集合中的某个 Model 不存在于新传入的数据中时，该 Model 才会被删除，否则只是合并数据。总结就是 reset 是重置，set 是更新。</p>\n</blockquote>\n<h2 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h2><blockquote>\n<p>View 用来处理视图的渲染以及视图的更新，我们可以自定义一个 <code>render</code> 函数来定义当模型数据发生变化时（render 可以绑定在自身模型的 change 事件上）如何渲染视图。</p>\n</blockquote>\n<ul>\n<li><p>一般地，我们如下所示去扩充一个自定义 View：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> DocumentRow = Backbone.View.extend(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  tagName: <span class=\"string\">\"li\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  className: <span class=\"string\">\"document-row\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  events: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"click .icon\"</span>:          <span class=\"string\">\"open\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"click .button.edit\"</span>:   <span class=\"string\">\"openEditDialog\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"click .button.delete\"</span>: <span class=\"string\">\"destroy\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  initialize: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listenTo(<span class=\"keyword\">this</span>.model, <span class=\"string\">\"change\"</span>, <span class=\"keyword\">this</span>.render);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>tagName——代表 View 的标签类型，设置以后同时也会设置 View 的 <code>el</code></p>\n</li>\n<li>className——设置 View 的样式类</li>\n<li>events——在该视图中绑定相应的事件</li>\n<li>initialize——在 View 被实例化时执行</li>\n<li>render——默认无任何操作，我们可以重载该函数，定义如何渲染视图，将其绑定到 Model 的 change 事件，这样当 Model 发生变化时，可以立即调用 render 函数更新视图。</li>\n<li>el——引用了该 View 的 dom 元素</li>\n<li>$el——通过引用 el，对其进行封装，其可以使用 JQuery 的函数</li>\n<li>setElement——将 View 从旧的引用 dom 对象切换到新的 dom 对象引用，视图的事件委托和 $el 也响应迁移</li>\n<li>template——利用 Underscore 的 template 方法可以为 View 设定一个模板，有两种方法，如下所示：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// first</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> LibraryView = Backbone.View.extend(&#123;</span><br><span class=\"line\">  template: _.template(...)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// second</span></span><br><span class=\"line\">&lt;script id=<span class=\"string\">\"teamTemplate\"</span> type=<span class=\"string\">\"text/template\"</span>&gt;</span><br><span class=\"line\">    &lt;%= name %&gt;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">App.Views.Team = Backbone.View.extend(&#123;</span><br><span class=\"line\">    className : <span class=\"string\">'.team-element'</span>,</span><br><span class=\"line\">    tagName : <span class=\"string\">'div'</span>,</span><br><span class=\"line\">    model : <span class=\"keyword\">new</span> App.Models.Team</span><br><span class=\"line\">    render : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Compile the template</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> compiledTemplate = _.template($(<span class=\"string\">'#teamTemplate'</span>).html());</span><br><span class=\"line\">        <span class=\"comment\">// Model attributes loaded into the template. Template is</span></span><br><span class=\"line\">        <span class=\"comment\">// appended to the DOM element referred by the el attribute</span></span><br><span class=\"line\">        $(<span class=\"keyword\">this</span>.el).html(compiledTemplate(<span class=\"keyword\">this</span>.model.toJSON()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>明天继续看 Router 的使用，今晚参加了网易的笔试，还是有点累。</p>\n</blockquote>\n"},{"title":"ES6 学习笔记（七）","date":"2016-04-24T07:19:08.000Z","_content":"\n# Generator\n> `Generator` 函数是ES6提供的一种异步编程解决方案，语法行为与传统函数完全不同\n\n## 声明\n\n```JavaScript\n// 这里的 * 只要在 function 和函数名之间使用就可以\nfunction* iterator() {\n    yield \"x\";\n    yield \"y\";\n    return \"z\";\n}\n\nlet iter = iterator();\n\niter.next(); // {value: \"x\", done: false}\niter.next(); // {value: \"y\", done: false}\niter.next(); // {value: \"z\", done: true}\niter.next(); // {value: undefined, done: true}\n```\n调用 Generator 函数并不会如同普通函数一样返回函数的返回值，而是返回一个迭代器对象。`yield` 用于惰性执行 Generator 函数，当调用迭代器对象的 `next()` 时，就会执行函数内的代码知道遇到一个 `yield` 声明，并且其后面的值作为 `value` 的值返回，如果程序执行完毕，那么 `done` 是 `true`，反之是 `false`\n\n## next()\n`next()` 是 Generator 函数的步骤执行的调用者，同时可以利用它来为函数内部注入值\n\n```JavaScript\nfunction* foo(x) {\n  var y = 2 * (yield (x + 1));\n  var z = yield (y / 3);\n  return (x + y + z);\n}\n\nvar a = foo(5);\na.next() // Object{value:6, done:false}\na.next() // Object{value:NaN, done:false}\na.next() // Object{value:NaN, done:true}\n\n// 一开始 x 为 5，所以 yield 惰性求值返回为 6\nvar b = foo(5);\nb.next() // { value:6, done:false }\n// 这里相当于声明上一个 yield 的返回值是 12，所以 y 等于 2*12\nb.next(12) // { value:8, done:false }\n// 这里相当于声明上一个 yield 的返回值是 13，所以 z 等于 13\nb.next(13) // { value:42, done:true }\n```\n\n## 使用 for...of\n由于 Generator 函数调用返回一个迭代器对象 ，那么他就可以被所有支持迭代器遍历的特性使用，例如 for...of\n\n```JavaScript\nfunction *foo() {\n  yield 1;\n  yield 2;\n  yield 3;\n  yield 4;\n  yield 5;\n  return 6;\n}\n\nfor (let v of foo()) {\n  console.log(v);\n}\n// 1 2 3 4 5\n// 由于当迭代器返回的 done 是 true 就停止遍历，所以 6 并不会被输出\n```\n除了 for...of，`...`  运算符和 `Array.from()` 同样支持 Generator\n\n## Generator.prototype.throw()\n> Generator函数返回的遍历器对象，都有一个throw方法，可以在函数体外抛出错误，然后在Generator函数体内捕获\n\n```JavaScript\nvar g = function* () {\n  try {\n    yield;\n  } catch (e) {\n    console.log('内部捕获', e);\n  }\n};\n\nvar i = g();\ni.next();\n\ntry {\n  // 内部捕获后不再捕获此后的错误\n  i.throw('a');\n  // 内部不捕获，传递到外部\n  i.throw('b');\n} catch (e) {\n  console.log('外部捕获', e);\n}\n// 内部捕获 a\n// 外部捕获 b\n```\n\n## Generator.prototype.return()\n> Generator函数返回的遍历器对象，还有一个return方法，可以返回给定的值，并且终结遍历Generator函数\n\n```JavaScript\nfunction* gen() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nvar g = gen();\n\ng.next()        // { value: 1, done: false }\ng.return('foo') // { value: \"foo\", done: true }\ng.next()        // { value: undefined, done: true }\n```\n\n## yield*\n`yield*` 用于在 Generator 函数内调用另一个 Generator 函数\n\n```JavaScript\nfunction* bar() {\n  yield 'x';\n  yield* foo();\n  yield 'y';\n}\n\n// 等同于\nfunction* bar() {\n  yield 'x';\n  yield 'a';\n  yield 'b';\n  yield 'y';\n}\n\n// 等同于\nfunction* bar() {\n  yield 'x';\n  for (let v of foo()) {\n    yield v;\n  }\n  yield 'y';\n}\n\nfor (let v of bar()){\n  console.log(v);\n}\n// \"x\"\n// \"a\"\n// \"b\"\n// \"y\"\n\n// 另外一个例子\nfunction* inner() {\n  yield 'hello!';\n}\n\nfunction* outer1() {\n  yield 'open';\n  yield inner();\n  yield 'close';\n}\n\nvar gen = outer1()\ngen.next().value // \"open\"\ngen.next().value // 返回一个遍历器对象\ngen.next().value // \"close\"\n\nfunction* outer2() {\n  yield 'open'\n  yield* inner()\n  yield 'close'\n}\n\nvar gen = outer2()\ngen.next().value // \"open\"\ngen.next().value // \"hello!\"\ngen.next().value // \"close\"\n```\n\n> Generator 函数的丰富超乎想象，这里写的笔记只是其冰山一角的特性，更多还是需要阅读相关书籍和资料\n> 以上实例代码大部分来自阮一峰老师的 《ECMAScript 6 入门》 一书\n> 书籍在线阅读地址: http://es6.ruanyifeng.com/#README\n","source":"_posts/ES6-学习笔记（七）.md","raw":"---\ntitle: ES6 学习笔记（七）\ndate: 2016-04-24 15:19:08\ncategories:\n    - 前端\n    - ECMAScript 6\ntags: Javascript\n---\n\n# Generator\n> `Generator` 函数是ES6提供的一种异步编程解决方案，语法行为与传统函数完全不同\n\n## 声明\n\n```JavaScript\n// 这里的 * 只要在 function 和函数名之间使用就可以\nfunction* iterator() {\n    yield \"x\";\n    yield \"y\";\n    return \"z\";\n}\n\nlet iter = iterator();\n\niter.next(); // {value: \"x\", done: false}\niter.next(); // {value: \"y\", done: false}\niter.next(); // {value: \"z\", done: true}\niter.next(); // {value: undefined, done: true}\n```\n调用 Generator 函数并不会如同普通函数一样返回函数的返回值，而是返回一个迭代器对象。`yield` 用于惰性执行 Generator 函数，当调用迭代器对象的 `next()` 时，就会执行函数内的代码知道遇到一个 `yield` 声明，并且其后面的值作为 `value` 的值返回，如果程序执行完毕，那么 `done` 是 `true`，反之是 `false`\n\n## next()\n`next()` 是 Generator 函数的步骤执行的调用者，同时可以利用它来为函数内部注入值\n\n```JavaScript\nfunction* foo(x) {\n  var y = 2 * (yield (x + 1));\n  var z = yield (y / 3);\n  return (x + y + z);\n}\n\nvar a = foo(5);\na.next() // Object{value:6, done:false}\na.next() // Object{value:NaN, done:false}\na.next() // Object{value:NaN, done:true}\n\n// 一开始 x 为 5，所以 yield 惰性求值返回为 6\nvar b = foo(5);\nb.next() // { value:6, done:false }\n// 这里相当于声明上一个 yield 的返回值是 12，所以 y 等于 2*12\nb.next(12) // { value:8, done:false }\n// 这里相当于声明上一个 yield 的返回值是 13，所以 z 等于 13\nb.next(13) // { value:42, done:true }\n```\n\n## 使用 for...of\n由于 Generator 函数调用返回一个迭代器对象 ，那么他就可以被所有支持迭代器遍历的特性使用，例如 for...of\n\n```JavaScript\nfunction *foo() {\n  yield 1;\n  yield 2;\n  yield 3;\n  yield 4;\n  yield 5;\n  return 6;\n}\n\nfor (let v of foo()) {\n  console.log(v);\n}\n// 1 2 3 4 5\n// 由于当迭代器返回的 done 是 true 就停止遍历，所以 6 并不会被输出\n```\n除了 for...of，`...`  运算符和 `Array.from()` 同样支持 Generator\n\n## Generator.prototype.throw()\n> Generator函数返回的遍历器对象，都有一个throw方法，可以在函数体外抛出错误，然后在Generator函数体内捕获\n\n```JavaScript\nvar g = function* () {\n  try {\n    yield;\n  } catch (e) {\n    console.log('内部捕获', e);\n  }\n};\n\nvar i = g();\ni.next();\n\ntry {\n  // 内部捕获后不再捕获此后的错误\n  i.throw('a');\n  // 内部不捕获，传递到外部\n  i.throw('b');\n} catch (e) {\n  console.log('外部捕获', e);\n}\n// 内部捕获 a\n// 外部捕获 b\n```\n\n## Generator.prototype.return()\n> Generator函数返回的遍历器对象，还有一个return方法，可以返回给定的值，并且终结遍历Generator函数\n\n```JavaScript\nfunction* gen() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nvar g = gen();\n\ng.next()        // { value: 1, done: false }\ng.return('foo') // { value: \"foo\", done: true }\ng.next()        // { value: undefined, done: true }\n```\n\n## yield*\n`yield*` 用于在 Generator 函数内调用另一个 Generator 函数\n\n```JavaScript\nfunction* bar() {\n  yield 'x';\n  yield* foo();\n  yield 'y';\n}\n\n// 等同于\nfunction* bar() {\n  yield 'x';\n  yield 'a';\n  yield 'b';\n  yield 'y';\n}\n\n// 等同于\nfunction* bar() {\n  yield 'x';\n  for (let v of foo()) {\n    yield v;\n  }\n  yield 'y';\n}\n\nfor (let v of bar()){\n  console.log(v);\n}\n// \"x\"\n// \"a\"\n// \"b\"\n// \"y\"\n\n// 另外一个例子\nfunction* inner() {\n  yield 'hello!';\n}\n\nfunction* outer1() {\n  yield 'open';\n  yield inner();\n  yield 'close';\n}\n\nvar gen = outer1()\ngen.next().value // \"open\"\ngen.next().value // 返回一个遍历器对象\ngen.next().value // \"close\"\n\nfunction* outer2() {\n  yield 'open'\n  yield* inner()\n  yield 'close'\n}\n\nvar gen = outer2()\ngen.next().value // \"open\"\ngen.next().value // \"hello!\"\ngen.next().value // \"close\"\n```\n\n> Generator 函数的丰富超乎想象，这里写的笔记只是其冰山一角的特性，更多还是需要阅读相关书籍和资料\n> 以上实例代码大部分来自阮一峰老师的 《ECMAScript 6 入门》 一书\n> 书籍在线阅读地址: http://es6.ruanyifeng.com/#README\n","slug":"ES6-学习笔记（七）","published":1,"updated":"2016-04-25T07:05:51.789Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqggs7k2000nikvdax994bvq","content":"<h1 id=\"Generator\"><a href=\"#Generator\" class=\"headerlink\" title=\"Generator\"></a>Generator</h1><blockquote>\n<p><code>Generator</code> 函数是ES6提供的一种异步编程解决方案，语法行为与传统函数完全不同</p>\n</blockquote>\n<h2 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里的 * 只要在 function 和函数名之间使用就可以</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">iterator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">\"x\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">\"y\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"z\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iter = iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">iter.next(); <span class=\"comment\">// &#123;value: \"x\", done: false&#125;</span></span><br><span class=\"line\">iter.next(); <span class=\"comment\">// &#123;value: \"y\", done: false&#125;</span></span><br><span class=\"line\">iter.next(); <span class=\"comment\">// &#123;value: \"z\", done: true&#125;</span></span><br><span class=\"line\">iter.next(); <span class=\"comment\">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<p>调用 Generator 函数并不会如同普通函数一样返回函数的返回值，而是返回一个迭代器对象。<code>yield</code> 用于惰性执行 Generator 函数，当调用迭代器对象的 <code>next()</code> 时，就会执行函数内的代码知道遇到一个 <code>yield</code> 声明，并且其后面的值作为 <code>value</code> 的值返回，如果程序执行完毕，那么 <code>done</code> 是 <code>true</code>，反之是 <code>false</code></p>\n<h2 id=\"next\"><a href=\"#next\" class=\"headerlink\" title=\"next()\"></a>next()</h2><p><code>next()</code> 是 Generator 函数的步骤执行的调用者，同时可以利用它来为函数内部注入值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> y = <span class=\"number\">2</span> * (<span class=\"keyword\">yield</span> (x + <span class=\"number\">1</span>));</span><br><span class=\"line\">  <span class=\"keyword\">var</span> z = <span class=\"keyword\">yield</span> (y / <span class=\"number\">3</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (x + y + z);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = foo(<span class=\"number\">5</span>);</span><br><span class=\"line\">a.next() <span class=\"comment\">// Object&#123;value:6, done:false&#125;</span></span><br><span class=\"line\">a.next() <span class=\"comment\">// Object&#123;value:NaN, done:false&#125;</span></span><br><span class=\"line\">a.next() <span class=\"comment\">// Object&#123;value:NaN, done:true&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一开始 x 为 5，所以 yield 惰性求值返回为 6</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = foo(<span class=\"number\">5</span>);</span><br><span class=\"line\">b.next() <span class=\"comment\">// &#123; value:6, done:false &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 这里相当于声明上一个 yield 的返回值是 12，所以 y 等于 2*12</span></span><br><span class=\"line\">b.next(<span class=\"number\">12</span>) <span class=\"comment\">// &#123; value:8, done:false &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 这里相当于声明上一个 yield 的返回值是 13，所以 z 等于 13</span></span><br><span class=\"line\">b.next(<span class=\"number\">13</span>) <span class=\"comment\">// &#123; value:42, done:true &#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用-for…of\"><a href=\"#使用-for…of\" class=\"headerlink\" title=\"使用 for…of\"></a>使用 for…of</h2><p>由于 Generator 函数调用返回一个迭代器对象 ，那么他就可以被所有支持迭代器遍历的特性使用，例如 for…of</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">6</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> foo()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3 4 5</span></span><br><span class=\"line\"><span class=\"comment\">// 由于当迭代器返回的 done 是 true 就停止遍历，所以 6 并不会被输出</span></span><br></pre></td></tr></table></figure>\n<p>除了 for…of，<code>...</code>  运算符和 <code>Array.from()</code> 同样支持 Generator</p>\n<h2 id=\"Generator-prototype-throw\"><a href=\"#Generator-prototype-throw\" class=\"headerlink\" title=\"Generator.prototype.throw()\"></a>Generator.prototype.throw()</h2><blockquote>\n<p>Generator函数返回的遍历器对象，都有一个throw方法，可以在函数体外抛出错误，然后在Generator函数体内捕获</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'内部捕获'</span>, e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = g();</span><br><span class=\"line\">i.next();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 内部捕获后不再捕获此后的错误</span></span><br><span class=\"line\">  i.throw(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 内部不捕获，传递到外部</span></span><br><span class=\"line\">  i.throw(<span class=\"string\">'b'</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'外部捕获'</span>, e);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 内部捕获 a</span></span><br><span class=\"line\"><span class=\"comment\">// 外部捕获 b</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Generator-prototype-return\"><a href=\"#Generator-prototype-return\" class=\"headerlink\" title=\"Generator.prototype.return()\"></a>Generator.prototype.return()</h2><blockquote>\n<p>Generator函数返回的遍历器对象，还有一个return方法，可以返回给定的值，并且终结遍历Generator函数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = gen();</span><br><span class=\"line\"></span><br><span class=\"line\">g.next()        <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\">g.return(<span class=\"string\">'foo'</span>) <span class=\"comment\">// &#123; value: \"foo\", done: true &#125;</span></span><br><span class=\"line\">g.next()        <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"yield\"><a href=\"#yield\" class=\"headerlink\" title=\"yield*\"></a>yield*</h2><p><code>yield*</code> 用于在 Generator 函数内调用另一个 Generator 函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'x'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* foo();</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'y'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'x'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'a'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'b'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'y'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'x'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> foo()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> v;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'y'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> bar())&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// \"x\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"a\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"b\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"y\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 另外一个例子</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">inner</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'hello!'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">outer1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'open'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> inner();</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'close'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gen = outer1()</span><br><span class=\"line\">gen.next().value <span class=\"comment\">// \"open\"</span></span><br><span class=\"line\">gen.next().value <span class=\"comment\">// 返回一个遍历器对象</span></span><br><span class=\"line\">gen.next().value <span class=\"comment\">// \"close\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">outer2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'open'</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* inner()</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'close'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gen = outer2()</span><br><span class=\"line\">gen.next().value <span class=\"comment\">// \"open\"</span></span><br><span class=\"line\">gen.next().value <span class=\"comment\">// \"hello!\"</span></span><br><span class=\"line\">gen.next().value <span class=\"comment\">// \"close\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Generator 函数的丰富超乎想象，这里写的笔记只是其冰山一角的特性，更多还是需要阅读相关书籍和资料<br>以上实例代码大部分来自阮一峰老师的 《ECMAScript 6 入门》 一书<br>书籍在线阅读地址: <a href=\"http://es6.ruanyifeng.com/#README\" target=\"_blank\" rel=\"external\">http://es6.ruanyifeng.com/#README</a></p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"Generator\"><a href=\"#Generator\" class=\"headerlink\" title=\"Generator\"></a>Generator</h1><blockquote>\n<p><code>Generator</code> 函数是ES6提供的一种异步编程解决方案，语法行为与传统函数完全不同</p>\n</blockquote>\n<h2 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里的 * 只要在 function 和函数名之间使用就可以</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">iterator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">\"x\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">\"y\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"z\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iter = iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">iter.next(); <span class=\"comment\">// &#123;value: \"x\", done: false&#125;</span></span><br><span class=\"line\">iter.next(); <span class=\"comment\">// &#123;value: \"y\", done: false&#125;</span></span><br><span class=\"line\">iter.next(); <span class=\"comment\">// &#123;value: \"z\", done: true&#125;</span></span><br><span class=\"line\">iter.next(); <span class=\"comment\">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<p>调用 Generator 函数并不会如同普通函数一样返回函数的返回值，而是返回一个迭代器对象。<code>yield</code> 用于惰性执行 Generator 函数，当调用迭代器对象的 <code>next()</code> 时，就会执行函数内的代码知道遇到一个 <code>yield</code> 声明，并且其后面的值作为 <code>value</code> 的值返回，如果程序执行完毕，那么 <code>done</code> 是 <code>true</code>，反之是 <code>false</code></p>\n<h2 id=\"next\"><a href=\"#next\" class=\"headerlink\" title=\"next()\"></a>next()</h2><p><code>next()</code> 是 Generator 函数的步骤执行的调用者，同时可以利用它来为函数内部注入值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> y = <span class=\"number\">2</span> * (<span class=\"keyword\">yield</span> (x + <span class=\"number\">1</span>));</span><br><span class=\"line\">  <span class=\"keyword\">var</span> z = <span class=\"keyword\">yield</span> (y / <span class=\"number\">3</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (x + y + z);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = foo(<span class=\"number\">5</span>);</span><br><span class=\"line\">a.next() <span class=\"comment\">// Object&#123;value:6, done:false&#125;</span></span><br><span class=\"line\">a.next() <span class=\"comment\">// Object&#123;value:NaN, done:false&#125;</span></span><br><span class=\"line\">a.next() <span class=\"comment\">// Object&#123;value:NaN, done:true&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一开始 x 为 5，所以 yield 惰性求值返回为 6</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = foo(<span class=\"number\">5</span>);</span><br><span class=\"line\">b.next() <span class=\"comment\">// &#123; value:6, done:false &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 这里相当于声明上一个 yield 的返回值是 12，所以 y 等于 2*12</span></span><br><span class=\"line\">b.next(<span class=\"number\">12</span>) <span class=\"comment\">// &#123; value:8, done:false &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 这里相当于声明上一个 yield 的返回值是 13，所以 z 等于 13</span></span><br><span class=\"line\">b.next(<span class=\"number\">13</span>) <span class=\"comment\">// &#123; value:42, done:true &#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用-for…of\"><a href=\"#使用-for…of\" class=\"headerlink\" title=\"使用 for…of\"></a>使用 for…of</h2><p>由于 Generator 函数调用返回一个迭代器对象 ，那么他就可以被所有支持迭代器遍历的特性使用，例如 for…of</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">6</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> foo()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3 4 5</span></span><br><span class=\"line\"><span class=\"comment\">// 由于当迭代器返回的 done 是 true 就停止遍历，所以 6 并不会被输出</span></span><br></pre></td></tr></table></figure>\n<p>除了 for…of，<code>...</code>  运算符和 <code>Array.from()</code> 同样支持 Generator</p>\n<h2 id=\"Generator-prototype-throw\"><a href=\"#Generator-prototype-throw\" class=\"headerlink\" title=\"Generator.prototype.throw()\"></a>Generator.prototype.throw()</h2><blockquote>\n<p>Generator函数返回的遍历器对象，都有一个throw方法，可以在函数体外抛出错误，然后在Generator函数体内捕获</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'内部捕获'</span>, e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = g();</span><br><span class=\"line\">i.next();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 内部捕获后不再捕获此后的错误</span></span><br><span class=\"line\">  i.throw(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 内部不捕获，传递到外部</span></span><br><span class=\"line\">  i.throw(<span class=\"string\">'b'</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'外部捕获'</span>, e);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 内部捕获 a</span></span><br><span class=\"line\"><span class=\"comment\">// 外部捕获 b</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Generator-prototype-return\"><a href=\"#Generator-prototype-return\" class=\"headerlink\" title=\"Generator.prototype.return()\"></a>Generator.prototype.return()</h2><blockquote>\n<p>Generator函数返回的遍历器对象，还有一个return方法，可以返回给定的值，并且终结遍历Generator函数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = gen();</span><br><span class=\"line\"></span><br><span class=\"line\">g.next()        <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\">g.return(<span class=\"string\">'foo'</span>) <span class=\"comment\">// &#123; value: \"foo\", done: true &#125;</span></span><br><span class=\"line\">g.next()        <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"yield\"><a href=\"#yield\" class=\"headerlink\" title=\"yield*\"></a>yield*</h2><p><code>yield*</code> 用于在 Generator 函数内调用另一个 Generator 函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'x'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* foo();</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'y'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'x'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'a'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'b'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'y'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'x'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> foo()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> v;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'y'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> bar())&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// \"x\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"a\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"b\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"y\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 另外一个例子</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">inner</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'hello!'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">outer1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'open'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> inner();</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'close'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gen = outer1()</span><br><span class=\"line\">gen.next().value <span class=\"comment\">// \"open\"</span></span><br><span class=\"line\">gen.next().value <span class=\"comment\">// 返回一个遍历器对象</span></span><br><span class=\"line\">gen.next().value <span class=\"comment\">// \"close\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">outer2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'open'</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* inner()</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'close'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gen = outer2()</span><br><span class=\"line\">gen.next().value <span class=\"comment\">// \"open\"</span></span><br><span class=\"line\">gen.next().value <span class=\"comment\">// \"hello!\"</span></span><br><span class=\"line\">gen.next().value <span class=\"comment\">// \"close\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Generator 函数的丰富超乎想象，这里写的笔记只是其冰山一角的特性，更多还是需要阅读相关书籍和资料<br>以上实例代码大部分来自阮一峰老师的 《ECMAScript 6 入门》 一书<br>书籍在线阅读地址: <a href=\"http://es6.ruanyifeng.com/#README\">http://es6.ruanyifeng.com/#README</a></p>\n</blockquote>\n"},{"title":"ES6 学习笔记（二）","date":"2016-04-16T14:55:15.000Z","_content":"\n# 函数的扩展\n\n## 扩展符号...\n> ES6 新增了符号 `...`，该符号类似于剩余函数的逆运算，能将一个数组变为一组参数传入函数中，只要实现了 `Iterator` 接口的对象，都可以使用该符号转换数组\n\n```JavaScript\nfunction push(array, ...items) {\n  array.push(...items);\n}\n\nfunction add(x, y) {\n  return x + y;\n}\n\nvar numbers = [4, 38];\nadd(...numbers) // 42\n\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\narr1.push(...arr2);\n\nvar arr1 = ['a', 'b'];\nvar arr2 = ['c'];\nvar arr3 = ['d', 'e'];\n\n// ES5的合并数组\narr1.concat(arr2, arr3);\n// [ 'a', 'b', 'c', 'd', 'e' ]\n\n// ES6的合并数组\n[...arr1, ...arr2, ...arr3]\n// [ 'a', 'b', 'c', 'd', 'e' ]\n```\n\n## 箭头函数\n> 箭头函数能很方便地创建匿名函数，特别是在 JavaScript 这种回调大量应用的语言中，箭头函数能让语法看起来更自然，使用起来也更便捷\n\n箭头函数需要注意一下几个点：\n* `this` 指向创建函数时的对象，而非执行时的对象\n* 无法将其作为构造函数，即无法 `new`，否则会报错\n* 无法使用 `arguments`，不过可以使用剩余函数 `rest` 来实现相同效果\n* 无法使用 `yield` 命令，即无法作为 `Generator` 函数\n\n```JavaScript\nvar result = values.sort((a, b) => a - b);\n\nvar f = () => 5;\n// 等同于\nvar f = function (){ return 5 };\n\nvar sum = (num1, num2) => num1 + num2;\n// 等同于\nvar sum = function(num1, num2) {\n  return num1 + num2;\n};\n\nvar sum = (num1, num2) => { return num1 + num2; };\n\nvar getTempItem = id => ({ id: id, name: \"Temp\" });\n\n// 嵌套函数\nfunction insert(value) {\n  return {into: function (array) {\n    return {after: function (afterValue) {\n      array.splice(array.indexOf(afterValue) + 1, 0, value);\n      return array;\n    }};\n  }};\n}\n\ninsert(2).into([1, 3]).after(1); //[1, 2, 3]\n\n// 使用箭头函数改写\nlet insert = (value) => ({into: (array) => ({after: (afterValue) => {\n  array.splice(array.indexOf(afterValue) + 1, 0, value);\n  return array;\n}})});\n\ninsert(2).into([1, 3]).after(1); //[1, 2, 3]\n```\nES6 对函数还有一个 `Tail call optimization` （即“尾调用优化”），等后面再重新写一篇文章分析，尾调用优化将会大大避免递归的栈溢出\n\n# 对象的扩展\n\n## 简写\n> ES6 中对象中属性的声明有了简便的做法，请看代码\n\n```JavaScript\nvar birth = '2000/01/01';\n\nvar Person = {\n\n  name: '张三',\n\n  //等同于birth: birth\n  birth,\n\n  // 等同于hello: function ()...\n  hello() { console.log('我的名字是', this.name); }\n\n};\n\n// 在 CommonJS 中使用 exports 暴露接口时很方便\nmodule.exports = { getItem, setItem, clear };\n// 等同于\nmodule.exports = {\n  getItem: getItem,\n  setItem: setItem,\n  clear: clear\n};\n```\n\n## 判断对象相等\n> ES6 使用 `Object.is()` 来判断两个对象是否相等，相对于使用 `==` 和 `===`，有以下两个区别\n\n```JavaScript\n+0 === -0 //true\nNaN === NaN // false\n\nObject.is(+0, -0) // false\nObject.is(NaN, NaN) // true\n```\n\n## 对象复制\n> ES6 使用 `Object.assign()` 对一个对象进行复制，但是执行的是浅复制，如果被复制的对象中有属性是一个对象，那么该对象的属性将会被共享\n\n```JavaScript\nvar target = { a: 1, b: 1 };\n\nvar source1 = { b: 2, c: 2 };\nvar source2 = { c: 3 };\n\nObject.assign(target, source1, source2);\ntarget // {a:1, b:2, c:3}\n\nObject.assign(target) === target // true\n\nObject.assign(undefined) // 报错\nObject.assign(null) // 报错\n\nvar v1 = 'abc';\nvar v2 = true;\nvar v3 = 10;\n\n// 字符串是可枚举的，所以可以被复制，不可枚举属性将被忽略\nvar obj = Object.assign({}, v1, v2, v3);\nconsole.log(obj); // { \"0\": \"a\", \"1\": \"b\", \"2\": \"c\" }\n\nvar obj = Object.assign(true); // true会被转换为对象返回\n\nObject.assign([1, 2, 3], [4, 5]); // [4, 5, 3]\n\n```\n\n> 以上实例代码大部分来自阮一峰老师的 《ECMAScript 6 入门》 一书\n> 书籍在线阅读地址: http://es6.ruanyifeng.com/#README\n","source":"_posts/ES6-学习笔记（二）.md","raw":"---\ntitle: ES6 学习笔记（二）\ndate: 2016-04-16 22:55:15\ncategories:\n    - 前端\n    - ECMAScript 6\ntags: Javascript\n---\n\n# 函数的扩展\n\n## 扩展符号...\n> ES6 新增了符号 `...`，该符号类似于剩余函数的逆运算，能将一个数组变为一组参数传入函数中，只要实现了 `Iterator` 接口的对象，都可以使用该符号转换数组\n\n```JavaScript\nfunction push(array, ...items) {\n  array.push(...items);\n}\n\nfunction add(x, y) {\n  return x + y;\n}\n\nvar numbers = [4, 38];\nadd(...numbers) // 42\n\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\narr1.push(...arr2);\n\nvar arr1 = ['a', 'b'];\nvar arr2 = ['c'];\nvar arr3 = ['d', 'e'];\n\n// ES5的合并数组\narr1.concat(arr2, arr3);\n// [ 'a', 'b', 'c', 'd', 'e' ]\n\n// ES6的合并数组\n[...arr1, ...arr2, ...arr3]\n// [ 'a', 'b', 'c', 'd', 'e' ]\n```\n\n## 箭头函数\n> 箭头函数能很方便地创建匿名函数，特别是在 JavaScript 这种回调大量应用的语言中，箭头函数能让语法看起来更自然，使用起来也更便捷\n\n箭头函数需要注意一下几个点：\n* `this` 指向创建函数时的对象，而非执行时的对象\n* 无法将其作为构造函数，即无法 `new`，否则会报错\n* 无法使用 `arguments`，不过可以使用剩余函数 `rest` 来实现相同效果\n* 无法使用 `yield` 命令，即无法作为 `Generator` 函数\n\n```JavaScript\nvar result = values.sort((a, b) => a - b);\n\nvar f = () => 5;\n// 等同于\nvar f = function (){ return 5 };\n\nvar sum = (num1, num2) => num1 + num2;\n// 等同于\nvar sum = function(num1, num2) {\n  return num1 + num2;\n};\n\nvar sum = (num1, num2) => { return num1 + num2; };\n\nvar getTempItem = id => ({ id: id, name: \"Temp\" });\n\n// 嵌套函数\nfunction insert(value) {\n  return {into: function (array) {\n    return {after: function (afterValue) {\n      array.splice(array.indexOf(afterValue) + 1, 0, value);\n      return array;\n    }};\n  }};\n}\n\ninsert(2).into([1, 3]).after(1); //[1, 2, 3]\n\n// 使用箭头函数改写\nlet insert = (value) => ({into: (array) => ({after: (afterValue) => {\n  array.splice(array.indexOf(afterValue) + 1, 0, value);\n  return array;\n}})});\n\ninsert(2).into([1, 3]).after(1); //[1, 2, 3]\n```\nES6 对函数还有一个 `Tail call optimization` （即“尾调用优化”），等后面再重新写一篇文章分析，尾调用优化将会大大避免递归的栈溢出\n\n# 对象的扩展\n\n## 简写\n> ES6 中对象中属性的声明有了简便的做法，请看代码\n\n```JavaScript\nvar birth = '2000/01/01';\n\nvar Person = {\n\n  name: '张三',\n\n  //等同于birth: birth\n  birth,\n\n  // 等同于hello: function ()...\n  hello() { console.log('我的名字是', this.name); }\n\n};\n\n// 在 CommonJS 中使用 exports 暴露接口时很方便\nmodule.exports = { getItem, setItem, clear };\n// 等同于\nmodule.exports = {\n  getItem: getItem,\n  setItem: setItem,\n  clear: clear\n};\n```\n\n## 判断对象相等\n> ES6 使用 `Object.is()` 来判断两个对象是否相等，相对于使用 `==` 和 `===`，有以下两个区别\n\n```JavaScript\n+0 === -0 //true\nNaN === NaN // false\n\nObject.is(+0, -0) // false\nObject.is(NaN, NaN) // true\n```\n\n## 对象复制\n> ES6 使用 `Object.assign()` 对一个对象进行复制，但是执行的是浅复制，如果被复制的对象中有属性是一个对象，那么该对象的属性将会被共享\n\n```JavaScript\nvar target = { a: 1, b: 1 };\n\nvar source1 = { b: 2, c: 2 };\nvar source2 = { c: 3 };\n\nObject.assign(target, source1, source2);\ntarget // {a:1, b:2, c:3}\n\nObject.assign(target) === target // true\n\nObject.assign(undefined) // 报错\nObject.assign(null) // 报错\n\nvar v1 = 'abc';\nvar v2 = true;\nvar v3 = 10;\n\n// 字符串是可枚举的，所以可以被复制，不可枚举属性将被忽略\nvar obj = Object.assign({}, v1, v2, v3);\nconsole.log(obj); // { \"0\": \"a\", \"1\": \"b\", \"2\": \"c\" }\n\nvar obj = Object.assign(true); // true会被转换为对象返回\n\nObject.assign([1, 2, 3], [4, 5]); // [4, 5, 3]\n\n```\n\n> 以上实例代码大部分来自阮一峰老师的 《ECMAScript 6 入门》 一书\n> 书籍在线阅读地址: http://es6.ruanyifeng.com/#README\n","slug":"ES6-学习笔记（二）","published":1,"updated":"2016-04-19T07:00:08.150Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqggs7k2000qikvdv91rrf3l","content":"<h1 id=\"函数的扩展\"><a href=\"#函数的扩展\" class=\"headerlink\" title=\"函数的扩展\"></a>函数的扩展</h1><h2 id=\"扩展符号…\"><a href=\"#扩展符号…\" class=\"headerlink\" title=\"扩展符号…\"></a>扩展符号…</h2><blockquote>\n<p>ES6 新增了符号 <code>...</code>，该符号类似于剩余函数的逆运算，能将一个数组变为一组参数传入函数中，只要实现了 <code>Iterator</code> 接口的对象，都可以使用该符号转换数组</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">push</span>(<span class=\"params\">array, ...items</span>) </span>&#123;</span><br><span class=\"line\">  array.push(...items);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">4</span>, <span class=\"number\">38</span>];</span><br><span class=\"line\">add(...numbers) <span class=\"comment\">// 42</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">arr1.push(...arr2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"string\">'c'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = [<span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES5的合并数组</span></span><br><span class=\"line\">arr1.concat(arr2, arr3);</span><br><span class=\"line\"><span class=\"comment\">// [ 'a', 'b', 'c', 'd', 'e' ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6的合并数组</span></span><br><span class=\"line\">[...arr1, ...arr2, ...arr3]</span><br><span class=\"line\"><span class=\"comment\">// [ 'a', 'b', 'c', 'd', 'e' ]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><blockquote>\n<p>箭头函数能很方便地创建匿名函数，特别是在 JavaScript 这种回调大量应用的语言中，箭头函数能让语法看起来更自然，使用起来也更便捷</p>\n</blockquote>\n<p>箭头函数需要注意一下几个点：</p>\n<ul>\n<li><code>this</code> 指向创建函数时的对象，而非执行时的对象</li>\n<li>无法将其作为构造函数，即无法 <code>new</code>，否则会报错</li>\n<li>无法使用 <code>arguments</code>，不过可以使用剩余函数 <code>rest</code> 来实现相同效果</li>\n<li>无法使用 <code>yield</code> 命令，即无法作为 <code>Generator</code> 函数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = values.sort((a, b) =&gt; a - b);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = () =&gt; <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">5</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = (num1, num2) =&gt; num1 + num2;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = (num1, num2) =&gt; &#123; <span class=\"keyword\">return</span> num1 + num2; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> getTempItem = id =&gt; (&#123; id: id, name: <span class=\"string\">\"Temp\"</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 嵌套函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;into: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;after: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">afterValue</span>) </span>&#123;</span><br><span class=\"line\">      array.splice(array.indexOf(afterValue) + <span class=\"number\">1</span>, <span class=\"number\">0</span>, value);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">    &#125;&#125;;</span><br><span class=\"line\">  &#125;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">insert(<span class=\"number\">2</span>).into([<span class=\"number\">1</span>, <span class=\"number\">3</span>]).after(<span class=\"number\">1</span>); <span class=\"comment\">//[1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用箭头函数改写</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> insert = (value) =&gt; (&#123;into: (array) =&gt; (&#123;after: (afterValue) =&gt; &#123;</span><br><span class=\"line\">  array.splice(array.indexOf(afterValue) + <span class=\"number\">1</span>, <span class=\"number\">0</span>, value);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">&#125;&#125;)&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">insert(<span class=\"number\">2</span>).into([<span class=\"number\">1</span>, <span class=\"number\">3</span>]).after(<span class=\"number\">1</span>); <span class=\"comment\">//[1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<p>ES6 对函数还有一个 <code>Tail call optimization</code> （即“尾调用优化”），等后面再重新写一篇文章分析，尾调用优化将会大大避免递归的栈溢出</p>\n<h1 id=\"对象的扩展\"><a href=\"#对象的扩展\" class=\"headerlink\" title=\"对象的扩展\"></a>对象的扩展</h1><h2 id=\"简写\"><a href=\"#简写\" class=\"headerlink\" title=\"简写\"></a>简写</h2><blockquote>\n<p>ES6 中对象中属性的声明有了简便的做法，请看代码</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> birth = <span class=\"string\">'2000/01/01'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Person = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  name: <span class=\"string\">'张三'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//等同于birth: birth</span></span><br><span class=\"line\">  birth,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 等同于hello: function ()...</span></span><br><span class=\"line\">  hello() &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'我的名字是'</span>, <span class=\"keyword\">this</span>.name); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在 CommonJS 中使用 exports 暴露接口时很方便</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123; getItem, setItem, clear &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  getItem: getItem,</span><br><span class=\"line\">  setItem: setItem,</span><br><span class=\"line\">  clear: clear</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"判断对象相等\"><a href=\"#判断对象相等\" class=\"headerlink\" title=\"判断对象相等\"></a>判断对象相等</h2><blockquote>\n<p>ES6 使用 <code>Object.is()</code> 来判断两个对象是否相等，相对于使用 <code>==</code> 和 <code>===</code>，有以下两个区别</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"number\">0</span> === <span class=\"number\">-0</span> <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.is(+<span class=\"number\">0</span>, <span class=\"number\">-0</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, <span class=\"literal\">NaN</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"对象复制\"><a href=\"#对象复制\" class=\"headerlink\" title=\"对象复制\"></a>对象复制</h2><blockquote>\n<p>ES6 使用 <code>Object.assign()</code> 对一个对象进行复制，但是执行的是浅复制，如果被复制的对象中有属性是一个对象，那么该对象的属性将会被共享</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> target = &#123; a: <span class=\"number\">1</span>, b: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> source1 = &#123; b: <span class=\"number\">2</span>, c: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> source2 = &#123; c: <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(target, source1, source2);</span><br><span class=\"line\">target <span class=\"comment\">// &#123;a:1, b:2, c:3&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(target) === target <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(<span class=\"literal\">undefined</span>) <span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(<span class=\"literal\">null</span>) <span class=\"comment\">// 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> v1 = <span class=\"string\">'abc'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> v2 = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> v3 = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 字符串是可枚举的，所以可以被复制，不可枚举属性将被忽略</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, v1, v2, v3);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123; \"0\": \"a\", \"1\": \"b\", \"2\": \"c\" &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.assign(<span class=\"literal\">true</span>); <span class=\"comment\">// true会被转换为对象返回</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>]); <span class=\"comment\">// [4, 5, 3]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以上实例代码大部分来自阮一峰老师的 《ECMAScript 6 入门》 一书<br>书籍在线阅读地址: <a href=\"http://es6.ruanyifeng.com/#README\" target=\"_blank\" rel=\"external\">http://es6.ruanyifeng.com/#README</a></p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"函数的扩展\"><a href=\"#函数的扩展\" class=\"headerlink\" title=\"函数的扩展\"></a>函数的扩展</h1><h2 id=\"扩展符号…\"><a href=\"#扩展符号…\" class=\"headerlink\" title=\"扩展符号…\"></a>扩展符号…</h2><blockquote>\n<p>ES6 新增了符号 <code>...</code>，该符号类似于剩余函数的逆运算，能将一个数组变为一组参数传入函数中，只要实现了 <code>Iterator</code> 接口的对象，都可以使用该符号转换数组</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">push</span>(<span class=\"params\">array, ...items</span>) </span>&#123;</span><br><span class=\"line\">  array.push(...items);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">4</span>, <span class=\"number\">38</span>];</span><br><span class=\"line\">add(...numbers) <span class=\"comment\">// 42</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">arr1.push(...arr2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"string\">'c'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = [<span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES5的合并数组</span></span><br><span class=\"line\">arr1.concat(arr2, arr3);</span><br><span class=\"line\"><span class=\"comment\">// [ 'a', 'b', 'c', 'd', 'e' ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6的合并数组</span></span><br><span class=\"line\">[...arr1, ...arr2, ...arr3]</span><br><span class=\"line\"><span class=\"comment\">// [ 'a', 'b', 'c', 'd', 'e' ]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><blockquote>\n<p>箭头函数能很方便地创建匿名函数，特别是在 JavaScript 这种回调大量应用的语言中，箭头函数能让语法看起来更自然，使用起来也更便捷</p>\n</blockquote>\n<p>箭头函数需要注意一下几个点：</p>\n<ul>\n<li><code>this</code> 指向创建函数时的对象，而非执行时的对象</li>\n<li>无法将其作为构造函数，即无法 <code>new</code>，否则会报错</li>\n<li>无法使用 <code>arguments</code>，不过可以使用剩余函数 <code>rest</code> 来实现相同效果</li>\n<li>无法使用 <code>yield</code> 命令，即无法作为 <code>Generator</code> 函数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = values.sort((a, b) =&gt; a - b);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = () =&gt; <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">5</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = (num1, num2) =&gt; num1 + num2;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = (num1, num2) =&gt; &#123; <span class=\"keyword\">return</span> num1 + num2; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> getTempItem = id =&gt; (&#123; id: id, name: <span class=\"string\">\"Temp\"</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 嵌套函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;into: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;after: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">afterValue</span>) </span>&#123;</span><br><span class=\"line\">      array.splice(array.indexOf(afterValue) + <span class=\"number\">1</span>, <span class=\"number\">0</span>, value);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">    &#125;&#125;;</span><br><span class=\"line\">  &#125;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">insert(<span class=\"number\">2</span>).into([<span class=\"number\">1</span>, <span class=\"number\">3</span>]).after(<span class=\"number\">1</span>); <span class=\"comment\">//[1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用箭头函数改写</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> insert = (value) =&gt; (&#123;into: (array) =&gt; (&#123;after: (afterValue) =&gt; &#123;</span><br><span class=\"line\">  array.splice(array.indexOf(afterValue) + <span class=\"number\">1</span>, <span class=\"number\">0</span>, value);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">&#125;&#125;)&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">insert(<span class=\"number\">2</span>).into([<span class=\"number\">1</span>, <span class=\"number\">3</span>]).after(<span class=\"number\">1</span>); <span class=\"comment\">//[1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<p>ES6 对函数还有一个 <code>Tail call optimization</code> （即“尾调用优化”），等后面再重新写一篇文章分析，尾调用优化将会大大避免递归的栈溢出</p>\n<h1 id=\"对象的扩展\"><a href=\"#对象的扩展\" class=\"headerlink\" title=\"对象的扩展\"></a>对象的扩展</h1><h2 id=\"简写\"><a href=\"#简写\" class=\"headerlink\" title=\"简写\"></a>简写</h2><blockquote>\n<p>ES6 中对象中属性的声明有了简便的做法，请看代码</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> birth = <span class=\"string\">'2000/01/01'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Person = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  name: <span class=\"string\">'张三'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//等同于birth: birth</span></span><br><span class=\"line\">  birth,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 等同于hello: function ()...</span></span><br><span class=\"line\">  hello() &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'我的名字是'</span>, <span class=\"keyword\">this</span>.name); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在 CommonJS 中使用 exports 暴露接口时很方便</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123; getItem, setItem, clear &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  getItem: getItem,</span><br><span class=\"line\">  setItem: setItem,</span><br><span class=\"line\">  clear: clear</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"判断对象相等\"><a href=\"#判断对象相等\" class=\"headerlink\" title=\"判断对象相等\"></a>判断对象相等</h2><blockquote>\n<p>ES6 使用 <code>Object.is()</code> 来判断两个对象是否相等，相对于使用 <code>==</code> 和 <code>===</code>，有以下两个区别</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"number\">0</span> === <span class=\"number\">-0</span> <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.is(+<span class=\"number\">0</span>, <span class=\"number\">-0</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, <span class=\"literal\">NaN</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"对象复制\"><a href=\"#对象复制\" class=\"headerlink\" title=\"对象复制\"></a>对象复制</h2><blockquote>\n<p>ES6 使用 <code>Object.assign()</code> 对一个对象进行复制，但是执行的是浅复制，如果被复制的对象中有属性是一个对象，那么该对象的属性将会被共享</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> target = &#123; a: <span class=\"number\">1</span>, b: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> source1 = &#123; b: <span class=\"number\">2</span>, c: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> source2 = &#123; c: <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(target, source1, source2);</span><br><span class=\"line\">target <span class=\"comment\">// &#123;a:1, b:2, c:3&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(target) === target <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(<span class=\"literal\">undefined</span>) <span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(<span class=\"literal\">null</span>) <span class=\"comment\">// 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> v1 = <span class=\"string\">'abc'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> v2 = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> v3 = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 字符串是可枚举的，所以可以被复制，不可枚举属性将被忽略</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, v1, v2, v3);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">// &#123; \"0\": \"a\", \"1\": \"b\", \"2\": \"c\" &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>.assign(<span class=\"literal\">true</span>); <span class=\"comment\">// true会被转换为对象返回</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>]); <span class=\"comment\">// [4, 5, 3]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以上实例代码大部分来自阮一峰老师的 《ECMAScript 6 入门》 一书<br>书籍在线阅读地址: <a href=\"http://es6.ruanyifeng.com/#README\">http://es6.ruanyifeng.com/#README</a></p>\n</blockquote>\n"},{"title":"ES6 学习笔记（三）","date":"2016-04-18T08:21:39.000Z","_content":"\n# Symbol\n> `Symbol` 是 JavaScript 的第七种类型（前六种是：Undefined、Null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object））。它用于生成独一无二的变量名，防止相同变量名的相互覆盖，例如在对象中，用字符串声明的属性如果相同，那么会互相覆盖\n\n注意点：\n* Symbol 不能与其他值一起计算，例如与字符串连接，但是可以使用 `toString()` 进行转换\n* Symbol 不能使用点运算符作为属性名，只能使用方括号，避免与字符串方式冲突\n* Symbol 作为属性名，该属性不会出现在 for...in、for...of 循环中，也不会被 Object.keys()、Object.getOwnPropertyNames() 返回\n* Symbol 可以被 Object.getOwnPropertySymbols() 返回\n\n\n```JavaScript\nvar s1 = Symbol('foo');\nvar s2 = Symbol('bar');\nvar s3 = Symbol();\nvar s4 = Symbol();\nvar s5 = Symbol('foo');\n\ns1 // Symbol(foo)\ns2 // Symbol(bar)\n\ns3 === s4; // false\ns1 === s5; // false\n\ns1.toString() // \"Symbol(foo)\"\ns2.toString() // \"Symbol(bar)\"\n\nvar mySymbol = Symbol();\nvar a = {};\n\na.mySymbol = 'Hello!';\na[mySymbol] // undefined\na['mySymbol'] // \"Hello!\"\n```\n\n## Symbol.for() & Symbol.keyFor()\n> `Symbol.for(name)` 与 `Symbol(name)` 不同的地方在于，前者在没有存在 name 注册的 Symbol 变量时，会注册一个新的 Symbol 变量，如果存在，那么就会返回该 name 注册的 Symbol。后者不管 name 有没有注册过，都会产生一个新的 Symbol\n\n```JavaScript\nvar s1 = Symbol.for('foo');\nvar s2 = Symbol.for('foo');\n\ns1 === s2 // true\n\nSymbol.for(\"bar\") === Symbol.for(\"bar\")\n// true\n\nSymbol(\"bar\") === Symbol(\"bar\")\n// false\n```\n\n> `Symbol.keyFor(Symbol)` 会返回已注册过的 Symbol 的值的 desc\n\n```JavaScript\nvar s1 = Symbol.for(\"foo\");\nSymbol.keyFor(s1) // \"foo\"\n\nvar s2 = Symbol(\"foo\");\nSymbol.keyFor(s2) // undefined\n```\n\n# Proxy\n> Proxy用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程\n\n## new Proxy(target, handler)\n> target 为要通过 handler 进行处理拦截的对象\n\n## get()\n> 用于拦截对对象属性访问时的处理\n\n```JavaScript\nvar person = {\n  name: \"张三\"\n};\n\nvar proxy = new Proxy(person, {\n  get: function(target, property) {\n    if (property in target) {\n      return target[property];\n    } else {\n      throw new ReferenceError(\"Property \\\"\" + property + \"\\\" does not exist.\");\n    }\n  }\n});\n\nproxy.name // \"张三\"\nproxy.age // 抛出一个错误\n\n// 对数组负数的索引值进行处理\nfunction createArray(...elements) {\n  let handler = {\n    get(target, propKey, receiver) {\n      let index = Number(propKey);\n      if (index < 0) {\n        propKey = String(target.length + index);\n      }\n      return Reflect.get(target, propKey, receiver);\n    }\n  };\n\n  let target = [];\n  target.push(...elements);\n  return new Proxy(target, handler);\n}\n\nlet arr = createArray('a', 'b', 'c');\narr[-1] // c\n```\n\n## set()\n> 用于拦截设置属性时的操作\n\n```JavaScript\nlet validator = {\n  set: function(obj, prop, value) {\n    if (prop === 'age') {\n      if (!Number.isInteger(value)) {\n        throw new TypeError('The age is not an integer');\n      }\n      if (value > 200) {\n        throw new RangeError('The age seems invalid');\n      }\n    }\n\n    // 对于age以外的属性，直接保存\n    obj[prop] = value;\n  }\n};\n\nlet person = new Proxy({}, validator);\n\nperson.age = 100;\n\nperson.age // 100\nperson.age = 'young' // 报错\nperson.age = 300 // 报错\n```\n\n## apply(target, context, args)\n> 用于拦截函数的调用、call和apply操作。target 为目标函数，context 为函数执行上下文，args 为函数参数\n\n```JavaScript\nvar target = function () { return 'I am the target'; };\nvar handler = {\n  apply: function () {\n    return 'I am the proxy';\n  }\n};\n\nvar p = new Proxy(target, handler);\n\np()\n// \"I am the proxy\"\n```\n\n## has()\n> 用于处理一些在执行 “xxx in obj” 的拦截，可以对某些属性进行隐藏\n\n```JavaScript\nvar handler = {\n  has (target, key) {\n    if (key[0] === '_') {\n      return false;\n    }\n    return key in target;\n  }\n};\nvar target = { _prop: 'foo', prop: 'foo' };\nvar proxy = new Proxy(target, handler);\n'_prop' in proxy // false\n```\n\n## construct()\n> 用于拦截 new 操作时的处理\n\n```JavaScript\nvar p = new Proxy(function() {}, {\n  construct: function(target, args) {\n    console.log('called: ' + args.join(', '));\n    return { value: args[0] * 10 };\n  }\n});\n\nnew p(1).value\n// \"called: 1\"\n// 10\n```\n\n## deleteProperty()\n> 用于拦截删除对象属性时的操作\n\n```JavaScript\nvar handler = {\n  deleteProperty (target, key) {\n    invariant(key, 'delete');\n    return true;\n  }\n}\nfunction invariant (key, action) {\n  if (key[0] === '_') {\n    throw new Error(`Invalid attempt to ${action} private \"${key}\" property`);\n  }\n}\n\nvar target = { _prop: 'foo' }\nvar proxy = new Proxy(target, handler)\ndelete proxy._prop; // 报错\n```\n\n## defineProperty()\n> 用于拦截定义对象属性时的操作\n\n```JavaScript\nvar handler = {\n  defineProperty (target, key, descriptor) {\n    return false\n  }\n}\nvar target = {}\nvar proxy = new Proxy(target, handler)\nproxy.foo = 'bar';\nconsole.log(proxy.foo); // undefined\n```\n\n## enumerate()\n> 用于拦截 “for xxx in obj” 时的处理操作，跟 has() 不是同种拦截，互不影响\n\n```JavaScript\n// 这个例子在 FF 上成功，但是 Chrome 上依旧打印了所有属性\nvar handler = {\n  enumerate (target) {\n    return Object.keys(target).filter(key => key[0] !== '_')[Symbol.iterator]();\n  }\n}\nvar target = { prop: 'foo', _bar: 'baz', _prop: 'foo' }\nvar proxy = new Proxy(target, handler)\nfor (let key in proxy) {\n  console.log(key);\n  // \"prop\"\n}\n```\n\n# Reflect\n> Reflect 对象提供了若干个能对任意对象进行某种特定的可拦截操作（interceptable operation）的方法，它所提供的静态方法在 Proxy 中都有对应的相同方法，可以这么说，Reflect 保留了原先的默认处理方式，以供 Proxy 在修改默认处理的同时也能应用默认处理后再进行一些其他处理。某些方法也是 Object 上的方法，不过修改相应的返回值，更加完善\n> 参考资料：\nhttps://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect\n\n```JavaScript\n// 老写法\ntry {\n  Object.defineProperty(target, property, attributes);\n  // success\n} catch (e) {\n  // failure\n}\n\n// 新写法\nif (Reflect.defineProperty(target, property, attributes)) {\n  // success\n} else {\n  // failure\n}\n\n// 老写法\n'assign' in Object // true\n\n// 新写法\n// 行为被函数化\nReflect.has(Object, 'assign') // true\n\n// 添加了自己的行为，同时使用 Reflect 的相应静态方法执行默认行为\nvar loggedObj = new Proxy(obj, {\n  get(target, name) {\n    console.log('get', target, name);\n    return Reflect.get(target, name);\n  },\n  deleteProperty(target, name) {\n    console.log('delete' + name);\n    return Reflect.deleteProperty(target, name);\n  },\n  has(target, name) {\n    console.log('has' + name);\n    return Reflect.has(target, name);\n  }\n});\n```\n> 可能有人会对 Reflect 的存在感到疑惑，我个人认为 Reflect 存在的意义大概有两点，一是对 ES5 中 Object 一些方法的返回值进行修改完善，但是为了兼容性，开拓了一个新的对象来存放这些静态方法。二是为了让 Proxy 可以方便地在拦截器中添加处理方法的同时调用默认处理方法，所以 Reflect 中存在的静态方法都跟 Proxy 中的方法一一对应，同时修改了部分 Object 中的方法的返回值，例如 Object 中一些调用失败的方法会抛出错误，而在 Reflect 中修改为返回布尔值，以上是一点点见解，可以参考一下：https://tc39.github.io/ecma262/#sec-reflect-object\n\n> 以上实例代码大部分来自阮一峰老师的 《ECMAScript 6 入门》 一书\n> 书籍在线阅读地址: http://es6.ruanyifeng.com/#README\n","source":"_posts/ES6-学习笔记（三）.md","raw":"---\ntitle: ES6 学习笔记（三）\ndate: 2016-04-18 16:21:39\ncategories:\n    - 前端\n    - ECMAScript 6\ntags: Javascript\n---\n\n# Symbol\n> `Symbol` 是 JavaScript 的第七种类型（前六种是：Undefined、Null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object））。它用于生成独一无二的变量名，防止相同变量名的相互覆盖，例如在对象中，用字符串声明的属性如果相同，那么会互相覆盖\n\n注意点：\n* Symbol 不能与其他值一起计算，例如与字符串连接，但是可以使用 `toString()` 进行转换\n* Symbol 不能使用点运算符作为属性名，只能使用方括号，避免与字符串方式冲突\n* Symbol 作为属性名，该属性不会出现在 for...in、for...of 循环中，也不会被 Object.keys()、Object.getOwnPropertyNames() 返回\n* Symbol 可以被 Object.getOwnPropertySymbols() 返回\n\n\n```JavaScript\nvar s1 = Symbol('foo');\nvar s2 = Symbol('bar');\nvar s3 = Symbol();\nvar s4 = Symbol();\nvar s5 = Symbol('foo');\n\ns1 // Symbol(foo)\ns2 // Symbol(bar)\n\ns3 === s4; // false\ns1 === s5; // false\n\ns1.toString() // \"Symbol(foo)\"\ns2.toString() // \"Symbol(bar)\"\n\nvar mySymbol = Symbol();\nvar a = {};\n\na.mySymbol = 'Hello!';\na[mySymbol] // undefined\na['mySymbol'] // \"Hello!\"\n```\n\n## Symbol.for() & Symbol.keyFor()\n> `Symbol.for(name)` 与 `Symbol(name)` 不同的地方在于，前者在没有存在 name 注册的 Symbol 变量时，会注册一个新的 Symbol 变量，如果存在，那么就会返回该 name 注册的 Symbol。后者不管 name 有没有注册过，都会产生一个新的 Symbol\n\n```JavaScript\nvar s1 = Symbol.for('foo');\nvar s2 = Symbol.for('foo');\n\ns1 === s2 // true\n\nSymbol.for(\"bar\") === Symbol.for(\"bar\")\n// true\n\nSymbol(\"bar\") === Symbol(\"bar\")\n// false\n```\n\n> `Symbol.keyFor(Symbol)` 会返回已注册过的 Symbol 的值的 desc\n\n```JavaScript\nvar s1 = Symbol.for(\"foo\");\nSymbol.keyFor(s1) // \"foo\"\n\nvar s2 = Symbol(\"foo\");\nSymbol.keyFor(s2) // undefined\n```\n\n# Proxy\n> Proxy用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程\n\n## new Proxy(target, handler)\n> target 为要通过 handler 进行处理拦截的对象\n\n## get()\n> 用于拦截对对象属性访问时的处理\n\n```JavaScript\nvar person = {\n  name: \"张三\"\n};\n\nvar proxy = new Proxy(person, {\n  get: function(target, property) {\n    if (property in target) {\n      return target[property];\n    } else {\n      throw new ReferenceError(\"Property \\\"\" + property + \"\\\" does not exist.\");\n    }\n  }\n});\n\nproxy.name // \"张三\"\nproxy.age // 抛出一个错误\n\n// 对数组负数的索引值进行处理\nfunction createArray(...elements) {\n  let handler = {\n    get(target, propKey, receiver) {\n      let index = Number(propKey);\n      if (index < 0) {\n        propKey = String(target.length + index);\n      }\n      return Reflect.get(target, propKey, receiver);\n    }\n  };\n\n  let target = [];\n  target.push(...elements);\n  return new Proxy(target, handler);\n}\n\nlet arr = createArray('a', 'b', 'c');\narr[-1] // c\n```\n\n## set()\n> 用于拦截设置属性时的操作\n\n```JavaScript\nlet validator = {\n  set: function(obj, prop, value) {\n    if (prop === 'age') {\n      if (!Number.isInteger(value)) {\n        throw new TypeError('The age is not an integer');\n      }\n      if (value > 200) {\n        throw new RangeError('The age seems invalid');\n      }\n    }\n\n    // 对于age以外的属性，直接保存\n    obj[prop] = value;\n  }\n};\n\nlet person = new Proxy({}, validator);\n\nperson.age = 100;\n\nperson.age // 100\nperson.age = 'young' // 报错\nperson.age = 300 // 报错\n```\n\n## apply(target, context, args)\n> 用于拦截函数的调用、call和apply操作。target 为目标函数，context 为函数执行上下文，args 为函数参数\n\n```JavaScript\nvar target = function () { return 'I am the target'; };\nvar handler = {\n  apply: function () {\n    return 'I am the proxy';\n  }\n};\n\nvar p = new Proxy(target, handler);\n\np()\n// \"I am the proxy\"\n```\n\n## has()\n> 用于处理一些在执行 “xxx in obj” 的拦截，可以对某些属性进行隐藏\n\n```JavaScript\nvar handler = {\n  has (target, key) {\n    if (key[0] === '_') {\n      return false;\n    }\n    return key in target;\n  }\n};\nvar target = { _prop: 'foo', prop: 'foo' };\nvar proxy = new Proxy(target, handler);\n'_prop' in proxy // false\n```\n\n## construct()\n> 用于拦截 new 操作时的处理\n\n```JavaScript\nvar p = new Proxy(function() {}, {\n  construct: function(target, args) {\n    console.log('called: ' + args.join(', '));\n    return { value: args[0] * 10 };\n  }\n});\n\nnew p(1).value\n// \"called: 1\"\n// 10\n```\n\n## deleteProperty()\n> 用于拦截删除对象属性时的操作\n\n```JavaScript\nvar handler = {\n  deleteProperty (target, key) {\n    invariant(key, 'delete');\n    return true;\n  }\n}\nfunction invariant (key, action) {\n  if (key[0] === '_') {\n    throw new Error(`Invalid attempt to ${action} private \"${key}\" property`);\n  }\n}\n\nvar target = { _prop: 'foo' }\nvar proxy = new Proxy(target, handler)\ndelete proxy._prop; // 报错\n```\n\n## defineProperty()\n> 用于拦截定义对象属性时的操作\n\n```JavaScript\nvar handler = {\n  defineProperty (target, key, descriptor) {\n    return false\n  }\n}\nvar target = {}\nvar proxy = new Proxy(target, handler)\nproxy.foo = 'bar';\nconsole.log(proxy.foo); // undefined\n```\n\n## enumerate()\n> 用于拦截 “for xxx in obj” 时的处理操作，跟 has() 不是同种拦截，互不影响\n\n```JavaScript\n// 这个例子在 FF 上成功，但是 Chrome 上依旧打印了所有属性\nvar handler = {\n  enumerate (target) {\n    return Object.keys(target).filter(key => key[0] !== '_')[Symbol.iterator]();\n  }\n}\nvar target = { prop: 'foo', _bar: 'baz', _prop: 'foo' }\nvar proxy = new Proxy(target, handler)\nfor (let key in proxy) {\n  console.log(key);\n  // \"prop\"\n}\n```\n\n# Reflect\n> Reflect 对象提供了若干个能对任意对象进行某种特定的可拦截操作（interceptable operation）的方法，它所提供的静态方法在 Proxy 中都有对应的相同方法，可以这么说，Reflect 保留了原先的默认处理方式，以供 Proxy 在修改默认处理的同时也能应用默认处理后再进行一些其他处理。某些方法也是 Object 上的方法，不过修改相应的返回值，更加完善\n> 参考资料：\nhttps://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect\n\n```JavaScript\n// 老写法\ntry {\n  Object.defineProperty(target, property, attributes);\n  // success\n} catch (e) {\n  // failure\n}\n\n// 新写法\nif (Reflect.defineProperty(target, property, attributes)) {\n  // success\n} else {\n  // failure\n}\n\n// 老写法\n'assign' in Object // true\n\n// 新写法\n// 行为被函数化\nReflect.has(Object, 'assign') // true\n\n// 添加了自己的行为，同时使用 Reflect 的相应静态方法执行默认行为\nvar loggedObj = new Proxy(obj, {\n  get(target, name) {\n    console.log('get', target, name);\n    return Reflect.get(target, name);\n  },\n  deleteProperty(target, name) {\n    console.log('delete' + name);\n    return Reflect.deleteProperty(target, name);\n  },\n  has(target, name) {\n    console.log('has' + name);\n    return Reflect.has(target, name);\n  }\n});\n```\n> 可能有人会对 Reflect 的存在感到疑惑，我个人认为 Reflect 存在的意义大概有两点，一是对 ES5 中 Object 一些方法的返回值进行修改完善，但是为了兼容性，开拓了一个新的对象来存放这些静态方法。二是为了让 Proxy 可以方便地在拦截器中添加处理方法的同时调用默认处理方法，所以 Reflect 中存在的静态方法都跟 Proxy 中的方法一一对应，同时修改了部分 Object 中的方法的返回值，例如 Object 中一些调用失败的方法会抛出错误，而在 Reflect 中修改为返回布尔值，以上是一点点见解，可以参考一下：https://tc39.github.io/ecma262/#sec-reflect-object\n\n> 以上实例代码大部分来自阮一峰老师的 《ECMAScript 6 入门》 一书\n> 书籍在线阅读地址: http://es6.ruanyifeng.com/#README\n","slug":"ES6-学习笔记（三）","published":1,"updated":"2016-04-19T07:50:39.429Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqggs7ki000tikvdjw9hof02","content":"<h1 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h1><blockquote>\n<p><code>Symbol</code> 是 JavaScript 的第七种类型（前六种是：Undefined、Null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object））。它用于生成独一无二的变量名，防止相同变量名的相互覆盖，例如在对象中，用字符串声明的属性如果相同，那么会互相覆盖</p>\n</blockquote>\n<p>注意点：</p>\n<ul>\n<li>Symbol 不能与其他值一起计算，例如与字符串连接，但是可以使用 <code>toString()</code> 进行转换</li>\n<li>Symbol 不能使用点运算符作为属性名，只能使用方括号，避免与字符串方式冲突</li>\n<li>Symbol 作为属性名，该属性不会出现在 for…in、for…of 循环中，也不会被 Object.keys()、Object.getOwnPropertyNames() 返回</li>\n<li>Symbol 可以被 Object.getOwnPropertySymbols() 返回</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'bar'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> s3 = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s4 = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s5 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">s1 <span class=\"comment\">// Symbol(foo)</span></span><br><span class=\"line\">s2 <span class=\"comment\">// Symbol(bar)</span></span><br><span class=\"line\"></span><br><span class=\"line\">s3 === s4; <span class=\"comment\">// false</span></span><br><span class=\"line\">s1 === s5; <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">s1.toString() <span class=\"comment\">// \"Symbol(foo)\"</span></span><br><span class=\"line\">s2.toString() <span class=\"comment\">// \"Symbol(bar)\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mySymbol = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">a.mySymbol = <span class=\"string\">'Hello!'</span>;</span><br><span class=\"line\">a[mySymbol] <span class=\"comment\">// undefined</span></span><br><span class=\"line\">a[<span class=\"string\">'mySymbol'</span>] <span class=\"comment\">// \"Hello!\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Symbol-for-amp-Symbol-keyFor\"><a href=\"#Symbol-for-amp-Symbol-keyFor\" class=\"headerlink\" title=\"Symbol.for() &amp; Symbol.keyFor()\"></a>Symbol.for() &amp; Symbol.keyFor()</h2><blockquote>\n<p><code>Symbol.for(name)</code> 与 <code>Symbol(name)</code> 不同的地方在于，前者在没有存在 name 注册的 Symbol 变量时，会注册一个新的 Symbol 变量，如果存在，那么就会返回该 name 注册的 Symbol。后者不管 name 有没有注册过，都会产生一个新的 Symbol</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">s1 === s2 <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>.for(<span class=\"string\">\"bar\"</span>) === <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">\"bar\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>(<span class=\"string\">\"bar\"</span>) === <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"bar\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>Symbol.keyFor(Symbol)</code> 会返回已注册过的 Symbol 的值的 desc</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>.keyFor(s1) <span class=\"comment\">// \"foo\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>.keyFor(s2) <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Proxy\"><a href=\"#Proxy\" class=\"headerlink\" title=\"Proxy\"></a>Proxy</h1><blockquote>\n<p>Proxy用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程</p>\n</blockquote>\n<h2 id=\"new-Proxy-target-handler\"><a href=\"#new-Proxy-target-handler\" class=\"headerlink\" title=\"new Proxy(target, handler)\"></a>new Proxy(target, handler)</h2><blockquote>\n<p>target 为要通过 handler 进行处理拦截的对象</p>\n</blockquote>\n<h2 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get()\"></a>get()</h2><blockquote>\n<p>用于拦截对对象属性访问时的处理</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"张三\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(person, &#123;</span><br><span class=\"line\">  get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, property</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (property <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> target[property];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">ReferenceError</span>(<span class=\"string\">\"Property \\\"\"</span> + property + <span class=\"string\">\"\\\" does not exist.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.name <span class=\"comment\">// \"张三\"</span></span><br><span class=\"line\">proxy.age <span class=\"comment\">// 抛出一个错误</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对数组负数的索引值进行处理</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createArray</span>(<span class=\"params\">...elements</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> handler = &#123;</span><br><span class=\"line\">    get(target, propKey, receiver) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> index = <span class=\"built_in\">Number</span>(propKey);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        propKey = <span class=\"built_in\">String</span>(target.length + index);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(target, propKey, receiver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> target = [];</span><br><span class=\"line\">  target.push(...elements);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = createArray(<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>);</span><br><span class=\"line\">arr[<span class=\"number\">-1</span>] <span class=\"comment\">// c</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set()\"></a>set()</h2><blockquote>\n<p>用于拦截设置属性时的操作</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> validator = &#123;</span><br><span class=\"line\">  set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, prop, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prop === <span class=\"string\">'age'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"built_in\">Number</span>.isInteger(value)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'The age is not an integer'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (value &gt; <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RangeError</span>(<span class=\"string\">'The age seems invalid'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 对于age以外的属性，直接保存</span></span><br><span class=\"line\">    obj[prop] = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, validator);</span><br><span class=\"line\"></span><br><span class=\"line\">person.age = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">person.age <span class=\"comment\">// 100</span></span><br><span class=\"line\">person.age = <span class=\"string\">'young'</span> <span class=\"comment\">// 报错</span></span><br><span class=\"line\">person.age = <span class=\"number\">300</span> <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"apply-target-context-args\"><a href=\"#apply-target-context-args\" class=\"headerlink\" title=\"apply(target, context, args)\"></a>apply(target, context, args)</h2><blockquote>\n<p>用于拦截函数的调用、call和apply操作。target 为目标函数，context 为函数执行上下文，args 为函数参数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> target = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">'I am the target'</span>; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">  apply: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'I am the proxy'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"></span><br><span class=\"line\">p()</span><br><span class=\"line\"><span class=\"comment\">// \"I am the proxy\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"has\"><a href=\"#has\" class=\"headerlink\" title=\"has()\"></a>has()</h2><blockquote>\n<p>用于处理一些在执行 “xxx in obj” 的拦截，可以对某些属性进行隐藏</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">  has (target, key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key[<span class=\"number\">0</span>] === <span class=\"string\">'_'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> key <span class=\"keyword\">in</span> target;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> target = &#123; _prop: <span class=\"string\">'foo'</span>, prop: <span class=\"string\">'foo'</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"><span class=\"string\">'_prop'</span> <span class=\"keyword\">in</span> proxy <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"construct\"><a href=\"#construct\" class=\"headerlink\" title=\"construct()\"></a>construct()</h2><blockquote>\n<p>用于拦截 new 操作时的处理</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;, &#123;</span><br><span class=\"line\">  construct: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'called: '</span> + args.join(<span class=\"string\">', '</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; value: args[<span class=\"number\">0</span>] * <span class=\"number\">10</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> p(<span class=\"number\">1</span>).value</span><br><span class=\"line\"><span class=\"comment\">// \"called: 1\"</span></span><br><span class=\"line\"><span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"deleteProperty\"><a href=\"#deleteProperty\" class=\"headerlink\" title=\"deleteProperty()\"></a>deleteProperty()</h2><blockquote>\n<p>用于拦截删除对象属性时的操作</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">  deleteProperty (target, key) &#123;</span><br><span class=\"line\">    invariant(key, <span class=\"string\">'delete'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invariant</span> (<span class=\"params\">key, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (key[<span class=\"number\">0</span>] === <span class=\"string\">'_'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`Invalid attempt to <span class=\"subst\">$&#123;action&#125;</span> private \"<span class=\"subst\">$&#123;key&#125;</span>\" property`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> target = &#123; _prop: <span class=\"string\">'foo'</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler)</span><br><span class=\"line\"><span class=\"keyword\">delete</span> proxy._prop; <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"defineProperty\"><a href=\"#defineProperty\" class=\"headerlink\" title=\"defineProperty()\"></a>defineProperty()</h2><blockquote>\n<p>用于拦截定义对象属性时的操作</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">  defineProperty (target, key, descriptor) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> target = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler)</span><br><span class=\"line\">proxy.foo = <span class=\"string\">'bar'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(proxy.foo); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"enumerate\"><a href=\"#enumerate\" class=\"headerlink\" title=\"enumerate()\"></a>enumerate()</h2><blockquote>\n<p>用于拦截 “for xxx in obj” 时的处理操作，跟 has() 不是同种拦截，互不影响</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个例子在 FF 上成功，但是 Chrome 上依旧打印了所有属性</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">  enumerate (target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(target).filter(key =&gt; key[<span class=\"number\">0</span>] !== <span class=\"string\">'_'</span>)[<span class=\"built_in\">Symbol</span>.iterator]();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> target = &#123; prop: <span class=\"string\">'foo'</span>, _bar: <span class=\"string\">'baz'</span>, _prop: <span class=\"string\">'foo'</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> proxy) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">  <span class=\"comment\">// \"prop\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Reflect\"><a href=\"#Reflect\" class=\"headerlink\" title=\"Reflect\"></a>Reflect</h1><blockquote>\n<p>Reflect 对象提供了若干个能对任意对象进行某种特定的可拦截操作（interceptable operation）的方法，它所提供的静态方法在 Proxy 中都有对应的相同方法，可以这么说，Reflect 保留了原先的默认处理方式，以供 Proxy 在修改默认处理的同时也能应用默认处理后再进行一些其他处理。某些方法也是 Object 上的方法，不过修改相应的返回值，更加完善<br>参考资料：<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 老写法</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(target, property, attributes);</span><br><span class=\"line\">  <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// failure</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新写法</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Reflect</span>.defineProperty(target, property, attributes)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// failure</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 老写法</span></span><br><span class=\"line\"><span class=\"string\">'assign'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">Object</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新写法</span></span><br><span class=\"line\"><span class=\"comment\">// 行为被函数化</span></span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.has(<span class=\"built_in\">Object</span>, <span class=\"string\">'assign'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加了自己的行为，同时使用 Reflect 的相应静态方法执行默认行为</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> loggedObj = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">  get(target, name) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'get'</span>, target, name);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(target, name);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  deleteProperty(target, name) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'delete'</span> + name);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.deleteProperty(target, name);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  has(target, name) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'has'</span> + name);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.has(target, name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可能有人会对 Reflect 的存在感到疑惑，我个人认为 Reflect 存在的意义大概有两点，一是对 ES5 中 Object 一些方法的返回值进行修改完善，但是为了兼容性，开拓了一个新的对象来存放这些静态方法。二是为了让 Proxy 可以方便地在拦截器中添加处理方法的同时调用默认处理方法，所以 Reflect 中存在的静态方法都跟 Proxy 中的方法一一对应，同时修改了部分 Object 中的方法的返回值，例如 Object 中一些调用失败的方法会抛出错误，而在 Reflect 中修改为返回布尔值，以上是一点点见解，可以参考一下：<a href=\"https://tc39.github.io/ecma262/#sec-reflect-object\" target=\"_blank\" rel=\"external\">https://tc39.github.io/ecma262/#sec-reflect-object</a></p>\n<p>以上实例代码大部分来自阮一峰老师的 《ECMAScript 6 入门》 一书<br>书籍在线阅读地址: <a href=\"http://es6.ruanyifeng.com/#README\" target=\"_blank\" rel=\"external\">http://es6.ruanyifeng.com/#README</a></p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h1><blockquote>\n<p><code>Symbol</code> 是 JavaScript 的第七种类型（前六种是：Undefined、Null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object））。它用于生成独一无二的变量名，防止相同变量名的相互覆盖，例如在对象中，用字符串声明的属性如果相同，那么会互相覆盖</p>\n</blockquote>\n<p>注意点：</p>\n<ul>\n<li>Symbol 不能与其他值一起计算，例如与字符串连接，但是可以使用 <code>toString()</code> 进行转换</li>\n<li>Symbol 不能使用点运算符作为属性名，只能使用方括号，避免与字符串方式冲突</li>\n<li>Symbol 作为属性名，该属性不会出现在 for…in、for…of 循环中，也不会被 Object.keys()、Object.getOwnPropertyNames() 返回</li>\n<li>Symbol 可以被 Object.getOwnPropertySymbols() 返回</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'bar'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> s3 = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s4 = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> s5 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">s1 <span class=\"comment\">// Symbol(foo)</span></span><br><span class=\"line\">s2 <span class=\"comment\">// Symbol(bar)</span></span><br><span class=\"line\"></span><br><span class=\"line\">s3 === s4; <span class=\"comment\">// false</span></span><br><span class=\"line\">s1 === s5; <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">s1.toString() <span class=\"comment\">// \"Symbol(foo)\"</span></span><br><span class=\"line\">s2.toString() <span class=\"comment\">// \"Symbol(bar)\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mySymbol = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">a.mySymbol = <span class=\"string\">'Hello!'</span>;</span><br><span class=\"line\">a[mySymbol] <span class=\"comment\">// undefined</span></span><br><span class=\"line\">a[<span class=\"string\">'mySymbol'</span>] <span class=\"comment\">// \"Hello!\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Symbol-for-amp-Symbol-keyFor\"><a href=\"#Symbol-for-amp-Symbol-keyFor\" class=\"headerlink\" title=\"Symbol.for() &amp; Symbol.keyFor()\"></a>Symbol.for() &amp; Symbol.keyFor()</h2><blockquote>\n<p><code>Symbol.for(name)</code> 与 <code>Symbol(name)</code> 不同的地方在于，前者在没有存在 name 注册的 Symbol 变量时，会注册一个新的 Symbol 变量，如果存在，那么就会返回该 name 注册的 Symbol。后者不管 name 有没有注册过，都会产生一个新的 Symbol</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">s1 === s2 <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>.for(<span class=\"string\">\"bar\"</span>) === <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">\"bar\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>(<span class=\"string\">\"bar\"</span>) === <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"bar\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>Symbol.keyFor(Symbol)</code> 会返回已注册过的 Symbol 的值的 desc</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>.keyFor(s1) <span class=\"comment\">// \"foo\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>.keyFor(s2) <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Proxy\"><a href=\"#Proxy\" class=\"headerlink\" title=\"Proxy\"></a>Proxy</h1><blockquote>\n<p>Proxy用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程</p>\n</blockquote>\n<h2 id=\"new-Proxy-target-handler\"><a href=\"#new-Proxy-target-handler\" class=\"headerlink\" title=\"new Proxy(target, handler)\"></a>new Proxy(target, handler)</h2><blockquote>\n<p>target 为要通过 handler 进行处理拦截的对象</p>\n</blockquote>\n<h2 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get()\"></a>get()</h2><blockquote>\n<p>用于拦截对对象属性访问时的处理</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"张三\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(person, &#123;</span><br><span class=\"line\">  get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, property</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (property <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> target[property];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">ReferenceError</span>(<span class=\"string\">\"Property \\\"\"</span> + property + <span class=\"string\">\"\\\" does not exist.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.name <span class=\"comment\">// \"张三\"</span></span><br><span class=\"line\">proxy.age <span class=\"comment\">// 抛出一个错误</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对数组负数的索引值进行处理</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createArray</span>(<span class=\"params\">...elements</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> handler = &#123;</span><br><span class=\"line\">    get(target, propKey, receiver) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> index = <span class=\"built_in\">Number</span>(propKey);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        propKey = <span class=\"built_in\">String</span>(target.length + index);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(target, propKey, receiver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> target = [];</span><br><span class=\"line\">  target.push(...elements);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = createArray(<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>);</span><br><span class=\"line\">arr[<span class=\"number\">-1</span>] <span class=\"comment\">// c</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set()\"></a>set()</h2><blockquote>\n<p>用于拦截设置属性时的操作</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> validator = &#123;</span><br><span class=\"line\">  set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj, prop, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prop === <span class=\"string\">'age'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"built_in\">Number</span>.isInteger(value)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'The age is not an integer'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (value &gt; <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RangeError</span>(<span class=\"string\">'The age seems invalid'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 对于age以外的属性，直接保存</span></span><br><span class=\"line\">    obj[prop] = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, validator);</span><br><span class=\"line\"></span><br><span class=\"line\">person.age = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">person.age <span class=\"comment\">// 100</span></span><br><span class=\"line\">person.age = <span class=\"string\">'young'</span> <span class=\"comment\">// 报错</span></span><br><span class=\"line\">person.age = <span class=\"number\">300</span> <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"apply-target-context-args\"><a href=\"#apply-target-context-args\" class=\"headerlink\" title=\"apply(target, context, args)\"></a>apply(target, context, args)</h2><blockquote>\n<p>用于拦截函数的调用、call和apply操作。target 为目标函数，context 为函数执行上下文，args 为函数参数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> target = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">'I am the target'</span>; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">  apply: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'I am the proxy'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"></span><br><span class=\"line\">p()</span><br><span class=\"line\"><span class=\"comment\">// \"I am the proxy\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"has\"><a href=\"#has\" class=\"headerlink\" title=\"has()\"></a>has()</h2><blockquote>\n<p>用于处理一些在执行 “xxx in obj” 的拦截，可以对某些属性进行隐藏</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">  has (target, key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key[<span class=\"number\">0</span>] === <span class=\"string\">'_'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> key <span class=\"keyword\">in</span> target;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> target = &#123; _prop: <span class=\"string\">'foo'</span>, prop: <span class=\"string\">'foo'</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"><span class=\"string\">'_prop'</span> <span class=\"keyword\">in</span> proxy <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"construct\"><a href=\"#construct\" class=\"headerlink\" title=\"construct()\"></a>construct()</h2><blockquote>\n<p>用于拦截 new 操作时的处理</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;, &#123;</span><br><span class=\"line\">  construct: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'called: '</span> + args.join(<span class=\"string\">', '</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; value: args[<span class=\"number\">0</span>] * <span class=\"number\">10</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> p(<span class=\"number\">1</span>).value</span><br><span class=\"line\"><span class=\"comment\">// \"called: 1\"</span></span><br><span class=\"line\"><span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"deleteProperty\"><a href=\"#deleteProperty\" class=\"headerlink\" title=\"deleteProperty()\"></a>deleteProperty()</h2><blockquote>\n<p>用于拦截删除对象属性时的操作</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">  deleteProperty (target, key) &#123;</span><br><span class=\"line\">    invariant(key, <span class=\"string\">'delete'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invariant</span> (<span class=\"params\">key, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (key[<span class=\"number\">0</span>] === <span class=\"string\">'_'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`Invalid attempt to <span class=\"subst\">$&#123;action&#125;</span> private \"<span class=\"subst\">$&#123;key&#125;</span>\" property`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> target = &#123; _prop: <span class=\"string\">'foo'</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler)</span><br><span class=\"line\"><span class=\"keyword\">delete</span> proxy._prop; <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"defineProperty\"><a href=\"#defineProperty\" class=\"headerlink\" title=\"defineProperty()\"></a>defineProperty()</h2><blockquote>\n<p>用于拦截定义对象属性时的操作</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">  defineProperty (target, key, descriptor) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> target = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler)</span><br><span class=\"line\">proxy.foo = <span class=\"string\">'bar'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(proxy.foo); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"enumerate\"><a href=\"#enumerate\" class=\"headerlink\" title=\"enumerate()\"></a>enumerate()</h2><blockquote>\n<p>用于拦截 “for xxx in obj” 时的处理操作，跟 has() 不是同种拦截，互不影响</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个例子在 FF 上成功，但是 Chrome 上依旧打印了所有属性</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</span><br><span class=\"line\">  enumerate (target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.keys(target).filter(key =&gt; key[<span class=\"number\">0</span>] !== <span class=\"string\">'_'</span>)[<span class=\"built_in\">Symbol</span>.iterator]();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> target = &#123; prop: <span class=\"string\">'foo'</span>, _bar: <span class=\"string\">'baz'</span>, _prop: <span class=\"string\">'foo'</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> proxy) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">  <span class=\"comment\">// \"prop\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Reflect\"><a href=\"#Reflect\" class=\"headerlink\" title=\"Reflect\"></a>Reflect</h1><blockquote>\n<p>Reflect 对象提供了若干个能对任意对象进行某种特定的可拦截操作（interceptable operation）的方法，它所提供的静态方法在 Proxy 中都有对应的相同方法，可以这么说，Reflect 保留了原先的默认处理方式，以供 Proxy 在修改默认处理的同时也能应用默认处理后再进行一些其他处理。某些方法也是 Object 上的方法，不过修改相应的返回值，更加完善<br>参考资料：<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 老写法</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(target, property, attributes);</span><br><span class=\"line\">  <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// failure</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新写法</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Reflect</span>.defineProperty(target, property, attributes)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// failure</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 老写法</span></span><br><span class=\"line\"><span class=\"string\">'assign'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">Object</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新写法</span></span><br><span class=\"line\"><span class=\"comment\">// 行为被函数化</span></span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.has(<span class=\"built_in\">Object</span>, <span class=\"string\">'assign'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加了自己的行为，同时使用 Reflect 的相应静态方法执行默认行为</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> loggedObj = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">  get(target, name) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'get'</span>, target, name);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(target, name);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  deleteProperty(target, name) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'delete'</span> + name);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.deleteProperty(target, name);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  has(target, name) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'has'</span> + name);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.has(target, name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可能有人会对 Reflect 的存在感到疑惑，我个人认为 Reflect 存在的意义大概有两点，一是对 ES5 中 Object 一些方法的返回值进行修改完善，但是为了兼容性，开拓了一个新的对象来存放这些静态方法。二是为了让 Proxy 可以方便地在拦截器中添加处理方法的同时调用默认处理方法，所以 Reflect 中存在的静态方法都跟 Proxy 中的方法一一对应，同时修改了部分 Object 中的方法的返回值，例如 Object 中一些调用失败的方法会抛出错误，而在 Reflect 中修改为返回布尔值，以上是一点点见解，可以参考一下：<a href=\"https://tc39.github.io/ecma262/#sec-reflect-object\">https://tc39.github.io/ecma262/#sec-reflect-object</a></p>\n<p>以上实例代码大部分来自阮一峰老师的 《ECMAScript 6 入门》 一书<br>书籍在线阅读地址: <a href=\"http://es6.ruanyifeng.com/#README\">http://es6.ruanyifeng.com/#README</a></p>\n</blockquote>\n"},{"title":"ES6 学习笔记（六）","date":"2016-04-23T14:13:41.000Z","_content":"\n# Iterator\n> Iterator的作用有三个：一是为各种数据结构，提供一个统一的、简便的访问接口；二是使得数据结构的成员能够按某种次序排列；三是ES6创造了一种新的遍历命令for...of循环，Iterator接口主要供for...of消费\n\n## 部署 Iterator 接口\n数组、Map、Set、类数组都有部署 Iterator 的接口，但是对象并没有，下面展示如何为对象部署 Iterator 接口\n\n```JavaScript\n\n// 第一种\nclass RangeIterator {\n  constructor(start, stop) {\n    this.value = start;\n    this.stop = stop;\n  }\n\n  // Symbol.Iterator 即部署接口\n  [Symbol.iterator]() { return this; }\n\n  // next() 代表迭代器的指针运动逻辑\n  // value 默认是当前值\n  // done 表示当前值是否为末尾，布尔值\n  next() {\n    var value = this.value;\n    if (value < this.stop) {\n      this.value++;\n      return {done: false, value: value};\n    } else {\n      return {done: true, value: undefined};\n    }\n  }\n}\n\nfunction range(start, stop) {\n  return new RangeIterator(start, stop);\n}\n\nfor (var value of range(0, 3)) {\n  console.log(value);\n}\n\n// 第二种\nfunction Obj(value){\n  this.value = value;\n  this.next = null;\n}\n\nObj.prototype[Symbol.iterator] = function(){\n\n  var iterator = {\n    next: next\n  };\n\n  var current = this;\n\n  function next(){\n    if (current){\n      var value = current.value;\n      var done = current === null;\n      current = current.next;\n      return {\n        done: done,\n        value: value\n      }\n    } else {\n      return {\n        done: true\n      }\n    }\n  }\n  return iterator;\n}\n\nvar one = new Obj(1);\nvar two = new Obj(2);\nvar three = new Obj(3);\n\none.next = two;\ntwo.next = three;\n\nfor (var i of one){\n  console.log(i)\n}\n// 1\n// 2\n// 3\n\n// 第三种\nlet obj = {\n  data: [ 'hello', 'world' ],\n  [Symbol.iterator]() {\n    const self = this;\n    let index = 0;\n    return {\n      next() {\n        if (index < self.data.length) {\n          return {\n            value: self.data[index++],\n            done: false\n          };\n        } else {\n          return { value: undefined, done: true };\n        }\n      }\n    };\n  }\n};\n```\n上面的三个例子都有一个共同点，就是部署 Iterator 接口都是在对象的 `Symbol.iterator` 属性中返回一个对象，而该对象包含一个 `next()` 函数指明指针的运动逻辑，并返回 `value` 和 `done` 两个值。还有另外一个 `return()` 方法用于在中断遍历时的操作，必须返回一个对象。此外，也可以直接使用数组的 Iterator 作为对象的迭代器\n\n```JavaScript\nlet iterable = {\n  0: 'a',\n  1: 'b',\n  2: 'c',\n  length: 3,\n  [Symbol.iterator]: Array.prototype[Symbol.iterator]\n};\nfor (let item of iterable) {\n  console.log(item); // 'a', 'b', 'c'\n}\n```\n\n注意，如果 `Symbol.iterator` 属性返回并不是一个迭代器的标准对象，那么会报错\n\n```JavaScript\nvar obj = {};\n\nobj[Symbol.iterator] = () => 1;\n\n[...obj] // TypeError: [] is not a function\n```\n\n## Iterator 的使用场景\n\n### 解构赋值\n> 对数组的解构赋值默认会调用 `Symbol.iterator` 方法\n\n```JavaScript\nlet set = new Set().add('a').add('b').add('c');\n\nlet [x,y] = set;\n// x='a'; y='b'\n\nlet [first, ...rest] = set;\n// first='a'; rest=['b','c'];\n```\n\n### 扩展运算符\n\n```JavaScript\nvar str = 'hello';\n[...str] //  ['h','e','l','l','o']\n\n// 例二\nlet arr = ['b', 'c'];\n['a', ...arr, 'd']\n// ['a', 'b', 'c', 'd']\n```\n\n### yield*\n> 这个还没学到，不予评论，后面学到了再填坑\n\n### 其他场景\n* for...of\n* Array.from()\n* Map(), Set(), WeakMap(), WeakSet()（比如new Map([['a',1],['b',2]])）\n* Promise.all()\n* Promise.race()\n* 字符串也部署了 Iterator 接口\n\n\n# for…of\n\n* for…of 遍历数组，key 值保持为数字，而 for…in 会把 key 值变为字符串\n* for…of 可以 break 或 return，而 forEach() 不可以\n* for…of 可以正确识别 32 位 UTF-16 字符\n\n> 以上实例代码大部分来自阮一峰老师的 《ECMAScript 6 入门》 一书\n> 书籍在线阅读地址: http://es6.ruanyifeng.com/#README\n","source":"_posts/ES6-学习笔记（六）.md","raw":"---\ntitle: ES6 学习笔记（六）\ndate: 2016-04-23 22:13:41\ncategories:\n    - 前端\n    - ECMAScript 6\ntags: Javascript\n---\n\n# Iterator\n> Iterator的作用有三个：一是为各种数据结构，提供一个统一的、简便的访问接口；二是使得数据结构的成员能够按某种次序排列；三是ES6创造了一种新的遍历命令for...of循环，Iterator接口主要供for...of消费\n\n## 部署 Iterator 接口\n数组、Map、Set、类数组都有部署 Iterator 的接口，但是对象并没有，下面展示如何为对象部署 Iterator 接口\n\n```JavaScript\n\n// 第一种\nclass RangeIterator {\n  constructor(start, stop) {\n    this.value = start;\n    this.stop = stop;\n  }\n\n  // Symbol.Iterator 即部署接口\n  [Symbol.iterator]() { return this; }\n\n  // next() 代表迭代器的指针运动逻辑\n  // value 默认是当前值\n  // done 表示当前值是否为末尾，布尔值\n  next() {\n    var value = this.value;\n    if (value < this.stop) {\n      this.value++;\n      return {done: false, value: value};\n    } else {\n      return {done: true, value: undefined};\n    }\n  }\n}\n\nfunction range(start, stop) {\n  return new RangeIterator(start, stop);\n}\n\nfor (var value of range(0, 3)) {\n  console.log(value);\n}\n\n// 第二种\nfunction Obj(value){\n  this.value = value;\n  this.next = null;\n}\n\nObj.prototype[Symbol.iterator] = function(){\n\n  var iterator = {\n    next: next\n  };\n\n  var current = this;\n\n  function next(){\n    if (current){\n      var value = current.value;\n      var done = current === null;\n      current = current.next;\n      return {\n        done: done,\n        value: value\n      }\n    } else {\n      return {\n        done: true\n      }\n    }\n  }\n  return iterator;\n}\n\nvar one = new Obj(1);\nvar two = new Obj(2);\nvar three = new Obj(3);\n\none.next = two;\ntwo.next = three;\n\nfor (var i of one){\n  console.log(i)\n}\n// 1\n// 2\n// 3\n\n// 第三种\nlet obj = {\n  data: [ 'hello', 'world' ],\n  [Symbol.iterator]() {\n    const self = this;\n    let index = 0;\n    return {\n      next() {\n        if (index < self.data.length) {\n          return {\n            value: self.data[index++],\n            done: false\n          };\n        } else {\n          return { value: undefined, done: true };\n        }\n      }\n    };\n  }\n};\n```\n上面的三个例子都有一个共同点，就是部署 Iterator 接口都是在对象的 `Symbol.iterator` 属性中返回一个对象，而该对象包含一个 `next()` 函数指明指针的运动逻辑，并返回 `value` 和 `done` 两个值。还有另外一个 `return()` 方法用于在中断遍历时的操作，必须返回一个对象。此外，也可以直接使用数组的 Iterator 作为对象的迭代器\n\n```JavaScript\nlet iterable = {\n  0: 'a',\n  1: 'b',\n  2: 'c',\n  length: 3,\n  [Symbol.iterator]: Array.prototype[Symbol.iterator]\n};\nfor (let item of iterable) {\n  console.log(item); // 'a', 'b', 'c'\n}\n```\n\n注意，如果 `Symbol.iterator` 属性返回并不是一个迭代器的标准对象，那么会报错\n\n```JavaScript\nvar obj = {};\n\nobj[Symbol.iterator] = () => 1;\n\n[...obj] // TypeError: [] is not a function\n```\n\n## Iterator 的使用场景\n\n### 解构赋值\n> 对数组的解构赋值默认会调用 `Symbol.iterator` 方法\n\n```JavaScript\nlet set = new Set().add('a').add('b').add('c');\n\nlet [x,y] = set;\n// x='a'; y='b'\n\nlet [first, ...rest] = set;\n// first='a'; rest=['b','c'];\n```\n\n### 扩展运算符\n\n```JavaScript\nvar str = 'hello';\n[...str] //  ['h','e','l','l','o']\n\n// 例二\nlet arr = ['b', 'c'];\n['a', ...arr, 'd']\n// ['a', 'b', 'c', 'd']\n```\n\n### yield*\n> 这个还没学到，不予评论，后面学到了再填坑\n\n### 其他场景\n* for...of\n* Array.from()\n* Map(), Set(), WeakMap(), WeakSet()（比如new Map([['a',1],['b',2]])）\n* Promise.all()\n* Promise.race()\n* 字符串也部署了 Iterator 接口\n\n\n# for…of\n\n* for…of 遍历数组，key 值保持为数字，而 for…in 会把 key 值变为字符串\n* for…of 可以 break 或 return，而 forEach() 不可以\n* for…of 可以正确识别 32 位 UTF-16 字符\n\n> 以上实例代码大部分来自阮一峰老师的 《ECMAScript 6 入门》 一书\n> 书籍在线阅读地址: http://es6.ruanyifeng.com/#README\n","slug":"ES6-学习笔记（六）","published":1,"updated":"2016-04-23T15:04:09.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqggs7ki000wikvdoseocje2","content":"<h1 id=\"Iterator\"><a href=\"#Iterator\" class=\"headerlink\" title=\"Iterator\"></a>Iterator</h1><blockquote>\n<p>Iterator的作用有三个：一是为各种数据结构，提供一个统一的、简便的访问接口；二是使得数据结构的成员能够按某种次序排列；三是ES6创造了一种新的遍历命令for…of循环，Iterator接口主要供for…of消费</p>\n</blockquote>\n<h2 id=\"部署-Iterator-接口\"><a href=\"#部署-Iterator-接口\" class=\"headerlink\" title=\"部署 Iterator 接口\"></a>部署 Iterator 接口</h2><p>数组、Map、Set、类数组都有部署 Iterator 的接口，但是对象并没有，下面展示如何为对象部署 Iterator 接口</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一种</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RangeIterator</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(start, stop) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = start;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.stop = stop;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Symbol.Iterator 即部署接口</span></span><br><span class=\"line\">  [<span class=\"built_in\">Symbol</span>.iterator]() &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// next() 代表迭代器的指针运动逻辑</span></span><br><span class=\"line\">  <span class=\"comment\">// value 默认是当前值</span></span><br><span class=\"line\">  <span class=\"comment\">// done 表示当前值是否为末尾，布尔值</span></span><br><span class=\"line\">  next() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value = <span class=\"keyword\">this</span>.value;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value &lt; <span class=\"keyword\">this</span>.stop) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.value++;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;done: <span class=\"literal\">false</span>, value: value&#125;;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;done: <span class=\"literal\">true</span>, value: <span class=\"literal\">undefined</span>&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">range</span>(<span class=\"params\">start, stop</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RangeIterator(start, stop);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> value <span class=\"keyword\">of</span> range(<span class=\"number\">0</span>, <span class=\"number\">3</span>)) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二种</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Obj</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Obj.prototype[<span class=\"built_in\">Symbol</span>.iterator] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> iterator = &#123;</span><br><span class=\"line\">    next: next</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> current = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = current.value;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> done = current === <span class=\"literal\">null</span>;</span><br><span class=\"line\">      current = current.next;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        done: done,</span><br><span class=\"line\">        value: value</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        done: <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> iterator;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> one = <span class=\"keyword\">new</span> Obj(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> two = <span class=\"keyword\">new</span> Obj(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> three = <span class=\"keyword\">new</span> Obj(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">one.next = two;</span><br><span class=\"line\">two.next = three;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">of</span> one)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第三种</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  data: [ <span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span> ],</span><br><span class=\"line\">  [<span class=\"built_in\">Symbol</span>.iterator]() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      next() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; self.data.length) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            value: self.data[index++],</span><br><span class=\"line\">            done: <span class=\"literal\">false</span></span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> &#123; value: <span class=\"literal\">undefined</span>, done: <span class=\"literal\">true</span> &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>上面的三个例子都有一个共同点，就是部署 Iterator 接口都是在对象的 <code>Symbol.iterator</code> 属性中返回一个对象，而该对象包含一个 <code>next()</code> 函数指明指针的运动逻辑，并返回 <code>value</code> 和 <code>done</code> 两个值。还有另外一个 <code>return()</code> 方法用于在中断遍历时的操作，必须返回一个对象。此外，也可以直接使用数组的 Iterator 作为对象的迭代器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> iterable = &#123;</span><br><span class=\"line\">  <span class=\"number\">0</span>: <span class=\"string\">'a'</span>,</span><br><span class=\"line\">  <span class=\"number\">1</span>: <span class=\"string\">'b'</span>,</span><br><span class=\"line\">  <span class=\"number\">2</span>: <span class=\"string\">'c'</span>,</span><br><span class=\"line\">  length: <span class=\"number\">3</span>,</span><br><span class=\"line\">  [<span class=\"built_in\">Symbol</span>.iterator]: <span class=\"built_in\">Array</span>.prototype[<span class=\"built_in\">Symbol</span>.iterator]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> iterable) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(item); <span class=\"comment\">// 'a', 'b', 'c'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，如果 <code>Symbol.iterator</code> 属性返回并不是一个迭代器的标准对象，那么会报错</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj[<span class=\"built_in\">Symbol</span>.iterator] = () =&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">[...obj] <span class=\"comment\">// TypeError: [] is not a function</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Iterator-的使用场景\"><a href=\"#Iterator-的使用场景\" class=\"headerlink\" title=\"Iterator 的使用场景\"></a>Iterator 的使用场景</h2><h3 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h3><blockquote>\n<p>对数组的解构赋值默认会调用 <code>Symbol.iterator</code> 方法</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>().add(<span class=\"string\">'a'</span>).add(<span class=\"string\">'b'</span>).add(<span class=\"string\">'c'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x,y] = set;</span><br><span class=\"line\"><span class=\"comment\">// x='a'; y='b'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [first, ...rest] = set;</span><br><span class=\"line\"><span class=\"comment\">// first='a'; rest=['b','c'];</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"扩展运算符\"><a href=\"#扩展运算符\" class=\"headerlink\" title=\"扩展运算符\"></a>扩展运算符</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">[...str] <span class=\"comment\">//  ['h','e','l','l','o']</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 例二</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</span><br><span class=\"line\">[<span class=\"string\">'a'</span>, ...arr, <span class=\"string\">'d'</span>]</span><br><span class=\"line\"><span class=\"comment\">// ['a', 'b', 'c', 'd']</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"yield\"><a href=\"#yield\" class=\"headerlink\" title=\"yield*\"></a>yield*</h3><blockquote>\n<p>这个还没学到，不予评论，后面学到了再填坑</p>\n</blockquote>\n<h3 id=\"其他场景\"><a href=\"#其他场景\" class=\"headerlink\" title=\"其他场景\"></a>其他场景</h3><ul>\n<li>for…of</li>\n<li>Array.from()</li>\n<li>Map(), Set(), WeakMap(), WeakSet()（比如new Map([[‘a’,1],[‘b’,2]])）</li>\n<li>Promise.all()</li>\n<li>Promise.race()</li>\n<li>字符串也部署了 Iterator 接口</li>\n</ul>\n<h1 id=\"for…of\"><a href=\"#for…of\" class=\"headerlink\" title=\"for…of\"></a>for…of</h1><ul>\n<li>for…of 遍历数组，key 值保持为数字，而 for…in 会把 key 值变为字符串</li>\n<li>for…of 可以 break 或 return，而 forEach() 不可以</li>\n<li>for…of 可以正确识别 32 位 UTF-16 字符</li>\n</ul>\n<blockquote>\n<p>以上实例代码大部分来自阮一峰老师的 《ECMAScript 6 入门》 一书<br>书籍在线阅读地址: <a href=\"http://es6.ruanyifeng.com/#README\" target=\"_blank\" rel=\"external\">http://es6.ruanyifeng.com/#README</a></p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"Iterator\"><a href=\"#Iterator\" class=\"headerlink\" title=\"Iterator\"></a>Iterator</h1><blockquote>\n<p>Iterator的作用有三个：一是为各种数据结构，提供一个统一的、简便的访问接口；二是使得数据结构的成员能够按某种次序排列；三是ES6创造了一种新的遍历命令for…of循环，Iterator接口主要供for…of消费</p>\n</blockquote>\n<h2 id=\"部署-Iterator-接口\"><a href=\"#部署-Iterator-接口\" class=\"headerlink\" title=\"部署 Iterator 接口\"></a>部署 Iterator 接口</h2><p>数组、Map、Set、类数组都有部署 Iterator 的接口，但是对象并没有，下面展示如何为对象部署 Iterator 接口</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一种</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RangeIterator</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(start, stop) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = start;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.stop = stop;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Symbol.Iterator 即部署接口</span></span><br><span class=\"line\">  [<span class=\"built_in\">Symbol</span>.iterator]() &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// next() 代表迭代器的指针运动逻辑</span></span><br><span class=\"line\">  <span class=\"comment\">// value 默认是当前值</span></span><br><span class=\"line\">  <span class=\"comment\">// done 表示当前值是否为末尾，布尔值</span></span><br><span class=\"line\">  next() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value = <span class=\"keyword\">this</span>.value;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value &lt; <span class=\"keyword\">this</span>.stop) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.value++;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;done: <span class=\"literal\">false</span>, value: value&#125;;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;done: <span class=\"literal\">true</span>, value: <span class=\"literal\">undefined</span>&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">range</span>(<span class=\"params\">start, stop</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RangeIterator(start, stop);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> value <span class=\"keyword\">of</span> range(<span class=\"number\">0</span>, <span class=\"number\">3</span>)) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二种</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Obj</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Obj.prototype[<span class=\"built_in\">Symbol</span>.iterator] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> iterator = &#123;</span><br><span class=\"line\">    next: next</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> current = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = current.value;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> done = current === <span class=\"literal\">null</span>;</span><br><span class=\"line\">      current = current.next;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        done: done,</span><br><span class=\"line\">        value: value</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        done: <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> iterator;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> one = <span class=\"keyword\">new</span> Obj(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> two = <span class=\"keyword\">new</span> Obj(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> three = <span class=\"keyword\">new</span> Obj(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">one.next = two;</span><br><span class=\"line\">two.next = three;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">of</span> one)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第三种</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  data: [ <span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span> ],</span><br><span class=\"line\">  [<span class=\"built_in\">Symbol</span>.iterator]() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      next() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; self.data.length) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            value: self.data[index++],</span><br><span class=\"line\">            done: <span class=\"literal\">false</span></span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> &#123; value: <span class=\"literal\">undefined</span>, done: <span class=\"literal\">true</span> &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>上面的三个例子都有一个共同点，就是部署 Iterator 接口都是在对象的 <code>Symbol.iterator</code> 属性中返回一个对象，而该对象包含一个 <code>next()</code> 函数指明指针的运动逻辑，并返回 <code>value</code> 和 <code>done</code> 两个值。还有另外一个 <code>return()</code> 方法用于在中断遍历时的操作，必须返回一个对象。此外，也可以直接使用数组的 Iterator 作为对象的迭代器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> iterable = &#123;</span><br><span class=\"line\">  <span class=\"number\">0</span>: <span class=\"string\">'a'</span>,</span><br><span class=\"line\">  <span class=\"number\">1</span>: <span class=\"string\">'b'</span>,</span><br><span class=\"line\">  <span class=\"number\">2</span>: <span class=\"string\">'c'</span>,</span><br><span class=\"line\">  length: <span class=\"number\">3</span>,</span><br><span class=\"line\">  [<span class=\"built_in\">Symbol</span>.iterator]: <span class=\"built_in\">Array</span>.prototype[<span class=\"built_in\">Symbol</span>.iterator]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> iterable) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(item); <span class=\"comment\">// 'a', 'b', 'c'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，如果 <code>Symbol.iterator</code> 属性返回并不是一个迭代器的标准对象，那么会报错</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj[<span class=\"built_in\">Symbol</span>.iterator] = () =&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">[...obj] <span class=\"comment\">// TypeError: [] is not a function</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Iterator-的使用场景\"><a href=\"#Iterator-的使用场景\" class=\"headerlink\" title=\"Iterator 的使用场景\"></a>Iterator 的使用场景</h2><h3 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h3><blockquote>\n<p>对数组的解构赋值默认会调用 <code>Symbol.iterator</code> 方法</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>().add(<span class=\"string\">'a'</span>).add(<span class=\"string\">'b'</span>).add(<span class=\"string\">'c'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x,y] = set;</span><br><span class=\"line\"><span class=\"comment\">// x='a'; y='b'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [first, ...rest] = set;</span><br><span class=\"line\"><span class=\"comment\">// first='a'; rest=['b','c'];</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"扩展运算符\"><a href=\"#扩展运算符\" class=\"headerlink\" title=\"扩展运算符\"></a>扩展运算符</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">[...str] <span class=\"comment\">//  ['h','e','l','l','o']</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 例二</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</span><br><span class=\"line\">[<span class=\"string\">'a'</span>, ...arr, <span class=\"string\">'d'</span>]</span><br><span class=\"line\"><span class=\"comment\">// ['a', 'b', 'c', 'd']</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"yield\"><a href=\"#yield\" class=\"headerlink\" title=\"yield*\"></a>yield*</h3><blockquote>\n<p>这个还没学到，不予评论，后面学到了再填坑</p>\n</blockquote>\n<h3 id=\"其他场景\"><a href=\"#其他场景\" class=\"headerlink\" title=\"其他场景\"></a>其他场景</h3><ul>\n<li>for…of</li>\n<li>Array.from()</li>\n<li>Map(), Set(), WeakMap(), WeakSet()（比如new Map([[‘a’,1],[‘b’,2]])）</li>\n<li>Promise.all()</li>\n<li>Promise.race()</li>\n<li>字符串也部署了 Iterator 接口</li>\n</ul>\n<h1 id=\"for…of\"><a href=\"#for…of\" class=\"headerlink\" title=\"for…of\"></a>for…of</h1><ul>\n<li>for…of 遍历数组，key 值保持为数字，而 for…in 会把 key 值变为字符串</li>\n<li>for…of 可以 break 或 return，而 forEach() 不可以</li>\n<li>for…of 可以正确识别 32 位 UTF-16 字符</li>\n</ul>\n<blockquote>\n<p>以上实例代码大部分来自阮一峰老师的 《ECMAScript 6 入门》 一书<br>书籍在线阅读地址: <a href=\"http://es6.ruanyifeng.com/#README\">http://es6.ruanyifeng.com/#README</a></p>\n</blockquote>\n"},{"title":"ES6 学习笔记（四）","date":"2016-04-20T01:26:29.000Z","_content":"\n# 二进制数组\n> 二进制数组不是数组，只是类数组，二进制数组用于直接操作内存\n\n## ArrayBuffer(long)\n> `ArrayBuffer` 用于创建一段连续的内存地址，`long` 表示内存的长度（字节），但是不可以直接读写，只能通过 `视图` 读写，例如 `TypeArray`，`ArrayBuffer` 每个内存地址默认值都为 0。不同 `TypeArray` 操作同一组内存会互相影响\n\n```JavaScript\nvar buf = new ArrayBuffer(32);\nvar dataView = new DataView(buf);\ndataView.getUint8(0) // 0\n\n// 操作同一组内存\nvar buffer = new ArrayBuffer(12);\n\nvar x1 = new Int32Array(buffer);\nx1[0] = 1;\nvar x2 = new Uint8Array(buffer);\nx2[0]  = 2;\n\nx1[0] // 2\n```\n\n### Array.prototype.byteLength\n> 获取分配的内存字节长度\n\n```JavaScript\nvar buffer = new ArrayBuffer(32);\nbuffer.byteLength\n// 32\n\nif(buffer.byteLength) {\n    // success\n}else {\n    // error\n    // 分配的内存空间太大，可能存在没有那么大的内存空间而失败的情况\n}\n```\n\n### Array.prototype.slice(start, end)\n> 生成一段新的内存，拷贝 start 到 end-1 位置的内容到新的内存\n\n```JavaScript\nvar buffer = new ArrayBuffer(8);\nvar newBuffer = buffer.slice(0, 3);\n```\n\n### ArrayBuffer.isView(buffer)\n> 判断 buffer 是否是视图的实例化对象，该方法为 ArrayBuffer 的静态方法，直接调用\n\n```JavaScript\nvar buffer = new ArrayBuffer(8);\nArrayBuffer.isView(buffer) // false\n\nvar v = new Int32Array(buffer);\nArrayBuffer.isView(v) // true\n```\n\n# TypeArray\n> `TypeArray` 不是一个构造函数，而是一组构造函数，它包含 9 个不同的视图构造函数，都是类数组，都能用下标访问，都有 length 属性\n\n* Int8Array：8位有符号整数，长度1个字节。\n* Uint8Array：8位无符号整数，长度1个字节。\n* Uint8ClampedArray：8位无符号整数，长度1个字节，溢出处理不同。\n* Int16Array：16位有符号整数，长度2个字节。\n* Uint16Array：16位无符号整数，长度2个字节。\n* Int32Array：32位有符号整数，长度4个字节。\n* Uint32Array：32位无符号整数，长度4个字节。\n* Float32Array：32位浮点数，长度4个字节。\n* Float64Array：64位浮点数，长度8个字节。\n\n## TypedArray(buffer [, byteOffset [, length]])\n> TypeArray 的构造函数可以传入三个参数\n\n* 第一个参数，ArrayBuffer 的实例对象，必选\n* 第二个参数，从 ArrayBuffer 的第 byteOffset 个字节开始读取，默认从 0 开始，注意，如果是 16 位的视图，需要是 2 的倍数，如果是 32 位 的视图，需要是 4 的倍数，以此类推，因为例如是 32 位的视图，那么该视图中 4 个字节为一个下标，为了完整读取内存，必须是每一个下标字节大小的整数倍，可选\n* 第三个参数，读取 ArrayBuffer 的 length 个字节，默认读取到末尾，可选\n\n```JavaScript\n// 创建一个8字节的ArrayBuffer\nvar b = new ArrayBuffer(8);\n\n// 创建一个指向b的Int32视图，开始于字节0，直到缓冲区的末尾\nvar v1 = new Int32Array(b);\n\n// 创建一个指向b的Uint8视图，开始于字节2，直到缓冲区的末尾\nvar v2 = new Uint8Array(b, 2);\n\n// 创建一个指向b的Int16视图，开始于字节2，长度为2\nvar v3 = new Int16Array(b, 2, 2);\n```\n\n## TypeArray(length)\n> TypeArray 的构造函数还能直接通过分配内存创建视图\n\n```JavaScript\nvar f64a = new Float64Array(8);\nf64a[0] = 10;\nf64a[1] = 20;\nf64a[2] = f64a[0] + f64a[1];\n```\n\n## TypeArray(typedArray)\n> TypeArray 的构造函数能接受另外一个 TypeArray 的实例作为构造参数，新的实例是开辟了新的内存地址同时复制了相同的值，不会互相影响\n\n```JavaScript\nvar x = new Int8Array([1, 1]);\nvar y = new Int8Array(x);\nx[0] // 1\ny[0] // 1\n\nx[0] = 2;\ny[0] // 1\n```\n\n## TypedArray(arrayLikeObject)\n> TypeArray 的构造函数能接受一个类数组的参数，会开辟一段新的内存实例化视图\n\n```JavaScript\nvar x = new Int8Array([1, 1]);\nvar y = new Int8Array(x.buffer);\nx[0] // 1\ny[0] // 1\n\nx[0] = 2;\ny[0] // 2\n```\n\n## 数组方法\n> 普通数组的方法对 TypeArray 也完全适用\n\n```JavaScript\n// 缺少 contact 方法\nTypedArray.prototype.copyWithin(target, start[, end = this.length])\nTypedArray.prototype.entries()\nTypedArray.prototype.every(callbackfn, thisArg?)\nTypedArray.prototype.fill(value, start=0, end=this.length)\nTypedArray.prototype.filter(callbackfn, thisArg?)\nTypedArray.prototype.find(predicate, thisArg?)\nTypedArray.prototype.findIndex(predicate, thisArg?)\nTypedArray.prototype.forEach(callbackfn, thisArg?)\nTypedArray.prototype.indexOf(searchElement, fromIndex=0)\nTypedArray.prototype.join(separator)\nTypedArray.prototype.keys()\nTypedArray.prototype.lastIndexOf(searchElement, fromIndex?)\nTypedArray.prototype.map(callbackfn, thisArg?)\nTypedArray.prototype.reduce(callbackfn, initialValue?)\nTypedArray.prototype.reduceRight(callbackfn, initialValue?)\nTypedArray.prototype.reverse()\nTypedArray.prototype.slice(start=0, end=this.length)\nTypedArray.prototype.some(callbackfn, thisArg?)\nTypedArray.prototype.sort(comparefn)\nTypedArray.prototype.toLocaleString(reserved1?, reserved2?)\nTypedArray.prototype.toString()\nTypedArray.prototype.values()\n```\n\n## 小端字节序\n> 如果使用一个 32 位的视图读取并修改一段内存后，再使用一个 16 位的视图读取该段内存缓冲时，其长度应该是 32 位视图的两倍，这时候 16 位视图中的数据存放就会出现一个现象，跟字节排放的规则相关，看示例\n\n```JavaScript\nvar buffer = new ArrayBuffer(16);\nvar int32View = new Int32Array(buffer);\n\nfor (var i = 0; i < int32View.length; i++) {\n  int32View[i] = i * 2;\n}\n\nconsole.log(int32View); // [0, 2, 4, 6]\n\nvar int16View = new Int16Array(buffer);\n\nconsole.log(int16View); // [0, 0, 2, 0, 4, 0, 6, 0]\n```\n\n由于 32 位视图是 4 个字节存放一个数据，16 位视图是 2 个字节存放一个数据，那么 16 位视图明显要使用 2 个数据位来存放一个 32 位视图的数据，而之所以 16 位视图都是两个数据位的第一个数据位显示为正确数据，第二个显示为 0，这就涉及现代计算机都采用了小端字节序的规则在内存中存放数据的原因，而 TypeArray 也是采用该种策略。小端字节序简略地说就是从后往前一个字节一个字节地存放数据到内存的每个地址中，更详细的解释可以参考：http://blog.csdn.net/ce123/article/details/6971544 小端字节序也导致了 TypeArray 无法正确读取大端字节序的内容\n\n## TypeArray.prototype.BYTES_PER_ELEMENT\n> 用于输出每一个 TypeArray 类型视图的每一位所占的字节数\n\n```JavaScript\nInt8Array.BYTES_PER_ELEMENT // 1\nUint8Array.BYTES_PER_ELEMENT // 1\nInt16Array.BYTES_PER_ELEMENT // 2\nUint16Array.BYTES_PER_ELEMENT // 2\nInt32Array.BYTES_PER_ELEMENT // 4\nUint32Array.BYTES_PER_ELEMENT // 4\nFloat32Array.BYTES_PER_ELEMENT // 4\nFloat64Array.BYTES_PER_ELEMENT // 8\n```\n\n## 溢出\n> TypeArray 对于溢出的处理就是直接抛弃溢出的位\n\n* 正向溢出（overflow）：当输入值大于当前数据类型的最大值，结果等于当前数据类型的最小值加上余值，再减去1\n* 负向溢出（underflow）：当输入值小于当前数据类型的最小值，结果等于当前数据类型的最大值减去余值，再加上1\n\n``` JavaScript\nvar int8 = new Int8Array(1);\n\nint8[0] = 128;\nint8[0] // -128\n\nint8[0] = -129;\nint8[0] // 127\n```\n\n## 其他方法\n\n* TypedArray.prototype.buffer，返回视图整段内存引用\n* TypedArray.prototype.byteLength，返回视图的内存字节长度\n* TypedArray.prototype.byteOffset，返回视图从内存第几个字节开始引用\n* TypedArray.prototype.length，返回视图的成员长度，与其每个成员占用字节数相关\n* TypedArray.prototype.set(typeArray[, startIndex])，将一段内存完全复制到另一端内存中\n* TypedArray.prototype.subarray(startIndex, endIndex)，从一个视图上截取一部分创建为一个新的视图\n* TypedArray.prototype.slice(index)，从一个视图上截取一段创建一个新的视图，index 可以为负数，表示倒数\n* TypedArray.of()，将参数创建为一个新的视图\n* TypedArray.from(arrayLike[, callback])，将 arrayLike 转化为一个相应的可遍历的视图类型，callback 的功能类似于数组的 map 功能\n\n# DataView\n> DataView 可以自行设置大端字节序或者小端字节序，同时有 8 个获取数据的方法和 8 个设置数据的方法\n\n* getInt8：读取1个字节，返回一个8位整数。\n* getUint8：读取1个字节，返回一个无符号的8位整数。\n* getInt16：读取2个字节，返回一个16位整数。\n* getUint16：读取2个字节，返回一个无符号的16位整数。\n* getInt32：读取4个字节，返回一个32位整数。\n* getUint32：读取4个字节，返回一个无符号的32位整数。\n* getFloat32：读取4个字节，返回一个32位浮点数。\n* getFloat64：读取8个字节，返回一个64位浮点数。\n\n这 8 个方法都传入一个正整数表示从第几个字节开始读取，第二个参数为一个布尔值，true 代表使用小端字节序，false 代表使用大端字节序，默认为大端字节序\n\n* setInt8：写入1个字节的8位整数。\n* setUint8：写入1个字节的8位无符号整数。\n* setInt16：写入2个字节的16位整数。\n* setUint16：写入2个字节的16位无符号整数。\n* setInt32：写入4个字节的32位整数。\n* setUint32：写入4个字节的32位无符号整数。\n* setFloat32：写入4个字节的32位浮点数。\n* setFloat64：写入8个字节的64位浮点数。\n\n这 8 个方法都可以传入三个参数，第一个表示从第几个字节写入数据，第二个表示写入数据的内容，第三个指定大小端字节序\n\n# 其他一些新特性\n\n## AJAX\n> AJAX 可以设置 `responseType` 为 `arraybuffer` 明确指定响应数据位二进制数据，如果不明确，可以设置为 `blod`\n\n## Canvas\n> Canvas 使用 `Uint8ClampedArray` 读取二进制像素数据，该 TypeArray 可以自动过滤高位溢出，取值范围始终为 0-255\n\n## WebSocket\n> WebSocket 可以发送二进制数据\n\n## Fetch API\n> Fetch API取回的数据，就是 `ArrayBuffer` 对象\n\n## File API\n> File API 可以将文件数据作为二进制的 `ArrayBuffer` 类型读取处理\n\n> 以上实例代码大部分来自阮一峰老师的 《ECMAScript 6 入门》 一书\n> 书籍在线阅读地址: http://es6.ruanyifeng.com/#README\n","source":"_posts/ES6-学习笔记（四）.md","raw":"---\ntitle: ES6 学习笔记（四）\ndate: 2016-04-20 09:26:29\ncategories:\n    - 前端\n    - ECMAScript 6\ntags: Javascript\n---\n\n# 二进制数组\n> 二进制数组不是数组，只是类数组，二进制数组用于直接操作内存\n\n## ArrayBuffer(long)\n> `ArrayBuffer` 用于创建一段连续的内存地址，`long` 表示内存的长度（字节），但是不可以直接读写，只能通过 `视图` 读写，例如 `TypeArray`，`ArrayBuffer` 每个内存地址默认值都为 0。不同 `TypeArray` 操作同一组内存会互相影响\n\n```JavaScript\nvar buf = new ArrayBuffer(32);\nvar dataView = new DataView(buf);\ndataView.getUint8(0) // 0\n\n// 操作同一组内存\nvar buffer = new ArrayBuffer(12);\n\nvar x1 = new Int32Array(buffer);\nx1[0] = 1;\nvar x2 = new Uint8Array(buffer);\nx2[0]  = 2;\n\nx1[0] // 2\n```\n\n### Array.prototype.byteLength\n> 获取分配的内存字节长度\n\n```JavaScript\nvar buffer = new ArrayBuffer(32);\nbuffer.byteLength\n// 32\n\nif(buffer.byteLength) {\n    // success\n}else {\n    // error\n    // 分配的内存空间太大，可能存在没有那么大的内存空间而失败的情况\n}\n```\n\n### Array.prototype.slice(start, end)\n> 生成一段新的内存，拷贝 start 到 end-1 位置的内容到新的内存\n\n```JavaScript\nvar buffer = new ArrayBuffer(8);\nvar newBuffer = buffer.slice(0, 3);\n```\n\n### ArrayBuffer.isView(buffer)\n> 判断 buffer 是否是视图的实例化对象，该方法为 ArrayBuffer 的静态方法，直接调用\n\n```JavaScript\nvar buffer = new ArrayBuffer(8);\nArrayBuffer.isView(buffer) // false\n\nvar v = new Int32Array(buffer);\nArrayBuffer.isView(v) // true\n```\n\n# TypeArray\n> `TypeArray` 不是一个构造函数，而是一组构造函数，它包含 9 个不同的视图构造函数，都是类数组，都能用下标访问，都有 length 属性\n\n* Int8Array：8位有符号整数，长度1个字节。\n* Uint8Array：8位无符号整数，长度1个字节。\n* Uint8ClampedArray：8位无符号整数，长度1个字节，溢出处理不同。\n* Int16Array：16位有符号整数，长度2个字节。\n* Uint16Array：16位无符号整数，长度2个字节。\n* Int32Array：32位有符号整数，长度4个字节。\n* Uint32Array：32位无符号整数，长度4个字节。\n* Float32Array：32位浮点数，长度4个字节。\n* Float64Array：64位浮点数，长度8个字节。\n\n## TypedArray(buffer [, byteOffset [, length]])\n> TypeArray 的构造函数可以传入三个参数\n\n* 第一个参数，ArrayBuffer 的实例对象，必选\n* 第二个参数，从 ArrayBuffer 的第 byteOffset 个字节开始读取，默认从 0 开始，注意，如果是 16 位的视图，需要是 2 的倍数，如果是 32 位 的视图，需要是 4 的倍数，以此类推，因为例如是 32 位的视图，那么该视图中 4 个字节为一个下标，为了完整读取内存，必须是每一个下标字节大小的整数倍，可选\n* 第三个参数，读取 ArrayBuffer 的 length 个字节，默认读取到末尾，可选\n\n```JavaScript\n// 创建一个8字节的ArrayBuffer\nvar b = new ArrayBuffer(8);\n\n// 创建一个指向b的Int32视图，开始于字节0，直到缓冲区的末尾\nvar v1 = new Int32Array(b);\n\n// 创建一个指向b的Uint8视图，开始于字节2，直到缓冲区的末尾\nvar v2 = new Uint8Array(b, 2);\n\n// 创建一个指向b的Int16视图，开始于字节2，长度为2\nvar v3 = new Int16Array(b, 2, 2);\n```\n\n## TypeArray(length)\n> TypeArray 的构造函数还能直接通过分配内存创建视图\n\n```JavaScript\nvar f64a = new Float64Array(8);\nf64a[0] = 10;\nf64a[1] = 20;\nf64a[2] = f64a[0] + f64a[1];\n```\n\n## TypeArray(typedArray)\n> TypeArray 的构造函数能接受另外一个 TypeArray 的实例作为构造参数，新的实例是开辟了新的内存地址同时复制了相同的值，不会互相影响\n\n```JavaScript\nvar x = new Int8Array([1, 1]);\nvar y = new Int8Array(x);\nx[0] // 1\ny[0] // 1\n\nx[0] = 2;\ny[0] // 1\n```\n\n## TypedArray(arrayLikeObject)\n> TypeArray 的构造函数能接受一个类数组的参数，会开辟一段新的内存实例化视图\n\n```JavaScript\nvar x = new Int8Array([1, 1]);\nvar y = new Int8Array(x.buffer);\nx[0] // 1\ny[0] // 1\n\nx[0] = 2;\ny[0] // 2\n```\n\n## 数组方法\n> 普通数组的方法对 TypeArray 也完全适用\n\n```JavaScript\n// 缺少 contact 方法\nTypedArray.prototype.copyWithin(target, start[, end = this.length])\nTypedArray.prototype.entries()\nTypedArray.prototype.every(callbackfn, thisArg?)\nTypedArray.prototype.fill(value, start=0, end=this.length)\nTypedArray.prototype.filter(callbackfn, thisArg?)\nTypedArray.prototype.find(predicate, thisArg?)\nTypedArray.prototype.findIndex(predicate, thisArg?)\nTypedArray.prototype.forEach(callbackfn, thisArg?)\nTypedArray.prototype.indexOf(searchElement, fromIndex=0)\nTypedArray.prototype.join(separator)\nTypedArray.prototype.keys()\nTypedArray.prototype.lastIndexOf(searchElement, fromIndex?)\nTypedArray.prototype.map(callbackfn, thisArg?)\nTypedArray.prototype.reduce(callbackfn, initialValue?)\nTypedArray.prototype.reduceRight(callbackfn, initialValue?)\nTypedArray.prototype.reverse()\nTypedArray.prototype.slice(start=0, end=this.length)\nTypedArray.prototype.some(callbackfn, thisArg?)\nTypedArray.prototype.sort(comparefn)\nTypedArray.prototype.toLocaleString(reserved1?, reserved2?)\nTypedArray.prototype.toString()\nTypedArray.prototype.values()\n```\n\n## 小端字节序\n> 如果使用一个 32 位的视图读取并修改一段内存后，再使用一个 16 位的视图读取该段内存缓冲时，其长度应该是 32 位视图的两倍，这时候 16 位视图中的数据存放就会出现一个现象，跟字节排放的规则相关，看示例\n\n```JavaScript\nvar buffer = new ArrayBuffer(16);\nvar int32View = new Int32Array(buffer);\n\nfor (var i = 0; i < int32View.length; i++) {\n  int32View[i] = i * 2;\n}\n\nconsole.log(int32View); // [0, 2, 4, 6]\n\nvar int16View = new Int16Array(buffer);\n\nconsole.log(int16View); // [0, 0, 2, 0, 4, 0, 6, 0]\n```\n\n由于 32 位视图是 4 个字节存放一个数据，16 位视图是 2 个字节存放一个数据，那么 16 位视图明显要使用 2 个数据位来存放一个 32 位视图的数据，而之所以 16 位视图都是两个数据位的第一个数据位显示为正确数据，第二个显示为 0，这就涉及现代计算机都采用了小端字节序的规则在内存中存放数据的原因，而 TypeArray 也是采用该种策略。小端字节序简略地说就是从后往前一个字节一个字节地存放数据到内存的每个地址中，更详细的解释可以参考：http://blog.csdn.net/ce123/article/details/6971544 小端字节序也导致了 TypeArray 无法正确读取大端字节序的内容\n\n## TypeArray.prototype.BYTES_PER_ELEMENT\n> 用于输出每一个 TypeArray 类型视图的每一位所占的字节数\n\n```JavaScript\nInt8Array.BYTES_PER_ELEMENT // 1\nUint8Array.BYTES_PER_ELEMENT // 1\nInt16Array.BYTES_PER_ELEMENT // 2\nUint16Array.BYTES_PER_ELEMENT // 2\nInt32Array.BYTES_PER_ELEMENT // 4\nUint32Array.BYTES_PER_ELEMENT // 4\nFloat32Array.BYTES_PER_ELEMENT // 4\nFloat64Array.BYTES_PER_ELEMENT // 8\n```\n\n## 溢出\n> TypeArray 对于溢出的处理就是直接抛弃溢出的位\n\n* 正向溢出（overflow）：当输入值大于当前数据类型的最大值，结果等于当前数据类型的最小值加上余值，再减去1\n* 负向溢出（underflow）：当输入值小于当前数据类型的最小值，结果等于当前数据类型的最大值减去余值，再加上1\n\n``` JavaScript\nvar int8 = new Int8Array(1);\n\nint8[0] = 128;\nint8[0] // -128\n\nint8[0] = -129;\nint8[0] // 127\n```\n\n## 其他方法\n\n* TypedArray.prototype.buffer，返回视图整段内存引用\n* TypedArray.prototype.byteLength，返回视图的内存字节长度\n* TypedArray.prototype.byteOffset，返回视图从内存第几个字节开始引用\n* TypedArray.prototype.length，返回视图的成员长度，与其每个成员占用字节数相关\n* TypedArray.prototype.set(typeArray[, startIndex])，将一段内存完全复制到另一端内存中\n* TypedArray.prototype.subarray(startIndex, endIndex)，从一个视图上截取一部分创建为一个新的视图\n* TypedArray.prototype.slice(index)，从一个视图上截取一段创建一个新的视图，index 可以为负数，表示倒数\n* TypedArray.of()，将参数创建为一个新的视图\n* TypedArray.from(arrayLike[, callback])，将 arrayLike 转化为一个相应的可遍历的视图类型，callback 的功能类似于数组的 map 功能\n\n# DataView\n> DataView 可以自行设置大端字节序或者小端字节序，同时有 8 个获取数据的方法和 8 个设置数据的方法\n\n* getInt8：读取1个字节，返回一个8位整数。\n* getUint8：读取1个字节，返回一个无符号的8位整数。\n* getInt16：读取2个字节，返回一个16位整数。\n* getUint16：读取2个字节，返回一个无符号的16位整数。\n* getInt32：读取4个字节，返回一个32位整数。\n* getUint32：读取4个字节，返回一个无符号的32位整数。\n* getFloat32：读取4个字节，返回一个32位浮点数。\n* getFloat64：读取8个字节，返回一个64位浮点数。\n\n这 8 个方法都传入一个正整数表示从第几个字节开始读取，第二个参数为一个布尔值，true 代表使用小端字节序，false 代表使用大端字节序，默认为大端字节序\n\n* setInt8：写入1个字节的8位整数。\n* setUint8：写入1个字节的8位无符号整数。\n* setInt16：写入2个字节的16位整数。\n* setUint16：写入2个字节的16位无符号整数。\n* setInt32：写入4个字节的32位整数。\n* setUint32：写入4个字节的32位无符号整数。\n* setFloat32：写入4个字节的32位浮点数。\n* setFloat64：写入8个字节的64位浮点数。\n\n这 8 个方法都可以传入三个参数，第一个表示从第几个字节写入数据，第二个表示写入数据的内容，第三个指定大小端字节序\n\n# 其他一些新特性\n\n## AJAX\n> AJAX 可以设置 `responseType` 为 `arraybuffer` 明确指定响应数据位二进制数据，如果不明确，可以设置为 `blod`\n\n## Canvas\n> Canvas 使用 `Uint8ClampedArray` 读取二进制像素数据，该 TypeArray 可以自动过滤高位溢出，取值范围始终为 0-255\n\n## WebSocket\n> WebSocket 可以发送二进制数据\n\n## Fetch API\n> Fetch API取回的数据，就是 `ArrayBuffer` 对象\n\n## File API\n> File API 可以将文件数据作为二进制的 `ArrayBuffer` 类型读取处理\n\n> 以上实例代码大部分来自阮一峰老师的 《ECMAScript 6 入门》 一书\n> 书籍在线阅读地址: http://es6.ruanyifeng.com/#README\n","slug":"ES6-学习笔记（四）","published":1,"updated":"2016-04-20T07:09:11.952Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqggs7ki000yikvdvm49jtbi","content":"<h1 id=\"二进制数组\"><a href=\"#二进制数组\" class=\"headerlink\" title=\"二进制数组\"></a>二进制数组</h1><blockquote>\n<p>二进制数组不是数组，只是类数组，二进制数组用于直接操作内存</p>\n</blockquote>\n<h2 id=\"ArrayBuffer-long\"><a href=\"#ArrayBuffer-long\" class=\"headerlink\" title=\"ArrayBuffer(long)\"></a>ArrayBuffer(long)</h2><blockquote>\n<p><code>ArrayBuffer</code> 用于创建一段连续的内存地址，<code>long</code> 表示内存的长度（字节），但是不可以直接读写，只能通过 <code>视图</code> 读写，例如 <code>TypeArray</code>，<code>ArrayBuffer</code> 每个内存地址默认值都为 0。不同 <code>TypeArray</code> 操作同一组内存会互相影响</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayBuffer</span>(<span class=\"number\">32</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> dataView = <span class=\"keyword\">new</span> <span class=\"built_in\">DataView</span>(buf);</span><br><span class=\"line\">dataView.getUint8(<span class=\"number\">0</span>) <span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 操作同一组内存</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> buffer = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayBuffer</span>(<span class=\"number\">12</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Int32Array</span>(buffer);</span><br><span class=\"line\">x1[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> x2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(buffer);</span><br><span class=\"line\">x2[<span class=\"number\">0</span>]  = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">x1[<span class=\"number\">0</span>] <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-prototype-byteLength\"><a href=\"#Array-prototype-byteLength\" class=\"headerlink\" title=\"Array.prototype.byteLength\"></a>Array.prototype.byteLength</h3><blockquote>\n<p>获取分配的内存字节长度</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buffer = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayBuffer</span>(<span class=\"number\">32</span>);</span><br><span class=\"line\">buffer.byteLength</span><br><span class=\"line\"><span class=\"comment\">// 32</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(buffer.byteLength) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// error</span></span><br><span class=\"line\">    <span class=\"comment\">// 分配的内存空间太大，可能存在没有那么大的内存空间而失败的情况</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-prototype-slice-start-end\"><a href=\"#Array-prototype-slice-start-end\" class=\"headerlink\" title=\"Array.prototype.slice(start, end)\"></a>Array.prototype.slice(start, end)</h3><blockquote>\n<p>生成一段新的内存，拷贝 start 到 end-1 位置的内容到新的内存</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buffer = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayBuffer</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> newBuffer = buffer.slice(<span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"ArrayBuffer-isView-buffer\"><a href=\"#ArrayBuffer-isView-buffer\" class=\"headerlink\" title=\"ArrayBuffer.isView(buffer)\"></a>ArrayBuffer.isView(buffer)</h3><blockquote>\n<p>判断 buffer 是否是视图的实例化对象，该方法为 ArrayBuffer 的静态方法，直接调用</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buffer = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayBuffer</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"built_in\">ArrayBuffer</span>.isView(buffer) <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> v = <span class=\"keyword\">new</span> <span class=\"built_in\">Int32Array</span>(buffer);</span><br><span class=\"line\"><span class=\"built_in\">ArrayBuffer</span>.isView(v) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"TypeArray\"><a href=\"#TypeArray\" class=\"headerlink\" title=\"TypeArray\"></a>TypeArray</h1><blockquote>\n<p><code>TypeArray</code> 不是一个构造函数，而是一组构造函数，它包含 9 个不同的视图构造函数，都是类数组，都能用下标访问，都有 length 属性</p>\n</blockquote>\n<ul>\n<li>Int8Array：8位有符号整数，长度1个字节。</li>\n<li>Uint8Array：8位无符号整数，长度1个字节。</li>\n<li>Uint8ClampedArray：8位无符号整数，长度1个字节，溢出处理不同。</li>\n<li>Int16Array：16位有符号整数，长度2个字节。</li>\n<li>Uint16Array：16位无符号整数，长度2个字节。</li>\n<li>Int32Array：32位有符号整数，长度4个字节。</li>\n<li>Uint32Array：32位无符号整数，长度4个字节。</li>\n<li>Float32Array：32位浮点数，长度4个字节。</li>\n<li>Float64Array：64位浮点数，长度8个字节。</li>\n</ul>\n<h2 id=\"TypedArray-buffer-byteOffset-length\"><a href=\"#TypedArray-buffer-byteOffset-length\" class=\"headerlink\" title=\"TypedArray(buffer [, byteOffset [, length]])\"></a>TypedArray(buffer [, byteOffset [, length]])</h2><blockquote>\n<p>TypeArray 的构造函数可以传入三个参数</p>\n</blockquote>\n<ul>\n<li>第一个参数，ArrayBuffer 的实例对象，必选</li>\n<li>第二个参数，从 ArrayBuffer 的第 byteOffset 个字节开始读取，默认从 0 开始，注意，如果是 16 位的视图，需要是 2 的倍数，如果是 32 位 的视图，需要是 4 的倍数，以此类推，因为例如是 32 位的视图，那么该视图中 4 个字节为一个下标，为了完整读取内存，必须是每一个下标字节大小的整数倍，可选</li>\n<li>第三个参数，读取 ArrayBuffer 的 length 个字节，默认读取到末尾，可选</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个8字节的ArrayBuffer</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayBuffer</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个指向b的Int32视图，开始于字节0，直到缓冲区的末尾</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> v1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Int32Array</span>(b);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个指向b的Uint8视图，开始于字节2，直到缓冲区的末尾</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> v2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(b, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个指向b的Int16视图，开始于字节2，长度为2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> v3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Int16Array</span>(b, <span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"TypeArray-length\"><a href=\"#TypeArray-length\" class=\"headerlink\" title=\"TypeArray(length)\"></a>TypeArray(length)</h2><blockquote>\n<p>TypeArray 的构造函数还能直接通过分配内存创建视图</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f64a = <span class=\"keyword\">new</span> <span class=\"built_in\">Float64Array</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\">f64a[<span class=\"number\">0</span>] = <span class=\"number\">10</span>;</span><br><span class=\"line\">f64a[<span class=\"number\">1</span>] = <span class=\"number\">20</span>;</span><br><span class=\"line\">f64a[<span class=\"number\">2</span>] = f64a[<span class=\"number\">0</span>] + f64a[<span class=\"number\">1</span>];</span><br></pre></td></tr></table></figure>\n<h2 id=\"TypeArray-typedArray\"><a href=\"#TypeArray-typedArray\" class=\"headerlink\" title=\"TypeArray(typedArray)\"></a>TypeArray(typedArray)</h2><blockquote>\n<p>TypeArray 的构造函数能接受另外一个 TypeArray 的实例作为构造参数，新的实例是开辟了新的内存地址同时复制了相同的值，不会互相影响</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"keyword\">new</span> <span class=\"built_in\">Int8Array</span>([<span class=\"number\">1</span>, <span class=\"number\">1</span>]);</span><br><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"keyword\">new</span> <span class=\"built_in\">Int8Array</span>(x);</span><br><span class=\"line\">x[<span class=\"number\">0</span>] <span class=\"comment\">// 1</span></span><br><span class=\"line\">y[<span class=\"number\">0</span>] <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">x[<span class=\"number\">0</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">y[<span class=\"number\">0</span>] <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"TypedArray-arrayLikeObject\"><a href=\"#TypedArray-arrayLikeObject\" class=\"headerlink\" title=\"TypedArray(arrayLikeObject)\"></a>TypedArray(arrayLikeObject)</h2><blockquote>\n<p>TypeArray 的构造函数能接受一个类数组的参数，会开辟一段新的内存实例化视图</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"keyword\">new</span> <span class=\"built_in\">Int8Array</span>([<span class=\"number\">1</span>, <span class=\"number\">1</span>]);</span><br><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"keyword\">new</span> <span class=\"built_in\">Int8Array</span>(x.buffer);</span><br><span class=\"line\">x[<span class=\"number\">0</span>] <span class=\"comment\">// 1</span></span><br><span class=\"line\">y[<span class=\"number\">0</span>] <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">x[<span class=\"number\">0</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">y[<span class=\"number\">0</span>] <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数组方法\"><a href=\"#数组方法\" class=\"headerlink\" title=\"数组方法\"></a>数组方法</h2><blockquote>\n<p>普通数组的方法对 TypeArray 也完全适用</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 缺少 contact 方法</span></span><br><span class=\"line\">TypedArray.prototype.copyWithin(target, start[, end = <span class=\"keyword\">this</span>.length])</span><br><span class=\"line\">TypedArray.prototype.entries()</span><br><span class=\"line\">TypedArray.prototype.every(callbackfn, thisArg?)</span><br><span class=\"line\">TypedArray.prototype.fill(value, start=<span class=\"number\">0</span>, end=<span class=\"keyword\">this</span>.length)</span><br><span class=\"line\">TypedArray.prototype.filter(callbackfn, thisArg?)</span><br><span class=\"line\">TypedArray.prototype.find(predicate, thisArg?)</span><br><span class=\"line\">TypedArray.prototype.findIndex(predicate, thisArg?)</span><br><span class=\"line\">TypedArray.prototype.forEach(callbackfn, thisArg?)</span><br><span class=\"line\">TypedArray.prototype.indexOf(searchElement, fromIndex=<span class=\"number\">0</span>)</span><br><span class=\"line\">TypedArray.prototype.join(separator)</span><br><span class=\"line\">TypedArray.prototype.keys()</span><br><span class=\"line\">TypedArray.prototype.lastIndexOf(searchElement, fromIndex?)</span><br><span class=\"line\">TypedArray.prototype.map(callbackfn, thisArg?)</span><br><span class=\"line\">TypedArray.prototype.reduce(callbackfn, initialValue?)</span><br><span class=\"line\">TypedArray.prototype.reduceRight(callbackfn, initialValue?)</span><br><span class=\"line\">TypedArray.prototype.reverse()</span><br><span class=\"line\">TypedArray.prototype.slice(start=<span class=\"number\">0</span>, end=<span class=\"keyword\">this</span>.length)</span><br><span class=\"line\">TypedArray.prototype.some(callbackfn, thisArg?)</span><br><span class=\"line\">TypedArray.prototype.sort(comparefn)</span><br><span class=\"line\">TypedArray.prototype.toLocaleString(reserved1?, reserved2?)</span><br><span class=\"line\">TypedArray.prototype.toString()</span><br><span class=\"line\">TypedArray.prototype.values()</span><br></pre></td></tr></table></figure>\n<h2 id=\"小端字节序\"><a href=\"#小端字节序\" class=\"headerlink\" title=\"小端字节序\"></a>小端字节序</h2><blockquote>\n<p>如果使用一个 32 位的视图读取并修改一段内存后，再使用一个 16 位的视图读取该段内存缓冲时，其长度应该是 32 位视图的两倍，这时候 16 位视图中的数据存放就会出现一个现象，跟字节排放的规则相关，看示例</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buffer = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayBuffer</span>(<span class=\"number\">16</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> int32View = <span class=\"keyword\">new</span> <span class=\"built_in\">Int32Array</span>(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; int32View.length; i++) &#123;</span><br><span class=\"line\">  int32View[i] = i * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(int32View); <span class=\"comment\">// [0, 2, 4, 6]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> int16View = <span class=\"keyword\">new</span> <span class=\"built_in\">Int16Array</span>(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(int16View); <span class=\"comment\">// [0, 0, 2, 0, 4, 0, 6, 0]</span></span><br></pre></td></tr></table></figure>\n<p>由于 32 位视图是 4 个字节存放一个数据，16 位视图是 2 个字节存放一个数据，那么 16 位视图明显要使用 2 个数据位来存放一个 32 位视图的数据，而之所以 16 位视图都是两个数据位的第一个数据位显示为正确数据，第二个显示为 0，这就涉及现代计算机都采用了小端字节序的规则在内存中存放数据的原因，而 TypeArray 也是采用该种策略。小端字节序简略地说就是从后往前一个字节一个字节地存放数据到内存的每个地址中，更详细的解释可以参考：<a href=\"http://blog.csdn.net/ce123/article/details/6971544\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/ce123/article/details/6971544</a> 小端字节序也导致了 TypeArray 无法正确读取大端字节序的内容</p>\n<h2 id=\"TypeArray-prototype-BYTES-PER-ELEMENT\"><a href=\"#TypeArray-prototype-BYTES-PER-ELEMENT\" class=\"headerlink\" title=\"TypeArray.prototype.BYTES_PER_ELEMENT\"></a>TypeArray.prototype.BYTES_PER_ELEMENT</h2><blockquote>\n<p>用于输出每一个 TypeArray 类型视图的每一位所占的字节数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Int8Array</span>.BYTES_PER_ELEMENT <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">Uint8Array</span>.BYTES_PER_ELEMENT <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">Int16Array</span>.BYTES_PER_ELEMENT <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">Uint16Array</span>.BYTES_PER_ELEMENT <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">Int32Array</span>.BYTES_PER_ELEMENT <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"built_in\">Uint32Array</span>.BYTES_PER_ELEMENT <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"built_in\">Float32Array</span>.BYTES_PER_ELEMENT <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"built_in\">Float64Array</span>.BYTES_PER_ELEMENT <span class=\"comment\">// 8</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"溢出\"><a href=\"#溢出\" class=\"headerlink\" title=\"溢出\"></a>溢出</h2><blockquote>\n<p>TypeArray 对于溢出的处理就是直接抛弃溢出的位</p>\n</blockquote>\n<ul>\n<li>正向溢出（overflow）：当输入值大于当前数据类型的最大值，结果等于当前数据类型的最小值加上余值，再减去1</li>\n<li>负向溢出（underflow）：当输入值小于当前数据类型的最小值，结果等于当前数据类型的最大值减去余值，再加上1</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> int8 = <span class=\"keyword\">new</span> <span class=\"built_in\">Int8Array</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">int8[<span class=\"number\">0</span>] = <span class=\"number\">128</span>;</span><br><span class=\"line\">int8[<span class=\"number\">0</span>] <span class=\"comment\">// -128</span></span><br><span class=\"line\"></span><br><span class=\"line\">int8[<span class=\"number\">0</span>] = <span class=\"number\">-129</span>;</span><br><span class=\"line\">int8[<span class=\"number\">0</span>] <span class=\"comment\">// 127</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h2><ul>\n<li>TypedArray.prototype.buffer，返回视图整段内存引用</li>\n<li>TypedArray.prototype.byteLength，返回视图的内存字节长度</li>\n<li>TypedArray.prototype.byteOffset，返回视图从内存第几个字节开始引用</li>\n<li>TypedArray.prototype.length，返回视图的成员长度，与其每个成员占用字节数相关</li>\n<li>TypedArray.prototype.set(typeArray[, startIndex])，将一段内存完全复制到另一端内存中</li>\n<li>TypedArray.prototype.subarray(startIndex, endIndex)，从一个视图上截取一部分创建为一个新的视图</li>\n<li>TypedArray.prototype.slice(index)，从一个视图上截取一段创建一个新的视图，index 可以为负数，表示倒数</li>\n<li>TypedArray.of()，将参数创建为一个新的视图</li>\n<li>TypedArray.from(arrayLike[, callback])，将 arrayLike 转化为一个相应的可遍历的视图类型，callback 的功能类似于数组的 map 功能</li>\n</ul>\n<h1 id=\"DataView\"><a href=\"#DataView\" class=\"headerlink\" title=\"DataView\"></a>DataView</h1><blockquote>\n<p>DataView 可以自行设置大端字节序或者小端字节序，同时有 8 个获取数据的方法和 8 个设置数据的方法</p>\n</blockquote>\n<ul>\n<li>getInt8：读取1个字节，返回一个8位整数。</li>\n<li>getUint8：读取1个字节，返回一个无符号的8位整数。</li>\n<li>getInt16：读取2个字节，返回一个16位整数。</li>\n<li>getUint16：读取2个字节，返回一个无符号的16位整数。</li>\n<li>getInt32：读取4个字节，返回一个32位整数。</li>\n<li>getUint32：读取4个字节，返回一个无符号的32位整数。</li>\n<li>getFloat32：读取4个字节，返回一个32位浮点数。</li>\n<li>getFloat64：读取8个字节，返回一个64位浮点数。</li>\n</ul>\n<p>这 8 个方法都传入一个正整数表示从第几个字节开始读取，第二个参数为一个布尔值，true 代表使用小端字节序，false 代表使用大端字节序，默认为大端字节序</p>\n<ul>\n<li>setInt8：写入1个字节的8位整数。</li>\n<li>setUint8：写入1个字节的8位无符号整数。</li>\n<li>setInt16：写入2个字节的16位整数。</li>\n<li>setUint16：写入2个字节的16位无符号整数。</li>\n<li>setInt32：写入4个字节的32位整数。</li>\n<li>setUint32：写入4个字节的32位无符号整数。</li>\n<li>setFloat32：写入4个字节的32位浮点数。</li>\n<li>setFloat64：写入8个字节的64位浮点数。</li>\n</ul>\n<p>这 8 个方法都可以传入三个参数，第一个表示从第几个字节写入数据，第二个表示写入数据的内容，第三个指定大小端字节序</p>\n<h1 id=\"其他一些新特性\"><a href=\"#其他一些新特性\" class=\"headerlink\" title=\"其他一些新特性\"></a>其他一些新特性</h1><h2 id=\"AJAX\"><a href=\"#AJAX\" class=\"headerlink\" title=\"AJAX\"></a>AJAX</h2><blockquote>\n<p>AJAX 可以设置 <code>responseType</code> 为 <code>arraybuffer</code> 明确指定响应数据位二进制数据，如果不明确，可以设置为 <code>blod</code></p>\n</blockquote>\n<h2 id=\"Canvas\"><a href=\"#Canvas\" class=\"headerlink\" title=\"Canvas\"></a>Canvas</h2><blockquote>\n<p>Canvas 使用 <code>Uint8ClampedArray</code> 读取二进制像素数据，该 TypeArray 可以自动过滤高位溢出，取值范围始终为 0-255</p>\n</blockquote>\n<h2 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h2><blockquote>\n<p>WebSocket 可以发送二进制数据</p>\n</blockquote>\n<h2 id=\"Fetch-API\"><a href=\"#Fetch-API\" class=\"headerlink\" title=\"Fetch API\"></a>Fetch API</h2><blockquote>\n<p>Fetch API取回的数据，就是 <code>ArrayBuffer</code> 对象</p>\n</blockquote>\n<h2 id=\"File-API\"><a href=\"#File-API\" class=\"headerlink\" title=\"File API\"></a>File API</h2><blockquote>\n<p>File API 可以将文件数据作为二进制的 <code>ArrayBuffer</code> 类型读取处理</p>\n<p>以上实例代码大部分来自阮一峰老师的 《ECMAScript 6 入门》 一书<br>书籍在线阅读地址: <a href=\"http://es6.ruanyifeng.com/#README\" target=\"_blank\" rel=\"external\">http://es6.ruanyifeng.com/#README</a></p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"二进制数组\"><a href=\"#二进制数组\" class=\"headerlink\" title=\"二进制数组\"></a>二进制数组</h1><blockquote>\n<p>二进制数组不是数组，只是类数组，二进制数组用于直接操作内存</p>\n</blockquote>\n<h2 id=\"ArrayBuffer-long\"><a href=\"#ArrayBuffer-long\" class=\"headerlink\" title=\"ArrayBuffer(long)\"></a>ArrayBuffer(long)</h2><blockquote>\n<p><code>ArrayBuffer</code> 用于创建一段连续的内存地址，<code>long</code> 表示内存的长度（字节），但是不可以直接读写，只能通过 <code>视图</code> 读写，例如 <code>TypeArray</code>，<code>ArrayBuffer</code> 每个内存地址默认值都为 0。不同 <code>TypeArray</code> 操作同一组内存会互相影响</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayBuffer</span>(<span class=\"number\">32</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> dataView = <span class=\"keyword\">new</span> <span class=\"built_in\">DataView</span>(buf);</span><br><span class=\"line\">dataView.getUint8(<span class=\"number\">0</span>) <span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 操作同一组内存</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> buffer = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayBuffer</span>(<span class=\"number\">12</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Int32Array</span>(buffer);</span><br><span class=\"line\">x1[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> x2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(buffer);</span><br><span class=\"line\">x2[<span class=\"number\">0</span>]  = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">x1[<span class=\"number\">0</span>] <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-prototype-byteLength\"><a href=\"#Array-prototype-byteLength\" class=\"headerlink\" title=\"Array.prototype.byteLength\"></a>Array.prototype.byteLength</h3><blockquote>\n<p>获取分配的内存字节长度</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buffer = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayBuffer</span>(<span class=\"number\">32</span>);</span><br><span class=\"line\">buffer.byteLength</span><br><span class=\"line\"><span class=\"comment\">// 32</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(buffer.byteLength) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// error</span></span><br><span class=\"line\">    <span class=\"comment\">// 分配的内存空间太大，可能存在没有那么大的内存空间而失败的情况</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-prototype-slice-start-end\"><a href=\"#Array-prototype-slice-start-end\" class=\"headerlink\" title=\"Array.prototype.slice(start, end)\"></a>Array.prototype.slice(start, end)</h3><blockquote>\n<p>生成一段新的内存，拷贝 start 到 end-1 位置的内容到新的内存</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buffer = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayBuffer</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> newBuffer = buffer.slice(<span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"ArrayBuffer-isView-buffer\"><a href=\"#ArrayBuffer-isView-buffer\" class=\"headerlink\" title=\"ArrayBuffer.isView(buffer)\"></a>ArrayBuffer.isView(buffer)</h3><blockquote>\n<p>判断 buffer 是否是视图的实例化对象，该方法为 ArrayBuffer 的静态方法，直接调用</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buffer = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayBuffer</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"built_in\">ArrayBuffer</span>.isView(buffer) <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> v = <span class=\"keyword\">new</span> <span class=\"built_in\">Int32Array</span>(buffer);</span><br><span class=\"line\"><span class=\"built_in\">ArrayBuffer</span>.isView(v) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"TypeArray\"><a href=\"#TypeArray\" class=\"headerlink\" title=\"TypeArray\"></a>TypeArray</h1><blockquote>\n<p><code>TypeArray</code> 不是一个构造函数，而是一组构造函数，它包含 9 个不同的视图构造函数，都是类数组，都能用下标访问，都有 length 属性</p>\n</blockquote>\n<ul>\n<li>Int8Array：8位有符号整数，长度1个字节。</li>\n<li>Uint8Array：8位无符号整数，长度1个字节。</li>\n<li>Uint8ClampedArray：8位无符号整数，长度1个字节，溢出处理不同。</li>\n<li>Int16Array：16位有符号整数，长度2个字节。</li>\n<li>Uint16Array：16位无符号整数，长度2个字节。</li>\n<li>Int32Array：32位有符号整数，长度4个字节。</li>\n<li>Uint32Array：32位无符号整数，长度4个字节。</li>\n<li>Float32Array：32位浮点数，长度4个字节。</li>\n<li>Float64Array：64位浮点数，长度8个字节。</li>\n</ul>\n<h2 id=\"TypedArray-buffer-byteOffset-length\"><a href=\"#TypedArray-buffer-byteOffset-length\" class=\"headerlink\" title=\"TypedArray(buffer [, byteOffset [, length]])\"></a>TypedArray(buffer [, byteOffset [, length]])</h2><blockquote>\n<p>TypeArray 的构造函数可以传入三个参数</p>\n</blockquote>\n<ul>\n<li>第一个参数，ArrayBuffer 的实例对象，必选</li>\n<li>第二个参数，从 ArrayBuffer 的第 byteOffset 个字节开始读取，默认从 0 开始，注意，如果是 16 位的视图，需要是 2 的倍数，如果是 32 位 的视图，需要是 4 的倍数，以此类推，因为例如是 32 位的视图，那么该视图中 4 个字节为一个下标，为了完整读取内存，必须是每一个下标字节大小的整数倍，可选</li>\n<li>第三个参数，读取 ArrayBuffer 的 length 个字节，默认读取到末尾，可选</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个8字节的ArrayBuffer</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayBuffer</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个指向b的Int32视图，开始于字节0，直到缓冲区的末尾</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> v1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Int32Array</span>(b);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个指向b的Uint8视图，开始于字节2，直到缓冲区的末尾</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> v2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(b, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个指向b的Int16视图，开始于字节2，长度为2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> v3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Int16Array</span>(b, <span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"TypeArray-length\"><a href=\"#TypeArray-length\" class=\"headerlink\" title=\"TypeArray(length)\"></a>TypeArray(length)</h2><blockquote>\n<p>TypeArray 的构造函数还能直接通过分配内存创建视图</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f64a = <span class=\"keyword\">new</span> <span class=\"built_in\">Float64Array</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\">f64a[<span class=\"number\">0</span>] = <span class=\"number\">10</span>;</span><br><span class=\"line\">f64a[<span class=\"number\">1</span>] = <span class=\"number\">20</span>;</span><br><span class=\"line\">f64a[<span class=\"number\">2</span>] = f64a[<span class=\"number\">0</span>] + f64a[<span class=\"number\">1</span>];</span><br></pre></td></tr></table></figure>\n<h2 id=\"TypeArray-typedArray\"><a href=\"#TypeArray-typedArray\" class=\"headerlink\" title=\"TypeArray(typedArray)\"></a>TypeArray(typedArray)</h2><blockquote>\n<p>TypeArray 的构造函数能接受另外一个 TypeArray 的实例作为构造参数，新的实例是开辟了新的内存地址同时复制了相同的值，不会互相影响</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"keyword\">new</span> <span class=\"built_in\">Int8Array</span>([<span class=\"number\">1</span>, <span class=\"number\">1</span>]);</span><br><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"keyword\">new</span> <span class=\"built_in\">Int8Array</span>(x);</span><br><span class=\"line\">x[<span class=\"number\">0</span>] <span class=\"comment\">// 1</span></span><br><span class=\"line\">y[<span class=\"number\">0</span>] <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">x[<span class=\"number\">0</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">y[<span class=\"number\">0</span>] <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"TypedArray-arrayLikeObject\"><a href=\"#TypedArray-arrayLikeObject\" class=\"headerlink\" title=\"TypedArray(arrayLikeObject)\"></a>TypedArray(arrayLikeObject)</h2><blockquote>\n<p>TypeArray 的构造函数能接受一个类数组的参数，会开辟一段新的内存实例化视图</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"keyword\">new</span> <span class=\"built_in\">Int8Array</span>([<span class=\"number\">1</span>, <span class=\"number\">1</span>]);</span><br><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"keyword\">new</span> <span class=\"built_in\">Int8Array</span>(x.buffer);</span><br><span class=\"line\">x[<span class=\"number\">0</span>] <span class=\"comment\">// 1</span></span><br><span class=\"line\">y[<span class=\"number\">0</span>] <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">x[<span class=\"number\">0</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">y[<span class=\"number\">0</span>] <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数组方法\"><a href=\"#数组方法\" class=\"headerlink\" title=\"数组方法\"></a>数组方法</h2><blockquote>\n<p>普通数组的方法对 TypeArray 也完全适用</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 缺少 contact 方法</span></span><br><span class=\"line\">TypedArray.prototype.copyWithin(target, start[, end = <span class=\"keyword\">this</span>.length])</span><br><span class=\"line\">TypedArray.prototype.entries()</span><br><span class=\"line\">TypedArray.prototype.every(callbackfn, thisArg?)</span><br><span class=\"line\">TypedArray.prototype.fill(value, start=<span class=\"number\">0</span>, end=<span class=\"keyword\">this</span>.length)</span><br><span class=\"line\">TypedArray.prototype.filter(callbackfn, thisArg?)</span><br><span class=\"line\">TypedArray.prototype.find(predicate, thisArg?)</span><br><span class=\"line\">TypedArray.prototype.findIndex(predicate, thisArg?)</span><br><span class=\"line\">TypedArray.prototype.forEach(callbackfn, thisArg?)</span><br><span class=\"line\">TypedArray.prototype.indexOf(searchElement, fromIndex=<span class=\"number\">0</span>)</span><br><span class=\"line\">TypedArray.prototype.join(separator)</span><br><span class=\"line\">TypedArray.prototype.keys()</span><br><span class=\"line\">TypedArray.prototype.lastIndexOf(searchElement, fromIndex?)</span><br><span class=\"line\">TypedArray.prototype.map(callbackfn, thisArg?)</span><br><span class=\"line\">TypedArray.prototype.reduce(callbackfn, initialValue?)</span><br><span class=\"line\">TypedArray.prototype.reduceRight(callbackfn, initialValue?)</span><br><span class=\"line\">TypedArray.prototype.reverse()</span><br><span class=\"line\">TypedArray.prototype.slice(start=<span class=\"number\">0</span>, end=<span class=\"keyword\">this</span>.length)</span><br><span class=\"line\">TypedArray.prototype.some(callbackfn, thisArg?)</span><br><span class=\"line\">TypedArray.prototype.sort(comparefn)</span><br><span class=\"line\">TypedArray.prototype.toLocaleString(reserved1?, reserved2?)</span><br><span class=\"line\">TypedArray.prototype.toString()</span><br><span class=\"line\">TypedArray.prototype.values()</span><br></pre></td></tr></table></figure>\n<h2 id=\"小端字节序\"><a href=\"#小端字节序\" class=\"headerlink\" title=\"小端字节序\"></a>小端字节序</h2><blockquote>\n<p>如果使用一个 32 位的视图读取并修改一段内存后，再使用一个 16 位的视图读取该段内存缓冲时，其长度应该是 32 位视图的两倍，这时候 16 位视图中的数据存放就会出现一个现象，跟字节排放的规则相关，看示例</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buffer = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayBuffer</span>(<span class=\"number\">16</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> int32View = <span class=\"keyword\">new</span> <span class=\"built_in\">Int32Array</span>(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; int32View.length; i++) &#123;</span><br><span class=\"line\">  int32View[i] = i * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(int32View); <span class=\"comment\">// [0, 2, 4, 6]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> int16View = <span class=\"keyword\">new</span> <span class=\"built_in\">Int16Array</span>(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(int16View); <span class=\"comment\">// [0, 0, 2, 0, 4, 0, 6, 0]</span></span><br></pre></td></tr></table></figure>\n<p>由于 32 位视图是 4 个字节存放一个数据，16 位视图是 2 个字节存放一个数据，那么 16 位视图明显要使用 2 个数据位来存放一个 32 位视图的数据，而之所以 16 位视图都是两个数据位的第一个数据位显示为正确数据，第二个显示为 0，这就涉及现代计算机都采用了小端字节序的规则在内存中存放数据的原因，而 TypeArray 也是采用该种策略。小端字节序简略地说就是从后往前一个字节一个字节地存放数据到内存的每个地址中，更详细的解释可以参考：<a href=\"http://blog.csdn.net/ce123/article/details/6971544\">http://blog.csdn.net/ce123/article/details/6971544</a> 小端字节序也导致了 TypeArray 无法正确读取大端字节序的内容</p>\n<h2 id=\"TypeArray-prototype-BYTES-PER-ELEMENT\"><a href=\"#TypeArray-prototype-BYTES-PER-ELEMENT\" class=\"headerlink\" title=\"TypeArray.prototype.BYTES_PER_ELEMENT\"></a>TypeArray.prototype.BYTES_PER_ELEMENT</h2><blockquote>\n<p>用于输出每一个 TypeArray 类型视图的每一位所占的字节数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Int8Array</span>.BYTES_PER_ELEMENT <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">Uint8Array</span>.BYTES_PER_ELEMENT <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">Int16Array</span>.BYTES_PER_ELEMENT <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">Uint16Array</span>.BYTES_PER_ELEMENT <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">Int32Array</span>.BYTES_PER_ELEMENT <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"built_in\">Uint32Array</span>.BYTES_PER_ELEMENT <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"built_in\">Float32Array</span>.BYTES_PER_ELEMENT <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"built_in\">Float64Array</span>.BYTES_PER_ELEMENT <span class=\"comment\">// 8</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"溢出\"><a href=\"#溢出\" class=\"headerlink\" title=\"溢出\"></a>溢出</h2><blockquote>\n<p>TypeArray 对于溢出的处理就是直接抛弃溢出的位</p>\n</blockquote>\n<ul>\n<li>正向溢出（overflow）：当输入值大于当前数据类型的最大值，结果等于当前数据类型的最小值加上余值，再减去1</li>\n<li>负向溢出（underflow）：当输入值小于当前数据类型的最小值，结果等于当前数据类型的最大值减去余值，再加上1</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> int8 = <span class=\"keyword\">new</span> <span class=\"built_in\">Int8Array</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">int8[<span class=\"number\">0</span>] = <span class=\"number\">128</span>;</span><br><span class=\"line\">int8[<span class=\"number\">0</span>] <span class=\"comment\">// -128</span></span><br><span class=\"line\"></span><br><span class=\"line\">int8[<span class=\"number\">0</span>] = <span class=\"number\">-129</span>;</span><br><span class=\"line\">int8[<span class=\"number\">0</span>] <span class=\"comment\">// 127</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h2><ul>\n<li>TypedArray.prototype.buffer，返回视图整段内存引用</li>\n<li>TypedArray.prototype.byteLength，返回视图的内存字节长度</li>\n<li>TypedArray.prototype.byteOffset，返回视图从内存第几个字节开始引用</li>\n<li>TypedArray.prototype.length，返回视图的成员长度，与其每个成员占用字节数相关</li>\n<li>TypedArray.prototype.set(typeArray[, startIndex])，将一段内存完全复制到另一端内存中</li>\n<li>TypedArray.prototype.subarray(startIndex, endIndex)，从一个视图上截取一部分创建为一个新的视图</li>\n<li>TypedArray.prototype.slice(index)，从一个视图上截取一段创建一个新的视图，index 可以为负数，表示倒数</li>\n<li>TypedArray.of()，将参数创建为一个新的视图</li>\n<li>TypedArray.from(arrayLike[, callback])，将 arrayLike 转化为一个相应的可遍历的视图类型，callback 的功能类似于数组的 map 功能</li>\n</ul>\n<h1 id=\"DataView\"><a href=\"#DataView\" class=\"headerlink\" title=\"DataView\"></a>DataView</h1><blockquote>\n<p>DataView 可以自行设置大端字节序或者小端字节序，同时有 8 个获取数据的方法和 8 个设置数据的方法</p>\n</blockquote>\n<ul>\n<li>getInt8：读取1个字节，返回一个8位整数。</li>\n<li>getUint8：读取1个字节，返回一个无符号的8位整数。</li>\n<li>getInt16：读取2个字节，返回一个16位整数。</li>\n<li>getUint16：读取2个字节，返回一个无符号的16位整数。</li>\n<li>getInt32：读取4个字节，返回一个32位整数。</li>\n<li>getUint32：读取4个字节，返回一个无符号的32位整数。</li>\n<li>getFloat32：读取4个字节，返回一个32位浮点数。</li>\n<li>getFloat64：读取8个字节，返回一个64位浮点数。</li>\n</ul>\n<p>这 8 个方法都传入一个正整数表示从第几个字节开始读取，第二个参数为一个布尔值，true 代表使用小端字节序，false 代表使用大端字节序，默认为大端字节序</p>\n<ul>\n<li>setInt8：写入1个字节的8位整数。</li>\n<li>setUint8：写入1个字节的8位无符号整数。</li>\n<li>setInt16：写入2个字节的16位整数。</li>\n<li>setUint16：写入2个字节的16位无符号整数。</li>\n<li>setInt32：写入4个字节的32位整数。</li>\n<li>setUint32：写入4个字节的32位无符号整数。</li>\n<li>setFloat32：写入4个字节的32位浮点数。</li>\n<li>setFloat64：写入8个字节的64位浮点数。</li>\n</ul>\n<p>这 8 个方法都可以传入三个参数，第一个表示从第几个字节写入数据，第二个表示写入数据的内容，第三个指定大小端字节序</p>\n<h1 id=\"其他一些新特性\"><a href=\"#其他一些新特性\" class=\"headerlink\" title=\"其他一些新特性\"></a>其他一些新特性</h1><h2 id=\"AJAX\"><a href=\"#AJAX\" class=\"headerlink\" title=\"AJAX\"></a>AJAX</h2><blockquote>\n<p>AJAX 可以设置 <code>responseType</code> 为 <code>arraybuffer</code> 明确指定响应数据位二进制数据，如果不明确，可以设置为 <code>blod</code></p>\n</blockquote>\n<h2 id=\"Canvas\"><a href=\"#Canvas\" class=\"headerlink\" title=\"Canvas\"></a>Canvas</h2><blockquote>\n<p>Canvas 使用 <code>Uint8ClampedArray</code> 读取二进制像素数据，该 TypeArray 可以自动过滤高位溢出，取值范围始终为 0-255</p>\n</blockquote>\n<h2 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h2><blockquote>\n<p>WebSocket 可以发送二进制数据</p>\n</blockquote>\n<h2 id=\"Fetch-API\"><a href=\"#Fetch-API\" class=\"headerlink\" title=\"Fetch API\"></a>Fetch API</h2><blockquote>\n<p>Fetch API取回的数据，就是 <code>ArrayBuffer</code> 对象</p>\n</blockquote>\n<h2 id=\"File-API\"><a href=\"#File-API\" class=\"headerlink\" title=\"File API\"></a>File API</h2><blockquote>\n<p>File API 可以将文件数据作为二进制的 <code>ArrayBuffer</code> 类型读取处理</p>\n<p>以上实例代码大部分来自阮一峰老师的 《ECMAScript 6 入门》 一书<br>书籍在线阅读地址: <a href=\"http://es6.ruanyifeng.com/#README\">http://es6.ruanyifeng.com/#README</a></p>\n</blockquote>\n"},{"title":"Function的类型判断","date":"2016-03-18T05:47:55.000Z","_content":"## 1. typeof\n\n首先，使用 `typeof` 去判断一个函数是一种通用的做法，不过这种做法存在一种风险，即在低版本浏览器下会出现误判的现象，在 IE6/7/8 下，一些 JS 的核心函数是以 `COM` 对象去构造的函数，例如 `document.getElementById`，正常情况下，typeof 应该对其判断为 `function`，但是在 IE6/7/8 下，会将其判断为 `object`。\n在 Chrome 和 Safari 的旧版本中，`正则表达式`进行 typeof 的判断结果为 `function`，其他浏览器则返回 `object`，这会导致误判，所以使用 typeof 判断函数是一种不稳定的做法，存在一定的风险。\n\n## 2. 使用Object.prototype.toString.call()\n\n* 使用 Object 的原型里的 toString 去判断类型也是一种方法，而且也稳定安全得多，其结果返回的格式是“[object NativeConstructorName]”\n* 和 typeof 一样存在的一个问题是其在 IE6/7/8 仍会对某些核心函数判断为 `[object Object]`，这是 IE 特有的 `JScript` 所导致的，IE 中一些函数是以 `COM` 对象构造的。\n* 在这种方法下，`正则表达式`的返回就正确了，结果为 `[object RegExp]`。\n\n总结：在 IE9+ 和比较新的 Chrome、Safari 下，用 typeof 还是很方便的，而且效率比使用第二种方法快得多，在100万次的执行效率对比下，typeof 判断完消耗时间大概为`4.5ms`，而 Object.prototype.toString 则消耗高达`50ms`以上，其效率差距10几倍。以下代码可以判断是否使用 typeof 判断 Function：\n\n```javascript\nif(typeof /./ != \"function\" && typeof Int8Array != \"object\") {\n    np.isFunction = function(func) {\n        return typeof func === \"function\" || false;\n    }\n}\n```\n","source":"_posts/Function的类型判断.md","raw":"---\ntitle: Function的类型判断\ndate: 2016-03-18 13:47:55\ncategories: 前端\ntags: Javascript\n---\n## 1. typeof\n\n首先，使用 `typeof` 去判断一个函数是一种通用的做法，不过这种做法存在一种风险，即在低版本浏览器下会出现误判的现象，在 IE6/7/8 下，一些 JS 的核心函数是以 `COM` 对象去构造的函数，例如 `document.getElementById`，正常情况下，typeof 应该对其判断为 `function`，但是在 IE6/7/8 下，会将其判断为 `object`。\n在 Chrome 和 Safari 的旧版本中，`正则表达式`进行 typeof 的判断结果为 `function`，其他浏览器则返回 `object`，这会导致误判，所以使用 typeof 判断函数是一种不稳定的做法，存在一定的风险。\n\n## 2. 使用Object.prototype.toString.call()\n\n* 使用 Object 的原型里的 toString 去判断类型也是一种方法，而且也稳定安全得多，其结果返回的格式是“[object NativeConstructorName]”\n* 和 typeof 一样存在的一个问题是其在 IE6/7/8 仍会对某些核心函数判断为 `[object Object]`，这是 IE 特有的 `JScript` 所导致的，IE 中一些函数是以 `COM` 对象构造的。\n* 在这种方法下，`正则表达式`的返回就正确了，结果为 `[object RegExp]`。\n\n总结：在 IE9+ 和比较新的 Chrome、Safari 下，用 typeof 还是很方便的，而且效率比使用第二种方法快得多，在100万次的执行效率对比下，typeof 判断完消耗时间大概为`4.5ms`，而 Object.prototype.toString 则消耗高达`50ms`以上，其效率差距10几倍。以下代码可以判断是否使用 typeof 判断 Function：\n\n```javascript\nif(typeof /./ != \"function\" && typeof Int8Array != \"object\") {\n    np.isFunction = function(func) {\n        return typeof func === \"function\" || false;\n    }\n}\n```\n","slug":"Function的类型判断","published":1,"updated":"2016-03-18T07:10:45.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqggs7ki0011ikvdxc9ncv8b","content":"<h2 id=\"1-typeof\"><a href=\"#1-typeof\" class=\"headerlink\" title=\"1. typeof\"></a>1. typeof</h2><p>首先，使用 <code>typeof</code> 去判断一个函数是一种通用的做法，不过这种做法存在一种风险，即在低版本浏览器下会出现误判的现象，在 IE6/7/8 下，一些 JS 的核心函数是以 <code>COM</code> 对象去构造的函数，例如 <code>document.getElementById</code>，正常情况下，typeof 应该对其判断为 <code>function</code>，但是在 IE6/7/8 下，会将其判断为 <code>object</code>。<br>在 Chrome 和 Safari 的旧版本中，<code>正则表达式</code>进行 typeof 的判断结果为 <code>function</code>，其他浏览器则返回 <code>object</code>，这会导致误判，所以使用 typeof 判断函数是一种不稳定的做法，存在一定的风险。</p>\n<h2 id=\"2-使用Object-prototype-toString-call\"><a href=\"#2-使用Object-prototype-toString-call\" class=\"headerlink\" title=\"2. 使用Object.prototype.toString.call()\"></a>2. 使用Object.prototype.toString.call()</h2><ul>\n<li>使用 Object 的原型里的 toString 去判断类型也是一种方法，而且也稳定安全得多，其结果返回的格式是“[object NativeConstructorName]”</li>\n<li>和 typeof 一样存在的一个问题是其在 IE6/7/8 仍会对某些核心函数判断为 <code>[object Object]</code>，这是 IE 特有的 <code>JScript</code> 所导致的，IE 中一些函数是以 <code>COM</code> 对象构造的。</li>\n<li>在这种方法下，<code>正则表达式</code>的返回就正确了，结果为 <code>[object RegExp]</code>。</li>\n</ul>\n<p>总结：在 IE9+ 和比较新的 Chrome、Safari 下，用 typeof 还是很方便的，而且效率比使用第二种方法快得多，在100万次的执行效率对比下，typeof 判断完消耗时间大概为<code>4.5ms</code>，而 Object.prototype.toString 则消耗高达<code>50ms</code>以上，其效率差距10几倍。以下代码可以判断是否使用 typeof 判断 Function：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> /./ != <span class=\"string\">\"function\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">Int8Array</span> != <span class=\"string\">\"object\"</span>) &#123;</span><br><span class=\"line\">    np.isFunction = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> func === <span class=\"string\">\"function\"</span> || <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"1-typeof\"><a href=\"#1-typeof\" class=\"headerlink\" title=\"1. typeof\"></a>1. typeof</h2><p>首先，使用 <code>typeof</code> 去判断一个函数是一种通用的做法，不过这种做法存在一种风险，即在低版本浏览器下会出现误判的现象，在 IE6/7/8 下，一些 JS 的核心函数是以 <code>COM</code> 对象去构造的函数，例如 <code>document.getElementById</code>，正常情况下，typeof 应该对其判断为 <code>function</code>，但是在 IE6/7/8 下，会将其判断为 <code>object</code>。<br>在 Chrome 和 Safari 的旧版本中，<code>正则表达式</code>进行 typeof 的判断结果为 <code>function</code>，其他浏览器则返回 <code>object</code>，这会导致误判，所以使用 typeof 判断函数是一种不稳定的做法，存在一定的风险。</p>\n<h2 id=\"2-使用Object-prototype-toString-call\"><a href=\"#2-使用Object-prototype-toString-call\" class=\"headerlink\" title=\"2. 使用Object.prototype.toString.call()\"></a>2. 使用Object.prototype.toString.call()</h2><ul>\n<li>使用 Object 的原型里的 toString 去判断类型也是一种方法，而且也稳定安全得多，其结果返回的格式是“[object NativeConstructorName]”</li>\n<li>和 typeof 一样存在的一个问题是其在 IE6/7/8 仍会对某些核心函数判断为 <code>[object Object]</code>，这是 IE 特有的 <code>JScript</code> 所导致的，IE 中一些函数是以 <code>COM</code> 对象构造的。</li>\n<li>在这种方法下，<code>正则表达式</code>的返回就正确了，结果为 <code>[object RegExp]</code>。</li>\n</ul>\n<p>总结：在 IE9+ 和比较新的 Chrome、Safari 下，用 typeof 还是很方便的，而且效率比使用第二种方法快得多，在100万次的执行效率对比下，typeof 判断完消耗时间大概为<code>4.5ms</code>，而 Object.prototype.toString 则消耗高达<code>50ms</code>以上，其效率差距10几倍。以下代码可以判断是否使用 typeof 判断 Function：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> /./ != <span class=\"string\">\"function\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">Int8Array</span> != <span class=\"string\">\"object\"</span>) &#123;</span><br><span class=\"line\">    np.isFunction = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> func === <span class=\"string\">\"function\"</span> || <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"clearfix 闭合浮动","date":"2016-03-18T05:57:45.000Z","_content":"```css\n/** *  For modern browsers */\n\n.clearfix:before, .clearfix:after {\n    content: \"\";\n    display: table;\n}\n\n.clearfix:after {\n    clear: both;\n}\n\n/** * For IE 6/7 (trigger hasLayout) */\n.clearfix {\n    *zoom: 1;\n}\n```\n\n`.clearfix:after {content:\".\"; display:block; height:0; visibility:hidden; clear:both; } `\n这里也是一种方法，`content`为一个`.`的原因是在 Firefox 里，空的 content 会有额外间隙，所以使用`.`，此外的`height`等属性只是为了隐藏 content 不影响布局。而最新的方法 `display: table` 的 content 可以为空，且不会产生间隙，所以额外的属性都可以去除。\n\n在父元素使用`overflow`清除浮动的原理是，将父元素变为一个新的`BFC`，根据 BFC 的特点，BFC 可以包含浮动元素，所以，不仅仅是 overflow 能清除浮动，只要能触发父元素的BFC的方式都可以清除浮动，例如`display: table-cell`,`float:left`等等都可以触发BFC。\n\n传统的加一个空的div去清除浮动的方法有一个缺点，当子元素是浮动元素且有外边距是，清除浮动以后，父元素的高度仅仅是包裹子元素的高度（不包括外边距的高度），那么子元素明显会被边距顶出了父元素外边，虽然父元素会被撑开一段高度，但是由于子元素外边距的存在，父元素无法完全包裹子元素。\n\n关于BFC的知识，可浏览\n> http://www.cnblogs.com/leejersey/p/3991400.html\n\n> http://kayosite.com/remove-floating-style-in-detail.html\n","source":"_posts/clearfix-闭合浮动.md","raw":"---\ntitle: clearfix 闭合浮动\ndate: 2016-03-18 13:57:45\ncategories: 前端\ntags: 布局\n---\n```css\n/** *  For modern browsers */\n\n.clearfix:before, .clearfix:after {\n    content: \"\";\n    display: table;\n}\n\n.clearfix:after {\n    clear: both;\n}\n\n/** * For IE 6/7 (trigger hasLayout) */\n.clearfix {\n    *zoom: 1;\n}\n```\n\n`.clearfix:after {content:\".\"; display:block; height:0; visibility:hidden; clear:both; } `\n这里也是一种方法，`content`为一个`.`的原因是在 Firefox 里，空的 content 会有额外间隙，所以使用`.`，此外的`height`等属性只是为了隐藏 content 不影响布局。而最新的方法 `display: table` 的 content 可以为空，且不会产生间隙，所以额外的属性都可以去除。\n\n在父元素使用`overflow`清除浮动的原理是，将父元素变为一个新的`BFC`，根据 BFC 的特点，BFC 可以包含浮动元素，所以，不仅仅是 overflow 能清除浮动，只要能触发父元素的BFC的方式都可以清除浮动，例如`display: table-cell`,`float:left`等等都可以触发BFC。\n\n传统的加一个空的div去清除浮动的方法有一个缺点，当子元素是浮动元素且有外边距是，清除浮动以后，父元素的高度仅仅是包裹子元素的高度（不包括外边距的高度），那么子元素明显会被边距顶出了父元素外边，虽然父元素会被撑开一段高度，但是由于子元素外边距的存在，父元素无法完全包裹子元素。\n\n关于BFC的知识，可浏览\n> http://www.cnblogs.com/leejersey/p/3991400.html\n\n> http://kayosite.com/remove-floating-style-in-detail.html\n","slug":"clearfix-闭合浮动","published":1,"updated":"2016-03-18T07:10:42.095Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqggs7ld0014ikvdn0b0abwl","content":"<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** *  For modern browsers */</span><br><span class=\"line\"></span><br><span class=\"line\">.clearfix:before, .clearfix:after &#123;</span><br><span class=\"line\">    content: \"\";</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.clearfix:after &#123;</span><br><span class=\"line\">    clear: both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/** * For IE 6/7 (trigger hasLayout) */</span><br><span class=\"line\">.clearfix &#123;</span><br><span class=\"line\">    *zoom: 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>.clearfix:after {content:&quot;.&quot;; display:block; height:0; visibility:hidden; clear:both; }</code><br>这里也是一种方法，<code>content</code>为一个<code>.</code>的原因是在 Firefox 里，空的 content 会有额外间隙，所以使用<code>.</code>，此外的<code>height</code>等属性只是为了隐藏 content 不影响布局。而最新的方法 <code>display: table</code> 的 content 可以为空，且不会产生间隙，所以额外的属性都可以去除。</p>\n<p>在父元素使用<code>overflow</code>清除浮动的原理是，将父元素变为一个新的<code>BFC</code>，根据 BFC 的特点，BFC 可以包含浮动元素，所以，不仅仅是 overflow 能清除浮动，只要能触发父元素的BFC的方式都可以清除浮动，例如<code>display: table-cell</code>,<code>float:left</code>等等都可以触发BFC。</p>\n<p>传统的加一个空的div去清除浮动的方法有一个缺点，当子元素是浮动元素且有外边距是，清除浮动以后，父元素的高度仅仅是包裹子元素的高度（不包括外边距的高度），那么子元素明显会被边距顶出了父元素外边，虽然父元素会被撑开一段高度，但是由于子元素外边距的存在，父元素无法完全包裹子元素。</p>\n<p>关于BFC的知识，可浏览</p>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/leejersey/p/3991400.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/leejersey/p/3991400.html</a></p>\n<p><a href=\"http://kayosite.com/remove-floating-style-in-detail.html\" target=\"_blank\" rel=\"external\">http://kayosite.com/remove-floating-style-in-detail.html</a></p>\n</blockquote>\n","excerpt":"","more":"<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** *  For modern browsers */</span><br><span class=\"line\"></span><br><span class=\"line\">.clearfix:before, .clearfix:after &#123;</span><br><span class=\"line\">    content: \"\";</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.clearfix:after &#123;</span><br><span class=\"line\">    clear: both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/** * For IE 6/7 (trigger hasLayout) */</span><br><span class=\"line\">.clearfix &#123;</span><br><span class=\"line\">    *zoom: 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>.clearfix:after {content:&quot;.&quot;; display:block; height:0; visibility:hidden; clear:both; }</code><br>这里也是一种方法，<code>content</code>为一个<code>.</code>的原因是在 Firefox 里，空的 content 会有额外间隙，所以使用<code>.</code>，此外的<code>height</code>等属性只是为了隐藏 content 不影响布局。而最新的方法 <code>display: table</code> 的 content 可以为空，且不会产生间隙，所以额外的属性都可以去除。</p>\n<p>在父元素使用<code>overflow</code>清除浮动的原理是，将父元素变为一个新的<code>BFC</code>，根据 BFC 的特点，BFC 可以包含浮动元素，所以，不仅仅是 overflow 能清除浮动，只要能触发父元素的BFC的方式都可以清除浮动，例如<code>display: table-cell</code>,<code>float:left</code>等等都可以触发BFC。</p>\n<p>传统的加一个空的div去清除浮动的方法有一个缺点，当子元素是浮动元素且有外边距是，清除浮动以后，父元素的高度仅仅是包裹子元素的高度（不包括外边距的高度），那么子元素明显会被边距顶出了父元素外边，虽然父元素会被撑开一段高度，但是由于子元素外边距的存在，父元素无法完全包裹子元素。</p>\n<p>关于BFC的知识，可浏览</p>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/leejersey/p/3991400.html\">http://www.cnblogs.com/leejersey/p/3991400.html</a></p>\n<p><a href=\"http://kayosite.com/remove-floating-style-in-detail.html\">http://kayosite.com/remove-floating-style-in-detail.html</a></p>\n</blockquote>\n"},{"title":"Javascript 事件监听 event 和 target 兼容性写法","date":"2016-03-18T05:54:21.000Z","_content":"IE,Chrome都有`window.event`对象\nFireFox没有`window.event`对象\n\n```javascript\nelem.onclick = function(event) {\n    var e = window.event || event;\n    var target = e.srcElement || e.target;\n}\n```\n\n以上写法能保证在这三个浏览器下获取事件对象和当前事件元素的兼容性。\n","source":"_posts/Javascript-事件监听-event-和-target-兼容性写法.md","raw":"---\ntitle: Javascript 事件监听 event 和 target 兼容性写法\ndate: 2016-03-18 13:54:21\ncategories: 前端\ntags: Javascript\n---\nIE,Chrome都有`window.event`对象\nFireFox没有`window.event`对象\n\n```javascript\nelem.onclick = function(event) {\n    var e = window.event || event;\n    var target = e.srcElement || e.target;\n}\n```\n\n以上写法能保证在这三个浏览器下获取事件对象和当前事件元素的兼容性。\n","slug":"Javascript-事件监听-event-和-target-兼容性写法","published":1,"updated":"2016-03-18T07:10:48.328Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqggs7ld0017ikvdkng1xbv5","content":"<p>IE,Chrome都有<code>window.event</code>对象<br>FireFox没有<code>window.event</code>对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elem.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> e = <span class=\"built_in\">window</span>.event || event;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> target = e.srcElement || e.target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上写法能保证在这三个浏览器下获取事件对象和当前事件元素的兼容性。</p>\n","excerpt":"","more":"<p>IE,Chrome都有<code>window.event</code>对象<br>FireFox没有<code>window.event</code>对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elem.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> e = <span class=\"built_in\">window</span>.event || event;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> target = e.srcElement || e.target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上写法能保证在这三个浏览器下获取事件对象和当前事件元素的兼容性。</p>\n"},{"title":"angular 注意点（长期更新）","date":"2016-06-05T09:30:38.000Z","_content":"> 这篇 blog 主要存放我在学习和使用 angular 踩到的坑和需要注意的点\n\n# ng-repeat\n> `ng-repeat` 用于标识某个 elem 需要重复输出，同时重复输出的内容需为唯一\n\n```html\n<div ng-app=\"app\" ng-controller=\"control\">\n    <h3 ng-repeat=\"content in repeatContent\">ng-repeat: {{ content }}</h3>\n</div>\n```\n\n```JavaScript\nlet app = angular.module(\"app\", []);\napp.controller(\"control\", ($scope) => {\n    // 输出李滨泓\n    $scope.repeatContent = [\"李\", \"滨\", \"泓\"];\n    // 下面存在两个“泓”，会报错\n    // $scope.repeatContent = [\"李\", \"滨\", \"泓\", \"泓\"];\n})\n```\n\n# provider, service, factory 之间的关系\n\n## factory\n> `factory` 很像 `service`，不同之处在于，service 在 Angular 中是一个单例对象，即当需要使用 service 时，使用 new 关键字来创建一个（也仅此一个）service。而 factory 则是一个普通的函数，当需要用时，他也仅仅是一个普通函数的调用方式，它可以返回各种形式的数据，例如通过返回一个功能函数的集合对象来将供与使用。\n\n定义：\n```Javascript\nlet app = angular.module(\"app\", []);\n\n// 这里可以注入 $http 等 Provider\napp.factory(\"Today\", () => {\n    let date = new Date();\n    return {\n        year: date.getFullYear(),\n        month: date.getMonth() + 1,\n        day: date.getDate()\n    };\n});\n```\n\n使用注入：\n```Javascript\napp.controller(\"control\", (Today) => {\n    console.log(Today.year);\n    console.log(Today.month);\n    console.log(Today.day);\n});\n```\n\n## service\n> `service` 在使用时是一个单例对象，同时也是一个 constructor，它的特点让它可以不返回任何东西，因为它使用 new 关键字新建，同时它可以用在 controller 之间的通讯与数据交互，因为 controller 在无用时其作用域链会被销毁（例如使用路由跳转到另一个页面，同时使用了另一个 controller）\n\n定义：\n```Javascript\nlet app = angular.module(\"app\", []);\n\n// 这里可以注入 $http 等 Provider\n// 注意这里不可以使用 arrow function\n// arrow function 不能作为 constructor\napp.service(\"Today\", function() {\n    let date = new Date();\n    this.year = date.getFullYear();\n    this.month = date.getMonth() + 1;\n    this.day = date.getDate();\n});\n```\n\n使用注入：\n```Javascript\napp.controller(\"control\", (Today) => {\n    console.log(Today.year);\n    console.log(Today.month);\n    console.log(Today.day);\n});\n```\n\n## provider\n> `provider` 是 `service` 的底层创建方式，可以理解 provider 是一个可配置版的 service，我们可以在正式注入 provider 前对 provider 进行一些参数的配置。\n\n定义：\n```Javascript\nlet app = angular.module(\"app\", []);\n\n// 这里可以注入 $http 等 Provider\n// 注意这里不可以使用 arrow function\n// arrow function 不能作为 constructor\napp.provider(\"Today\", function() {\n    this.date = new Date();\n    let self = this;\n\n    this.setDate = (year, month, day) => {\n        this.date = new Date(year, month - 1, day);\n    }\n\n    this.$get = () => {\n        return {\n            year: this.date.getFullYear(),\n            month: this.date.getMonth() + 1,\n            day: this.date.getDate()\n        };\n    };\n});\n```\n\n使用注入：\n```Javascript\n// 这里重新配置了今天的日期是 2015年2月15日\n// 注意这里注入的是 TodayProvider，使用驼峰命名来注入正确的需要配置的 provider\napp.config((TodayProvider) => {\n    TodayProvider.setDate(2015, 2, 15);\n});\n\napp.controller(\"control\", (Today) => {\n    console.log(Today.year);\n    console.log(Today.month);\n    console.log(Today.day);\n});\n```\n\n# handlebars 与 angular 符号解析冲突\n场景：\n> 当我使用 node.js 作为服务端，而其中使用了 handlebars 作为模板引擎，当 node.js 对某 URL 进行相应并 render，由于其模板使用 `{ {} }` 作为变量解析符号。同样地，angular 也使用 `{ {} }` 作为变量解析符号，所以当 node.js 进行 render 页面后，如果 `{ {} }` 内的变量不存在，则该个区域会被清空，而我的原意是这个作为 angular 的解析所用，而不是 handlebars 使用，同时我也想继续使用 handlebars，那么此时就需要将 angular 默认的 `{ {} }` 解析符号重新定义。即使用依赖注入 `$interpolateProvider` 进行定义，如下示例：\n\n```Javascript\napp.config($interpolateProvider => {\n    $interpolateProvider.startSymbol('{[{');\n    $interpolateProvider.endSymbol('}]}');\n});\n```\n\n# ng-annotate-loader\n> `ng-annotate-loader` 应用于 webpack + angular 的开发场景，是用于解决 angular 在进行 JS 压缩后导致依赖注入失效并出现错误的解决方法\n\n安装\n```bash\n$ npm install ng-annotate-loader --save-dev\n```\n\n配置\n```Javascript\n// webpack.config.js\n{\n    test: /\\.js?$/,\n    exclude: /(node_modules|bower_components)/,\n    loader: 'ng-annotate!babel?presets=es2015'\n},\n```\n\n# 双向数据绑定\n> 当我们使用非 Angular 自带的事件时，$scope 里的数据改变并不会引起 `$digest` 的 `dirty-checking` 循环，这将导致当 `model` 改变时，`view` 不会同步更新，这时我们需要自己主动触发更新\n\nHTML\n```html\n<div>{{ foo }}</div>\n<button id=\"addBtn\">go</button>\n```\n\nJavaScript\n```Javascript\napp.controller(\"control\", ($scope) => {\n    $scope.foo = 0;\n    document.getElementById(\"addBtn\").addEventListener(\"click\", () => {\n        $scope.foo++;\n    }, false);\n})\n```\n\n很明显，示例的意图是当点击 button 时，`foo` 自增长并更新 View，但是实际上，$scope.foo 是改变了，但是 View 并不会刷新，这是因为 foo 并没有一个 $watch 检测变化后 $apply，最终引起 $digest，所以我们需要自己触发 $apply 或者创建一个 $watch 来触发或检测数据变化\n\nJavaScript（使用 $apply）\n```Javascript\napp.controller(\"control\", ($scope) => {\n    $scope.foo = 0;\n    document.getElementById(\"addBtn\").addEventListener(\"click\", () => {\n        \n        $scope.$apply(function() {\n            $scope.foo++;\n        });\n\n    }, false);\n})\n```\n\nJavaScript（使用 $watch & $digest）\n```Javascript\napp.controller(\"control\", ($scope) => {\n    $scope.foo = 0;\n    $scope.flag = 0;\n\n    $scope.$watch(\"flag\", (newValue, oldValue) => {\n\n        // 当 $digest 循环检测 flag 时，如果新旧值不一致将调用该函数\n        $scope.foo = $scope.flag;\n    });\n\n    document.getElementById(\"addBtn\").addEventListener(\"click\", () => {\n       \n        $scope.flag++;\n        // 主动触发 $digest 循环\n        $scope.$digest();\n    }, false);\n})\n```\n\n## $watch(watchExpression, listener, [objectEquality])\n> 注册一个 `listener` 回调函数，在每次 `watchExpression` 的值发生改变时调用\n\n* `watchExpression` 在每次 `$digest` 执行时被调用，并返回要被检测的值（当多次输入同样的值时，`watchExpression` 不应该改变其自身的值，否则可能会引起多次的 $digest 循环，`watchExpression` 应该幂等）\n* `listener` 将在当前 `watchExpression` 返回值和上次的 `watchExpression` 返回值不一致时被调用（使用 `!==` 来严格地判断不一致性，而不是使用 `==` 来判断，不过 `objectEquality == true` 除外）\n* `objectEquality` 为 `boolean` 值，当为 `true` 时，将使用 `angular.equals` 来判断一致性，并使用 `angular.copy` 来保存此次的 Object 拷贝副本供给下一次的比较，这意味着复杂的对象检测将会有性能和内存上的问题\n\n## $apply([exp])\n> `$apply` 是 `$scope` 的一个函数，用于触发 `$digest` 循环\n\n$apply 伪代码\n```Javascript\nfunction $apply(expr) {\n    try {\n        return $eval(expr);\n    } catch (e) {\n        $exceptionHandler(e);\n    } finally {\n        $root.$digest();\n    }\n}\n```\n\n* 使用 `$eval(expr)` 执行 `expr` 表达式\n* 如果在执行过程中跑出 exception，那么执行 $exceptionHandler(e)\n* 最后无论结果，都会执行一次 `$digest` 循环","source":"_posts/angular-注意点-长期更新.md","raw":"---\ntitle: angular 注意点（长期更新）\ndate: 2016-06-05 17:30:38\ncategories:\n    - 前端\n    - Angular\ntags: Javascript\n---\n> 这篇 blog 主要存放我在学习和使用 angular 踩到的坑和需要注意的点\n\n# ng-repeat\n> `ng-repeat` 用于标识某个 elem 需要重复输出，同时重复输出的内容需为唯一\n\n```html\n<div ng-app=\"app\" ng-controller=\"control\">\n    <h3 ng-repeat=\"content in repeatContent\">ng-repeat: {{ content }}</h3>\n</div>\n```\n\n```JavaScript\nlet app = angular.module(\"app\", []);\napp.controller(\"control\", ($scope) => {\n    // 输出李滨泓\n    $scope.repeatContent = [\"李\", \"滨\", \"泓\"];\n    // 下面存在两个“泓”，会报错\n    // $scope.repeatContent = [\"李\", \"滨\", \"泓\", \"泓\"];\n})\n```\n\n# provider, service, factory 之间的关系\n\n## factory\n> `factory` 很像 `service`，不同之处在于，service 在 Angular 中是一个单例对象，即当需要使用 service 时，使用 new 关键字来创建一个（也仅此一个）service。而 factory 则是一个普通的函数，当需要用时，他也仅仅是一个普通函数的调用方式，它可以返回各种形式的数据，例如通过返回一个功能函数的集合对象来将供与使用。\n\n定义：\n```Javascript\nlet app = angular.module(\"app\", []);\n\n// 这里可以注入 $http 等 Provider\napp.factory(\"Today\", () => {\n    let date = new Date();\n    return {\n        year: date.getFullYear(),\n        month: date.getMonth() + 1,\n        day: date.getDate()\n    };\n});\n```\n\n使用注入：\n```Javascript\napp.controller(\"control\", (Today) => {\n    console.log(Today.year);\n    console.log(Today.month);\n    console.log(Today.day);\n});\n```\n\n## service\n> `service` 在使用时是一个单例对象，同时也是一个 constructor，它的特点让它可以不返回任何东西，因为它使用 new 关键字新建，同时它可以用在 controller 之间的通讯与数据交互，因为 controller 在无用时其作用域链会被销毁（例如使用路由跳转到另一个页面，同时使用了另一个 controller）\n\n定义：\n```Javascript\nlet app = angular.module(\"app\", []);\n\n// 这里可以注入 $http 等 Provider\n// 注意这里不可以使用 arrow function\n// arrow function 不能作为 constructor\napp.service(\"Today\", function() {\n    let date = new Date();\n    this.year = date.getFullYear();\n    this.month = date.getMonth() + 1;\n    this.day = date.getDate();\n});\n```\n\n使用注入：\n```Javascript\napp.controller(\"control\", (Today) => {\n    console.log(Today.year);\n    console.log(Today.month);\n    console.log(Today.day);\n});\n```\n\n## provider\n> `provider` 是 `service` 的底层创建方式，可以理解 provider 是一个可配置版的 service，我们可以在正式注入 provider 前对 provider 进行一些参数的配置。\n\n定义：\n```Javascript\nlet app = angular.module(\"app\", []);\n\n// 这里可以注入 $http 等 Provider\n// 注意这里不可以使用 arrow function\n// arrow function 不能作为 constructor\napp.provider(\"Today\", function() {\n    this.date = new Date();\n    let self = this;\n\n    this.setDate = (year, month, day) => {\n        this.date = new Date(year, month - 1, day);\n    }\n\n    this.$get = () => {\n        return {\n            year: this.date.getFullYear(),\n            month: this.date.getMonth() + 1,\n            day: this.date.getDate()\n        };\n    };\n});\n```\n\n使用注入：\n```Javascript\n// 这里重新配置了今天的日期是 2015年2月15日\n// 注意这里注入的是 TodayProvider，使用驼峰命名来注入正确的需要配置的 provider\napp.config((TodayProvider) => {\n    TodayProvider.setDate(2015, 2, 15);\n});\n\napp.controller(\"control\", (Today) => {\n    console.log(Today.year);\n    console.log(Today.month);\n    console.log(Today.day);\n});\n```\n\n# handlebars 与 angular 符号解析冲突\n场景：\n> 当我使用 node.js 作为服务端，而其中使用了 handlebars 作为模板引擎，当 node.js 对某 URL 进行相应并 render，由于其模板使用 `{ {} }` 作为变量解析符号。同样地，angular 也使用 `{ {} }` 作为变量解析符号，所以当 node.js 进行 render 页面后，如果 `{ {} }` 内的变量不存在，则该个区域会被清空，而我的原意是这个作为 angular 的解析所用，而不是 handlebars 使用，同时我也想继续使用 handlebars，那么此时就需要将 angular 默认的 `{ {} }` 解析符号重新定义。即使用依赖注入 `$interpolateProvider` 进行定义，如下示例：\n\n```Javascript\napp.config($interpolateProvider => {\n    $interpolateProvider.startSymbol('{[{');\n    $interpolateProvider.endSymbol('}]}');\n});\n```\n\n# ng-annotate-loader\n> `ng-annotate-loader` 应用于 webpack + angular 的开发场景，是用于解决 angular 在进行 JS 压缩后导致依赖注入失效并出现错误的解决方法\n\n安装\n```bash\n$ npm install ng-annotate-loader --save-dev\n```\n\n配置\n```Javascript\n// webpack.config.js\n{\n    test: /\\.js?$/,\n    exclude: /(node_modules|bower_components)/,\n    loader: 'ng-annotate!babel?presets=es2015'\n},\n```\n\n# 双向数据绑定\n> 当我们使用非 Angular 自带的事件时，$scope 里的数据改变并不会引起 `$digest` 的 `dirty-checking` 循环，这将导致当 `model` 改变时，`view` 不会同步更新，这时我们需要自己主动触发更新\n\nHTML\n```html\n<div>{{ foo }}</div>\n<button id=\"addBtn\">go</button>\n```\n\nJavaScript\n```Javascript\napp.controller(\"control\", ($scope) => {\n    $scope.foo = 0;\n    document.getElementById(\"addBtn\").addEventListener(\"click\", () => {\n        $scope.foo++;\n    }, false);\n})\n```\n\n很明显，示例的意图是当点击 button 时，`foo` 自增长并更新 View，但是实际上，$scope.foo 是改变了，但是 View 并不会刷新，这是因为 foo 并没有一个 $watch 检测变化后 $apply，最终引起 $digest，所以我们需要自己触发 $apply 或者创建一个 $watch 来触发或检测数据变化\n\nJavaScript（使用 $apply）\n```Javascript\napp.controller(\"control\", ($scope) => {\n    $scope.foo = 0;\n    document.getElementById(\"addBtn\").addEventListener(\"click\", () => {\n        \n        $scope.$apply(function() {\n            $scope.foo++;\n        });\n\n    }, false);\n})\n```\n\nJavaScript（使用 $watch & $digest）\n```Javascript\napp.controller(\"control\", ($scope) => {\n    $scope.foo = 0;\n    $scope.flag = 0;\n\n    $scope.$watch(\"flag\", (newValue, oldValue) => {\n\n        // 当 $digest 循环检测 flag 时，如果新旧值不一致将调用该函数\n        $scope.foo = $scope.flag;\n    });\n\n    document.getElementById(\"addBtn\").addEventListener(\"click\", () => {\n       \n        $scope.flag++;\n        // 主动触发 $digest 循环\n        $scope.$digest();\n    }, false);\n})\n```\n\n## $watch(watchExpression, listener, [objectEquality])\n> 注册一个 `listener` 回调函数，在每次 `watchExpression` 的值发生改变时调用\n\n* `watchExpression` 在每次 `$digest` 执行时被调用，并返回要被检测的值（当多次输入同样的值时，`watchExpression` 不应该改变其自身的值，否则可能会引起多次的 $digest 循环，`watchExpression` 应该幂等）\n* `listener` 将在当前 `watchExpression` 返回值和上次的 `watchExpression` 返回值不一致时被调用（使用 `!==` 来严格地判断不一致性，而不是使用 `==` 来判断，不过 `objectEquality == true` 除外）\n* `objectEquality` 为 `boolean` 值，当为 `true` 时，将使用 `angular.equals` 来判断一致性，并使用 `angular.copy` 来保存此次的 Object 拷贝副本供给下一次的比较，这意味着复杂的对象检测将会有性能和内存上的问题\n\n## $apply([exp])\n> `$apply` 是 `$scope` 的一个函数，用于触发 `$digest` 循环\n\n$apply 伪代码\n```Javascript\nfunction $apply(expr) {\n    try {\n        return $eval(expr);\n    } catch (e) {\n        $exceptionHandler(e);\n    } finally {\n        $root.$digest();\n    }\n}\n```\n\n* 使用 `$eval(expr)` 执行 `expr` 表达式\n* 如果在执行过程中跑出 exception，那么执行 $exceptionHandler(e)\n* 最后无论结果，都会执行一次 `$digest` 循环","slug":"angular-注意点-长期更新","published":1,"updated":"2016-06-13T03:04:36.579Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqggs7ld001aikvd6y505ff9","content":"<blockquote>\n<p>这篇 blog 主要存放我在学习和使用 angular 踩到的坑和需要注意的点</p>\n</blockquote>\n<h1 id=\"ng-repeat\"><a href=\"#ng-repeat\" class=\"headerlink\" title=\"ng-repeat\"></a>ng-repeat</h1><blockquote>\n<p><code>ng-repeat</code> 用于标识某个 elem 需要重复输出，同时重复输出的内容需为唯一</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"control\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"content in repeatContent\"</span>&gt;</span>ng-repeat: &#123;&#123; content &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> app = angular.module(<span class=\"string\">\"app\"</span>, []);</span><br><span class=\"line\">app.controller(<span class=\"string\">\"control\"</span>, ($scope) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 输出李滨泓</span></span><br><span class=\"line\">    $scope.repeatContent = [<span class=\"string\">\"李\"</span>, <span class=\"string\">\"滨\"</span>, <span class=\"string\">\"泓\"</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 下面存在两个“泓”，会报错</span></span><br><span class=\"line\">    <span class=\"comment\">// $scope.repeatContent = [\"李\", \"滨\", \"泓\", \"泓\"];</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"provider-service-factory-之间的关系\"><a href=\"#provider-service-factory-之间的关系\" class=\"headerlink\" title=\"provider, service, factory 之间的关系\"></a>provider, service, factory 之间的关系</h1><h2 id=\"factory\"><a href=\"#factory\" class=\"headerlink\" title=\"factory\"></a>factory</h2><blockquote>\n<p><code>factory</code> 很像 <code>service</code>，不同之处在于，service 在 Angular 中是一个单例对象，即当需要使用 service 时，使用 new 关键字来创建一个（也仅此一个）service。而 factory 则是一个普通的函数，当需要用时，他也仅仅是一个普通函数的调用方式，它可以返回各种形式的数据，例如通过返回一个功能函数的集合对象来将供与使用。</p>\n</blockquote>\n<p>定义：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> app = angular.module(<span class=\"string\">\"app\"</span>, []);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里可以注入 $http 等 Provider</span></span><br><span class=\"line\">app.factory(<span class=\"string\">\"Today\"</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        year: date.getFullYear(),</span><br><span class=\"line\">        month: date.getMonth() + <span class=\"number\">1</span>,</span><br><span class=\"line\">        day: date.getDate()</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>使用注入：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.controller(<span class=\"string\">\"control\"</span>, (Today) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Today.year);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Today.month);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Today.day);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"service\"><a href=\"#service\" class=\"headerlink\" title=\"service\"></a>service</h2><blockquote>\n<p><code>service</code> 在使用时是一个单例对象，同时也是一个 constructor，它的特点让它可以不返回任何东西，因为它使用 new 关键字新建，同时它可以用在 controller 之间的通讯与数据交互，因为 controller 在无用时其作用域链会被销毁（例如使用路由跳转到另一个页面，同时使用了另一个 controller）</p>\n</blockquote>\n<p>定义：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> app = angular.module(<span class=\"string\">\"app\"</span>, []);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里可以注入 $http 等 Provider</span></span><br><span class=\"line\"><span class=\"comment\">// 注意这里不可以使用 arrow function</span></span><br><span class=\"line\"><span class=\"comment\">// arrow function 不能作为 constructor</span></span><br><span class=\"line\">app.service(<span class=\"string\">\"Today\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.year = date.getFullYear();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.month = date.getMonth() + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.day = date.getDate();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>使用注入：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.controller(<span class=\"string\">\"control\"</span>, (Today) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Today.year);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Today.month);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Today.day);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"provider\"><a href=\"#provider\" class=\"headerlink\" title=\"provider\"></a>provider</h2><blockquote>\n<p><code>provider</code> 是 <code>service</code> 的底层创建方式，可以理解 provider 是一个可配置版的 service，我们可以在正式注入 provider 前对 provider 进行一些参数的配置。</p>\n</blockquote>\n<p>定义：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> app = angular.module(<span class=\"string\">\"app\"</span>, []);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里可以注入 $http 等 Provider</span></span><br><span class=\"line\"><span class=\"comment\">// 注意这里不可以使用 arrow function</span></span><br><span class=\"line\"><span class=\"comment\">// arrow function 不能作为 constructor</span></span><br><span class=\"line\">app.provider(<span class=\"string\">\"Today\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setDate = (year, month, day) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(year, month - <span class=\"number\">1</span>, day);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$get = () =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            year: <span class=\"keyword\">this</span>.date.getFullYear(),</span><br><span class=\"line\">            month: <span class=\"keyword\">this</span>.date.getMonth() + <span class=\"number\">1</span>,</span><br><span class=\"line\">            day: <span class=\"keyword\">this</span>.date.getDate()</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>使用注入：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里重新配置了今天的日期是 2015年2月15日</span></span><br><span class=\"line\"><span class=\"comment\">// 注意这里注入的是 TodayProvider，使用驼峰命名来注入正确的需要配置的 provider</span></span><br><span class=\"line\">app.config((TodayProvider) =&gt; &#123;</span><br><span class=\"line\">    TodayProvider.setDate(<span class=\"number\">2015</span>, <span class=\"number\">2</span>, <span class=\"number\">15</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.controller(<span class=\"string\">\"control\"</span>, (Today) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Today.year);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Today.month);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Today.day);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"handlebars-与-angular-符号解析冲突\"><a href=\"#handlebars-与-angular-符号解析冲突\" class=\"headerlink\" title=\"handlebars 与 angular 符号解析冲突\"></a>handlebars 与 angular 符号解析冲突</h1><p>场景：</p>\n<blockquote>\n<p>当我使用 node.js 作为服务端，而其中使用了 handlebars 作为模板引擎，当 node.js 对某 URL 进行相应并 render，由于其模板使用 <code>{ {} }</code> 作为变量解析符号。同样地，angular 也使用 <code>{ {} }</code> 作为变量解析符号，所以当 node.js 进行 render 页面后，如果 <code>{ {} }</code> 内的变量不存在，则该个区域会被清空，而我的原意是这个作为 angular 的解析所用，而不是 handlebars 使用，同时我也想继续使用 handlebars，那么此时就需要将 angular 默认的 <code>{ {} }</code> 解析符号重新定义。即使用依赖注入 <code>$interpolateProvider</code> 进行定义，如下示例：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.config($interpolateProvider =&gt; &#123;</span><br><span class=\"line\">    $interpolateProvider.startSymbol(<span class=\"string\">'&#123;[&#123;'</span>);</span><br><span class=\"line\">    $interpolateProvider.endSymbol(<span class=\"string\">'&#125;]&#125;'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"ng-annotate-loader\"><a href=\"#ng-annotate-loader\" class=\"headerlink\" title=\"ng-annotate-loader\"></a>ng-annotate-loader</h1><blockquote>\n<p><code>ng-annotate-loader</code> 应用于 webpack + angular 的开发场景，是用于解决 angular 在进行 JS 压缩后导致依赖注入失效并出现错误的解决方法</p>\n</blockquote>\n<p>安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install ng-annotate-loader --save-dev</span><br></pre></td></tr></table></figure></p>\n<p>配置<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.js?$/</span>,</span><br><span class=\"line\">    exclude: <span class=\"regexp\">/(node_modules|bower_components)/</span>,</span><br><span class=\"line\">    loader: <span class=\"string\">'ng-annotate!babel?presets=es2015'</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"双向数据绑定\"><a href=\"#双向数据绑定\" class=\"headerlink\" title=\"双向数据绑定\"></a>双向数据绑定</h1><blockquote>\n<p>当我们使用非 Angular 自带的事件时，$scope 里的数据改变并不会引起 <code>$digest</code> 的 <code>dirty-checking</code> 循环，这将导致当 <code>model</code> 改变时，<code>view</code> 不会同步更新，这时我们需要自己主动触发更新</p>\n</blockquote>\n<p>HTML<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123; foo &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"addBtn\"</span>&gt;</span>go<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>JavaScript<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.controller(<span class=\"string\">\"control\"</span>, ($scope) =&gt; &#123;</span><br><span class=\"line\">    $scope.foo = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"addBtn\"</span>).addEventListener(<span class=\"string\">\"click\"</span>, () =&gt; &#123;</span><br><span class=\"line\">        $scope.foo++;</span><br><span class=\"line\">    &#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>很明显，示例的意图是当点击 button 时，<code>foo</code> 自增长并更新 View，但是实际上，$scope.foo 是改变了，但是 View 并不会刷新，这是因为 foo 并没有一个 $watch 检测变化后 $apply，最终引起 $digest，所以我们需要自己触发 $apply 或者创建一个 $watch 来触发或检测数据变化</p>\n<p>JavaScript（使用 $apply）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.controller(<span class=\"string\">\"control\"</span>, ($scope) =&gt; &#123;</span><br><span class=\"line\">    $scope.foo = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"addBtn\"</span>).addEventListener(<span class=\"string\">\"click\"</span>, () =&gt; &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        $scope.$apply(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            $scope.foo++;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>JavaScript（使用 $watch &amp; $digest）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.controller(<span class=\"string\">\"control\"</span>, ($scope) =&gt; &#123;</span><br><span class=\"line\">    $scope.foo = <span class=\"number\">0</span>;</span><br><span class=\"line\">    $scope.flag = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    $scope.$watch(<span class=\"string\">\"flag\"</span>, (newValue, oldValue) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 当 $digest 循环检测 flag 时，如果新旧值不一致将调用该函数</span></span><br><span class=\"line\">        $scope.foo = $scope.flag;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"addBtn\"</span>).addEventListener(<span class=\"string\">\"click\"</span>, () =&gt; &#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">        $scope.flag++;</span><br><span class=\"line\">        <span class=\"comment\">// 主动触发 $digest 循环</span></span><br><span class=\"line\">        $scope.$digest();</span><br><span class=\"line\">    &#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"watch-watchExpression-listener-objectEquality\"><a href=\"#watch-watchExpression-listener-objectEquality\" class=\"headerlink\" title=\"$watch(watchExpression, listener, [objectEquality])\"></a>$watch(watchExpression, listener, [objectEquality])</h2><blockquote>\n<p>注册一个 <code>listener</code> 回调函数，在每次 <code>watchExpression</code> 的值发生改变时调用</p>\n</blockquote>\n<ul>\n<li><code>watchExpression</code> 在每次 <code>$digest</code> 执行时被调用，并返回要被检测的值（当多次输入同样的值时，<code>watchExpression</code> 不应该改变其自身的值，否则可能会引起多次的 $digest 循环，<code>watchExpression</code> 应该幂等）</li>\n<li><code>listener</code> 将在当前 <code>watchExpression</code> 返回值和上次的 <code>watchExpression</code> 返回值不一致时被调用（使用 <code>!==</code> 来严格地判断不一致性，而不是使用 <code>==</code> 来判断，不过 <code>objectEquality == true</code> 除外）</li>\n<li><code>objectEquality</code> 为 <code>boolean</code> 值，当为 <code>true</code> 时，将使用 <code>angular.equals</code> 来判断一致性，并使用 <code>angular.copy</code> 来保存此次的 Object 拷贝副本供给下一次的比较，这意味着复杂的对象检测将会有性能和内存上的问题</li>\n</ul>\n<h2 id=\"apply-exp\"><a href=\"#apply-exp\" class=\"headerlink\" title=\"$apply([exp])\"></a>$apply([exp])</h2><blockquote>\n<p><code>$apply</code> 是 <code>$scope</code> 的一个函数，用于触发 <code>$digest</code> 循环</p>\n</blockquote>\n<p>$apply 伪代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$apply</span>(<span class=\"params\">expr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $<span class=\"built_in\">eval</span>(expr);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        $exceptionHandler(e);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        $root.$digest();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>使用 <code>$eval(expr)</code> 执行 <code>expr</code> 表达式</li>\n<li>如果在执行过程中跑出 exception，那么执行 $exceptionHandler(e)</li>\n<li>最后无论结果，都会执行一次 <code>$digest</code> 循环</li>\n</ul>\n","excerpt":"","more":"<blockquote>\n<p>这篇 blog 主要存放我在学习和使用 angular 踩到的坑和需要注意的点</p>\n</blockquote>\n<h1 id=\"ng-repeat\"><a href=\"#ng-repeat\" class=\"headerlink\" title=\"ng-repeat\"></a>ng-repeat</h1><blockquote>\n<p><code>ng-repeat</code> 用于标识某个 elem 需要重复输出，同时重复输出的内容需为唯一</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"app\"</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"control\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"content in repeatContent\"</span>&gt;</span>ng-repeat: &#123;&#123; content &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> app = angular.module(<span class=\"string\">\"app\"</span>, []);</span><br><span class=\"line\">app.controller(<span class=\"string\">\"control\"</span>, ($scope) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 输出李滨泓</span></span><br><span class=\"line\">    $scope.repeatContent = [<span class=\"string\">\"李\"</span>, <span class=\"string\">\"滨\"</span>, <span class=\"string\">\"泓\"</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 下面存在两个“泓”，会报错</span></span><br><span class=\"line\">    <span class=\"comment\">// $scope.repeatContent = [\"李\", \"滨\", \"泓\", \"泓\"];</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"provider-service-factory-之间的关系\"><a href=\"#provider-service-factory-之间的关系\" class=\"headerlink\" title=\"provider, service, factory 之间的关系\"></a>provider, service, factory 之间的关系</h1><h2 id=\"factory\"><a href=\"#factory\" class=\"headerlink\" title=\"factory\"></a>factory</h2><blockquote>\n<p><code>factory</code> 很像 <code>service</code>，不同之处在于，service 在 Angular 中是一个单例对象，即当需要使用 service 时，使用 new 关键字来创建一个（也仅此一个）service。而 factory 则是一个普通的函数，当需要用时，他也仅仅是一个普通函数的调用方式，它可以返回各种形式的数据，例如通过返回一个功能函数的集合对象来将供与使用。</p>\n</blockquote>\n<p>定义：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> app = angular.module(<span class=\"string\">\"app\"</span>, []);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里可以注入 $http 等 Provider</span></span><br><span class=\"line\">app.factory(<span class=\"string\">\"Today\"</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        year: date.getFullYear(),</span><br><span class=\"line\">        month: date.getMonth() + <span class=\"number\">1</span>,</span><br><span class=\"line\">        day: date.getDate()</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>使用注入：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.controller(<span class=\"string\">\"control\"</span>, (Today) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Today.year);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Today.month);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Today.day);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"service\"><a href=\"#service\" class=\"headerlink\" title=\"service\"></a>service</h2><blockquote>\n<p><code>service</code> 在使用时是一个单例对象，同时也是一个 constructor，它的特点让它可以不返回任何东西，因为它使用 new 关键字新建，同时它可以用在 controller 之间的通讯与数据交互，因为 controller 在无用时其作用域链会被销毁（例如使用路由跳转到另一个页面，同时使用了另一个 controller）</p>\n</blockquote>\n<p>定义：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> app = angular.module(<span class=\"string\">\"app\"</span>, []);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里可以注入 $http 等 Provider</span></span><br><span class=\"line\"><span class=\"comment\">// 注意这里不可以使用 arrow function</span></span><br><span class=\"line\"><span class=\"comment\">// arrow function 不能作为 constructor</span></span><br><span class=\"line\">app.service(<span class=\"string\">\"Today\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.year = date.getFullYear();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.month = date.getMonth() + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.day = date.getDate();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>使用注入：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.controller(<span class=\"string\">\"control\"</span>, (Today) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Today.year);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Today.month);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Today.day);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"provider\"><a href=\"#provider\" class=\"headerlink\" title=\"provider\"></a>provider</h2><blockquote>\n<p><code>provider</code> 是 <code>service</code> 的底层创建方式，可以理解 provider 是一个可配置版的 service，我们可以在正式注入 provider 前对 provider 进行一些参数的配置。</p>\n</blockquote>\n<p>定义：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> app = angular.module(<span class=\"string\">\"app\"</span>, []);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里可以注入 $http 等 Provider</span></span><br><span class=\"line\"><span class=\"comment\">// 注意这里不可以使用 arrow function</span></span><br><span class=\"line\"><span class=\"comment\">// arrow function 不能作为 constructor</span></span><br><span class=\"line\">app.provider(<span class=\"string\">\"Today\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setDate = (year, month, day) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(year, month - <span class=\"number\">1</span>, day);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$get = () =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            year: <span class=\"keyword\">this</span>.date.getFullYear(),</span><br><span class=\"line\">            month: <span class=\"keyword\">this</span>.date.getMonth() + <span class=\"number\">1</span>,</span><br><span class=\"line\">            day: <span class=\"keyword\">this</span>.date.getDate()</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>使用注入：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里重新配置了今天的日期是 2015年2月15日</span></span><br><span class=\"line\"><span class=\"comment\">// 注意这里注入的是 TodayProvider，使用驼峰命名来注入正确的需要配置的 provider</span></span><br><span class=\"line\">app.config((TodayProvider) =&gt; &#123;</span><br><span class=\"line\">    TodayProvider.setDate(<span class=\"number\">2015</span>, <span class=\"number\">2</span>, <span class=\"number\">15</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.controller(<span class=\"string\">\"control\"</span>, (Today) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Today.year);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Today.month);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Today.day);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"handlebars-与-angular-符号解析冲突\"><a href=\"#handlebars-与-angular-符号解析冲突\" class=\"headerlink\" title=\"handlebars 与 angular 符号解析冲突\"></a>handlebars 与 angular 符号解析冲突</h1><p>场景：</p>\n<blockquote>\n<p>当我使用 node.js 作为服务端，而其中使用了 handlebars 作为模板引擎，当 node.js 对某 URL 进行相应并 render，由于其模板使用 <code>{ {} }</code> 作为变量解析符号。同样地，angular 也使用 <code>{ {} }</code> 作为变量解析符号，所以当 node.js 进行 render 页面后，如果 <code>{ {} }</code> 内的变量不存在，则该个区域会被清空，而我的原意是这个作为 angular 的解析所用，而不是 handlebars 使用，同时我也想继续使用 handlebars，那么此时就需要将 angular 默认的 <code>{ {} }</code> 解析符号重新定义。即使用依赖注入 <code>$interpolateProvider</code> 进行定义，如下示例：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.config($interpolateProvider =&gt; &#123;</span><br><span class=\"line\">    $interpolateProvider.startSymbol(<span class=\"string\">'&#123;[&#123;'</span>);</span><br><span class=\"line\">    $interpolateProvider.endSymbol(<span class=\"string\">'&#125;]&#125;'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"ng-annotate-loader\"><a href=\"#ng-annotate-loader\" class=\"headerlink\" title=\"ng-annotate-loader\"></a>ng-annotate-loader</h1><blockquote>\n<p><code>ng-annotate-loader</code> 应用于 webpack + angular 的开发场景，是用于解决 angular 在进行 JS 压缩后导致依赖注入失效并出现错误的解决方法</p>\n</blockquote>\n<p>安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install ng-annotate-loader --save-dev</span><br></pre></td></tr></table></figure></p>\n<p>配置<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.js?$/</span>,</span><br><span class=\"line\">    exclude: <span class=\"regexp\">/(node_modules|bower_components)/</span>,</span><br><span class=\"line\">    loader: <span class=\"string\">'ng-annotate!babel?presets=es2015'</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"双向数据绑定\"><a href=\"#双向数据绑定\" class=\"headerlink\" title=\"双向数据绑定\"></a>双向数据绑定</h1><blockquote>\n<p>当我们使用非 Angular 自带的事件时，$scope 里的数据改变并不会引起 <code>$digest</code> 的 <code>dirty-checking</code> 循环，这将导致当 <code>model</code> 改变时，<code>view</code> 不会同步更新，这时我们需要自己主动触发更新</p>\n</blockquote>\n<p>HTML<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123; foo &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"addBtn\"</span>&gt;</span>go<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>JavaScript<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.controller(<span class=\"string\">\"control\"</span>, ($scope) =&gt; &#123;</span><br><span class=\"line\">    $scope.foo = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"addBtn\"</span>).addEventListener(<span class=\"string\">\"click\"</span>, () =&gt; &#123;</span><br><span class=\"line\">        $scope.foo++;</span><br><span class=\"line\">    &#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>很明显，示例的意图是当点击 button 时，<code>foo</code> 自增长并更新 View，但是实际上，$scope.foo 是改变了，但是 View 并不会刷新，这是因为 foo 并没有一个 $watch 检测变化后 $apply，最终引起 $digest，所以我们需要自己触发 $apply 或者创建一个 $watch 来触发或检测数据变化</p>\n<p>JavaScript（使用 $apply）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.controller(<span class=\"string\">\"control\"</span>, ($scope) =&gt; &#123;</span><br><span class=\"line\">    $scope.foo = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"addBtn\"</span>).addEventListener(<span class=\"string\">\"click\"</span>, () =&gt; &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        $scope.$apply(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            $scope.foo++;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>JavaScript（使用 $watch &amp; $digest）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.controller(<span class=\"string\">\"control\"</span>, ($scope) =&gt; &#123;</span><br><span class=\"line\">    $scope.foo = <span class=\"number\">0</span>;</span><br><span class=\"line\">    $scope.flag = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    $scope.$watch(<span class=\"string\">\"flag\"</span>, (newValue, oldValue) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 当 $digest 循环检测 flag 时，如果新旧值不一致将调用该函数</span></span><br><span class=\"line\">        $scope.foo = $scope.flag;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"addBtn\"</span>).addEventListener(<span class=\"string\">\"click\"</span>, () =&gt; &#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">        $scope.flag++;</span><br><span class=\"line\">        <span class=\"comment\">// 主动触发 $digest 循环</span></span><br><span class=\"line\">        $scope.$digest();</span><br><span class=\"line\">    &#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"watch-watchExpression-listener-objectEquality\"><a href=\"#watch-watchExpression-listener-objectEquality\" class=\"headerlink\" title=\"$watch(watchExpression, listener, [objectEquality])\"></a>$watch(watchExpression, listener, [objectEquality])</h2><blockquote>\n<p>注册一个 <code>listener</code> 回调函数，在每次 <code>watchExpression</code> 的值发生改变时调用</p>\n</blockquote>\n<ul>\n<li><code>watchExpression</code> 在每次 <code>$digest</code> 执行时被调用，并返回要被检测的值（当多次输入同样的值时，<code>watchExpression</code> 不应该改变其自身的值，否则可能会引起多次的 $digest 循环，<code>watchExpression</code> 应该幂等）</li>\n<li><code>listener</code> 将在当前 <code>watchExpression</code> 返回值和上次的 <code>watchExpression</code> 返回值不一致时被调用（使用 <code>!==</code> 来严格地判断不一致性，而不是使用 <code>==</code> 来判断，不过 <code>objectEquality == true</code> 除外）</li>\n<li><code>objectEquality</code> 为 <code>boolean</code> 值，当为 <code>true</code> 时，将使用 <code>angular.equals</code> 来判断一致性，并使用 <code>angular.copy</code> 来保存此次的 Object 拷贝副本供给下一次的比较，这意味着复杂的对象检测将会有性能和内存上的问题</li>\n</ul>\n<h2 id=\"apply-exp\"><a href=\"#apply-exp\" class=\"headerlink\" title=\"$apply([exp])\"></a>$apply([exp])</h2><blockquote>\n<p><code>$apply</code> 是 <code>$scope</code> 的一个函数，用于触发 <code>$digest</code> 循环</p>\n</blockquote>\n<p>$apply 伪代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$apply</span>(<span class=\"params\">expr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $<span class=\"built_in\">eval</span>(expr);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        $exceptionHandler(e);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        $root.$digest();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>使用 <code>$eval(expr)</code> 执行 <code>expr</code> 表达式</li>\n<li>如果在执行过程中跑出 exception，那么执行 $exceptionHandler(e)</li>\n<li>最后无论结果，都会执行一次 <code>$digest</code> 循环</li>\n</ul>\n"},{"title":"ES6 学习笔记（五）","date":"2016-04-21T05:57:05.000Z","_content":"\n# Set\n> Set 是一个类数组的数据结构，但是它的值都是独一无二的，并且它是一个构造函数\n\nSet 有以下几个特点\n* 值是不重复的\n* NaN 等于自身\n* 添加值的时候不会进行类型转换，5 和 '5' 是不一样的\n* 可以接受一组数组进行初始化，会自动过滤重复的数\n* 两个空对象不互相相等\n\n## Set 的方法\n\n* Set.prototype.constructor：构造函数，默认就是Set函数\n* Set.prototype.size：返回Set实例的成员总数\n* add(value)：添加某个值，返回Set结构本身，由于返回值的特点，可以链式调用\n```JavaScript\ns.add(1).add(2).add(2);\n```\n* delete(value)：删除某个值，返回一个布尔值，表示删除是否成功\n* has(value)：返回一个布尔值，表示该值是否为Set的成员\n* clear()：清除所有成员，没有返回值\n* keys()：返回一个键名的遍历器\n* values()：返回一个键值的遍历器\n* entries()：返回一个键值对的遍历器\n* forEach()：使用回调函数遍历每个成员\n\n\n# WeakSet\n\nWeakSet 有以下几个特点\n* 加入成员只能是对象\n* 成员都是弱引用，即垃圾回收机制不会因其引用对象而保持对象的存在\n* 无法引用成员对象\n* 无法变量成员对象\n\n## WeakSet 的方法\n\n* WeakSet.prototype.add(value)：向WeakSet实例添加一个新成员\n* WeakSet.prototype.delete(value)：清除WeakSet实例的指定成员\n* WeakSet.prototype.has(value)：返回一个布尔值，表示某个值是否在WeakSet实例之中\n\n# Map\n> 与对象的 key-value 结构类似的一种集合数据结构，不用的是 Map 可以使用任意一种类型的值作为 key，不会发生自动转换为字符串的情况\n\n* size：返回Map结构的成员总数\n* set(key, value)：设置key所对应的键值，然后返回整个Map结构。如果key已经有值，则键值会被更新，否则就新生成该键\n* get(key)：读取key对应的键值，如果找不到key，返回undefined\n* has(key)：返回一个布尔值，表示某个键是否在Map数据结构中\n* delete(key)：删除某个键，返回true。如果删除失败，返回false\n* clear()：清除所有成员，没有返回值\n\n# WeakMap\n> 与 WeakSet 的特点类似，不过这个相对于 Map 的数据结构的，只能使用 `get()`、`set()`、`has()`、`delete()`\n\n> 以上实例代码大部分来自阮一峰老师的 《ECMAScript 6 入门》 一书\n> 书籍在线阅读地址: http://es6.ruanyifeng.com/#README\n","source":"_posts/ES6-学习笔记（五）.md","raw":"---\ntitle: ES6 学习笔记（五）\ndate: 2016-04-21 13:57:05\ncategories:\n    - 前端\n    - ECMAScript 6\ntags: Javascript\n---\n\n# Set\n> Set 是一个类数组的数据结构，但是它的值都是独一无二的，并且它是一个构造函数\n\nSet 有以下几个特点\n* 值是不重复的\n* NaN 等于自身\n* 添加值的时候不会进行类型转换，5 和 '5' 是不一样的\n* 可以接受一组数组进行初始化，会自动过滤重复的数\n* 两个空对象不互相相等\n\n## Set 的方法\n\n* Set.prototype.constructor：构造函数，默认就是Set函数\n* Set.prototype.size：返回Set实例的成员总数\n* add(value)：添加某个值，返回Set结构本身，由于返回值的特点，可以链式调用\n```JavaScript\ns.add(1).add(2).add(2);\n```\n* delete(value)：删除某个值，返回一个布尔值，表示删除是否成功\n* has(value)：返回一个布尔值，表示该值是否为Set的成员\n* clear()：清除所有成员，没有返回值\n* keys()：返回一个键名的遍历器\n* values()：返回一个键值的遍历器\n* entries()：返回一个键值对的遍历器\n* forEach()：使用回调函数遍历每个成员\n\n\n# WeakSet\n\nWeakSet 有以下几个特点\n* 加入成员只能是对象\n* 成员都是弱引用，即垃圾回收机制不会因其引用对象而保持对象的存在\n* 无法引用成员对象\n* 无法变量成员对象\n\n## WeakSet 的方法\n\n* WeakSet.prototype.add(value)：向WeakSet实例添加一个新成员\n* WeakSet.prototype.delete(value)：清除WeakSet实例的指定成员\n* WeakSet.prototype.has(value)：返回一个布尔值，表示某个值是否在WeakSet实例之中\n\n# Map\n> 与对象的 key-value 结构类似的一种集合数据结构，不用的是 Map 可以使用任意一种类型的值作为 key，不会发生自动转换为字符串的情况\n\n* size：返回Map结构的成员总数\n* set(key, value)：设置key所对应的键值，然后返回整个Map结构。如果key已经有值，则键值会被更新，否则就新生成该键\n* get(key)：读取key对应的键值，如果找不到key，返回undefined\n* has(key)：返回一个布尔值，表示某个键是否在Map数据结构中\n* delete(key)：删除某个键，返回true。如果删除失败，返回false\n* clear()：清除所有成员，没有返回值\n\n# WeakMap\n> 与 WeakSet 的特点类似，不过这个相对于 Map 的数据结构的，只能使用 `get()`、`set()`、`has()`、`delete()`\n\n> 以上实例代码大部分来自阮一峰老师的 《ECMAScript 6 入门》 一书\n> 书籍在线阅读地址: http://es6.ruanyifeng.com/#README\n","slug":"ES6-学习笔记（五）","published":1,"updated":"2016-04-23T15:04:06.033Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqggs7lt001dikvdd8hgv3rj","content":"<h1 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h1><blockquote>\n<p>Set 是一个类数组的数据结构，但是它的值都是独一无二的，并且它是一个构造函数</p>\n</blockquote>\n<p>Set 有以下几个特点</p>\n<ul>\n<li>值是不重复的</li>\n<li>NaN 等于自身</li>\n<li>添加值的时候不会进行类型转换，5 和 ‘5’ 是不一样的</li>\n<li>可以接受一组数组进行初始化，会自动过滤重复的数</li>\n<li>两个空对象不互相相等</li>\n</ul>\n<h2 id=\"Set-的方法\"><a href=\"#Set-的方法\" class=\"headerlink\" title=\"Set 的方法\"></a>Set 的方法</h2><ul>\n<li>Set.prototype.constructor：构造函数，默认就是Set函数</li>\n<li>Set.prototype.size：返回Set实例的成员总数</li>\n<li><p>add(value)：添加某个值，返回Set结构本身，由于返回值的特点，可以链式调用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.add(<span class=\"number\">1</span>).add(<span class=\"number\">2</span>).add(<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功</p>\n</li>\n<li>has(value)：返回一个布尔值，表示该值是否为Set的成员</li>\n<li>clear()：清除所有成员，没有返回值</li>\n<li>keys()：返回一个键名的遍历器</li>\n<li>values()：返回一个键值的遍历器</li>\n<li>entries()：返回一个键值对的遍历器</li>\n<li>forEach()：使用回调函数遍历每个成员</li>\n</ul>\n<h1 id=\"WeakSet\"><a href=\"#WeakSet\" class=\"headerlink\" title=\"WeakSet\"></a>WeakSet</h1><p>WeakSet 有以下几个特点</p>\n<ul>\n<li>加入成员只能是对象</li>\n<li>成员都是弱引用，即垃圾回收机制不会因其引用对象而保持对象的存在</li>\n<li>无法引用成员对象</li>\n<li>无法变量成员对象</li>\n</ul>\n<h2 id=\"WeakSet-的方法\"><a href=\"#WeakSet-的方法\" class=\"headerlink\" title=\"WeakSet 的方法\"></a>WeakSet 的方法</h2><ul>\n<li>WeakSet.prototype.add(value)：向WeakSet实例添加一个新成员</li>\n<li>WeakSet.prototype.delete(value)：清除WeakSet实例的指定成员</li>\n<li>WeakSet.prototype.has(value)：返回一个布尔值，表示某个值是否在WeakSet实例之中</li>\n</ul>\n<h1 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h1><blockquote>\n<p>与对象的 key-value 结构类似的一种集合数据结构，不用的是 Map 可以使用任意一种类型的值作为 key，不会发生自动转换为字符串的情况</p>\n</blockquote>\n<ul>\n<li>size：返回Map结构的成员总数</li>\n<li>set(key, value)：设置key所对应的键值，然后返回整个Map结构。如果key已经有值，则键值会被更新，否则就新生成该键</li>\n<li>get(key)：读取key对应的键值，如果找不到key，返回undefined</li>\n<li>has(key)：返回一个布尔值，表示某个键是否在Map数据结构中</li>\n<li>delete(key)：删除某个键，返回true。如果删除失败，返回false</li>\n<li>clear()：清除所有成员，没有返回值</li>\n</ul>\n<h1 id=\"WeakMap\"><a href=\"#WeakMap\" class=\"headerlink\" title=\"WeakMap\"></a>WeakMap</h1><blockquote>\n<p>与 WeakSet 的特点类似，不过这个相对于 Map 的数据结构的，只能使用 <code>get()</code>、<code>set()</code>、<code>has()</code>、<code>delete()</code></p>\n<p>以上实例代码大部分来自阮一峰老师的 《ECMAScript 6 入门》 一书<br>书籍在线阅读地址: <a href=\"http://es6.ruanyifeng.com/#README\" target=\"_blank\" rel=\"external\">http://es6.ruanyifeng.com/#README</a></p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h1><blockquote>\n<p>Set 是一个类数组的数据结构，但是它的值都是独一无二的，并且它是一个构造函数</p>\n</blockquote>\n<p>Set 有以下几个特点</p>\n<ul>\n<li>值是不重复的</li>\n<li>NaN 等于自身</li>\n<li>添加值的时候不会进行类型转换，5 和 ‘5’ 是不一样的</li>\n<li>可以接受一组数组进行初始化，会自动过滤重复的数</li>\n<li>两个空对象不互相相等</li>\n</ul>\n<h2 id=\"Set-的方法\"><a href=\"#Set-的方法\" class=\"headerlink\" title=\"Set 的方法\"></a>Set 的方法</h2><ul>\n<li>Set.prototype.constructor：构造函数，默认就是Set函数</li>\n<li>Set.prototype.size：返回Set实例的成员总数</li>\n<li><p>add(value)：添加某个值，返回Set结构本身，由于返回值的特点，可以链式调用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.add(<span class=\"number\">1</span>).add(<span class=\"number\">2</span>).add(<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功</p>\n</li>\n<li>has(value)：返回一个布尔值，表示该值是否为Set的成员</li>\n<li>clear()：清除所有成员，没有返回值</li>\n<li>keys()：返回一个键名的遍历器</li>\n<li>values()：返回一个键值的遍历器</li>\n<li>entries()：返回一个键值对的遍历器</li>\n<li>forEach()：使用回调函数遍历每个成员</li>\n</ul>\n<h1 id=\"WeakSet\"><a href=\"#WeakSet\" class=\"headerlink\" title=\"WeakSet\"></a>WeakSet</h1><p>WeakSet 有以下几个特点</p>\n<ul>\n<li>加入成员只能是对象</li>\n<li>成员都是弱引用，即垃圾回收机制不会因其引用对象而保持对象的存在</li>\n<li>无法引用成员对象</li>\n<li>无法变量成员对象</li>\n</ul>\n<h2 id=\"WeakSet-的方法\"><a href=\"#WeakSet-的方法\" class=\"headerlink\" title=\"WeakSet 的方法\"></a>WeakSet 的方法</h2><ul>\n<li>WeakSet.prototype.add(value)：向WeakSet实例添加一个新成员</li>\n<li>WeakSet.prototype.delete(value)：清除WeakSet实例的指定成员</li>\n<li>WeakSet.prototype.has(value)：返回一个布尔值，表示某个值是否在WeakSet实例之中</li>\n</ul>\n<h1 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h1><blockquote>\n<p>与对象的 key-value 结构类似的一种集合数据结构，不用的是 Map 可以使用任意一种类型的值作为 key，不会发生自动转换为字符串的情况</p>\n</blockquote>\n<ul>\n<li>size：返回Map结构的成员总数</li>\n<li>set(key, value)：设置key所对应的键值，然后返回整个Map结构。如果key已经有值，则键值会被更新，否则就新生成该键</li>\n<li>get(key)：读取key对应的键值，如果找不到key，返回undefined</li>\n<li>has(key)：返回一个布尔值，表示某个键是否在Map数据结构中</li>\n<li>delete(key)：删除某个键，返回true。如果删除失败，返回false</li>\n<li>clear()：清除所有成员，没有返回值</li>\n</ul>\n<h1 id=\"WeakMap\"><a href=\"#WeakMap\" class=\"headerlink\" title=\"WeakMap\"></a>WeakMap</h1><blockquote>\n<p>与 WeakSet 的特点类似，不过这个相对于 Map 的数据结构的，只能使用 <code>get()</code>、<code>set()</code>、<code>has()</code>、<code>delete()</code></p>\n<p>以上实例代码大部分来自阮一峰老师的 《ECMAScript 6 入门》 一书<br>书籍在线阅读地址: <a href=\"http://es6.ruanyifeng.com/#README\">http://es6.ruanyifeng.com/#README</a></p>\n</blockquote>\n"},{"title":"DAY5 完成 & 总结","date":"2016-03-27T08:20:18.000Z","_content":"## 最终效果图\n![](http://7xoehm.com1.z0.glb.clouddn.com/githubzuizhong.png)\n\n## 演示地址\n> http://www.libinhong.com:90/\n\n## 踩到的坑\n\n* Backbone 的 View 监听本身 Model 的 `change` 事件，仅在 Model 的属性实际发生变化才会被触发，如果 set 一个相同的值进 Model，实际上并不会触发事件\n\n* Backbone 的 View 中的 `el` 代表了该 View 对应的 dom 节点，同时，在该 View 中定义的事件所对应的 dom 只能处于该 el 下，否则无法正确找到 dom 并添加事件\n\n* Backbone 的 `events` 无法绑定 `audio` 的事件，估计是因为 JQuery 无相对应的事件，所以只能自己手动绑定事件\n\n## 总结\n\n* 最终没有使用 `require.js`\n\n* 在使用 Backbone 的过程中，V 层聚集了大量的渲染页面的逻辑，C 层则更多的提供了集合的功能，并且向服务器 fetch 数据，M 层则是模型层，没有涉及逻辑。\n\n* 对 MVC 结构有了更深的了解，对分层的好处也有了体会\n\n* 编码期间不断对功能性函数的重构是很重要的，即使是两行代码也有可能需要独立为一个功能函数，到了后期发现每一个独立的功能函数都能应用到对应的地方，避免了后期代码行的重复\n\n## 吐槽\n> Oxygen 从 20 号开始写，从 需求 —— 原型 —— 实现 一步步走下来一共经历 6 天，实际工作时间不会超过 5 天，中间夹杂着各种上课、做实验、做作业，这次算是对前面一个阶段学习的总结。第一次尝试了 Backbone.js 和 JQuery.js，使用手段颇为生疏，希望以后有机会再次熟悉一下各种 API 的使用。最后吐槽一下接下来十几周都要面对 JavaEE 和 JSP 和 SSH 的课程的痛苦……\n","source":"_posts/DAY5-完成-总结.md","raw":"---\ntitle: 'DAY5 完成 & 总结'\ndate: 2016-03-27 16:20:18\ntags: Oxygen\ncategories: 项目\n---\n## 最终效果图\n![](http://7xoehm.com1.z0.glb.clouddn.com/githubzuizhong.png)\n\n## 演示地址\n> http://www.libinhong.com:90/\n\n## 踩到的坑\n\n* Backbone 的 View 监听本身 Model 的 `change` 事件，仅在 Model 的属性实际发生变化才会被触发，如果 set 一个相同的值进 Model，实际上并不会触发事件\n\n* Backbone 的 View 中的 `el` 代表了该 View 对应的 dom 节点，同时，在该 View 中定义的事件所对应的 dom 只能处于该 el 下，否则无法正确找到 dom 并添加事件\n\n* Backbone 的 `events` 无法绑定 `audio` 的事件，估计是因为 JQuery 无相对应的事件，所以只能自己手动绑定事件\n\n## 总结\n\n* 最终没有使用 `require.js`\n\n* 在使用 Backbone 的过程中，V 层聚集了大量的渲染页面的逻辑，C 层则更多的提供了集合的功能，并且向服务器 fetch 数据，M 层则是模型层，没有涉及逻辑。\n\n* 对 MVC 结构有了更深的了解，对分层的好处也有了体会\n\n* 编码期间不断对功能性函数的重构是很重要的，即使是两行代码也有可能需要独立为一个功能函数，到了后期发现每一个独立的功能函数都能应用到对应的地方，避免了后期代码行的重复\n\n## 吐槽\n> Oxygen 从 20 号开始写，从 需求 —— 原型 —— 实现 一步步走下来一共经历 6 天，实际工作时间不会超过 5 天，中间夹杂着各种上课、做实验、做作业，这次算是对前面一个阶段学习的总结。第一次尝试了 Backbone.js 和 JQuery.js，使用手段颇为生疏，希望以后有机会再次熟悉一下各种 API 的使用。最后吐槽一下接下来十几周都要面对 JavaEE 和 JSP 和 SSH 的课程的痛苦……\n","slug":"DAY5-完成-总结","published":1,"updated":"2016-03-27T08:47:48.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqggs7lt001gikvdao1syfuh","content":"<h2 id=\"最终效果图\"><a href=\"#最终效果图\" class=\"headerlink\" title=\"最终效果图\"></a>最终效果图</h2><p><img src=\"http://7xoehm.com1.z0.glb.clouddn.com/githubzuizhong.png\" alt=\"\"></p>\n<h2 id=\"演示地址\"><a href=\"#演示地址\" class=\"headerlink\" title=\"演示地址\"></a>演示地址</h2><blockquote>\n<p><a href=\"http://www.libinhong.com:90/\" target=\"_blank\" rel=\"external\">http://www.libinhong.com:90/</a></p>\n</blockquote>\n<h2 id=\"踩到的坑\"><a href=\"#踩到的坑\" class=\"headerlink\" title=\"踩到的坑\"></a>踩到的坑</h2><ul>\n<li><p>Backbone 的 View 监听本身 Model 的 <code>change</code> 事件，仅在 Model 的属性实际发生变化才会被触发，如果 set 一个相同的值进 Model，实际上并不会触发事件</p>\n</li>\n<li><p>Backbone 的 View 中的 <code>el</code> 代表了该 View 对应的 dom 节点，同时，在该 View 中定义的事件所对应的 dom 只能处于该 el 下，否则无法正确找到 dom 并添加事件</p>\n</li>\n<li><p>Backbone 的 <code>events</code> 无法绑定 <code>audio</code> 的事件，估计是因为 JQuery 无相对应的事件，所以只能自己手动绑定事件</p>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>最终没有使用 <code>require.js</code></p>\n</li>\n<li><p>在使用 Backbone 的过程中，V 层聚集了大量的渲染页面的逻辑，C 层则更多的提供了集合的功能，并且向服务器 fetch 数据，M 层则是模型层，没有涉及逻辑。</p>\n</li>\n<li><p>对 MVC 结构有了更深的了解，对分层的好处也有了体会</p>\n</li>\n<li><p>编码期间不断对功能性函数的重构是很重要的，即使是两行代码也有可能需要独立为一个功能函数，到了后期发现每一个独立的功能函数都能应用到对应的地方，避免了后期代码行的重复</p>\n</li>\n</ul>\n<h2 id=\"吐槽\"><a href=\"#吐槽\" class=\"headerlink\" title=\"吐槽\"></a>吐槽</h2><blockquote>\n<p>Oxygen 从 20 号开始写，从 需求 —— 原型 —— 实现 一步步走下来一共经历 6 天，实际工作时间不会超过 5 天，中间夹杂着各种上课、做实验、做作业，这次算是对前面一个阶段学习的总结。第一次尝试了 Backbone.js 和 JQuery.js，使用手段颇为生疏，希望以后有机会再次熟悉一下各种 API 的使用。最后吐槽一下接下来十几周都要面对 JavaEE 和 JSP 和 SSH 的课程的痛苦……</p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"最终效果图\"><a href=\"#最终效果图\" class=\"headerlink\" title=\"最终效果图\"></a>最终效果图</h2><p><img src=\"http://7xoehm.com1.z0.glb.clouddn.com/githubzuizhong.png\" alt=\"\"></p>\n<h2 id=\"演示地址\"><a href=\"#演示地址\" class=\"headerlink\" title=\"演示地址\"></a>演示地址</h2><blockquote>\n<p><a href=\"http://www.libinhong.com:90/\">http://www.libinhong.com:90/</a></p>\n</blockquote>\n<h2 id=\"踩到的坑\"><a href=\"#踩到的坑\" class=\"headerlink\" title=\"踩到的坑\"></a>踩到的坑</h2><ul>\n<li><p>Backbone 的 View 监听本身 Model 的 <code>change</code> 事件，仅在 Model 的属性实际发生变化才会被触发，如果 set 一个相同的值进 Model，实际上并不会触发事件</p>\n</li>\n<li><p>Backbone 的 View 中的 <code>el</code> 代表了该 View 对应的 dom 节点，同时，在该 View 中定义的事件所对应的 dom 只能处于该 el 下，否则无法正确找到 dom 并添加事件</p>\n</li>\n<li><p>Backbone 的 <code>events</code> 无法绑定 <code>audio</code> 的事件，估计是因为 JQuery 无相对应的事件，所以只能自己手动绑定事件</p>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>最终没有使用 <code>require.js</code></p>\n</li>\n<li><p>在使用 Backbone 的过程中，V 层聚集了大量的渲染页面的逻辑，C 层则更多的提供了集合的功能，并且向服务器 fetch 数据，M 层则是模型层，没有涉及逻辑。</p>\n</li>\n<li><p>对 MVC 结构有了更深的了解，对分层的好处也有了体会</p>\n</li>\n<li><p>编码期间不断对功能性函数的重构是很重要的，即使是两行代码也有可能需要独立为一个功能函数，到了后期发现每一个独立的功能函数都能应用到对应的地方，避免了后期代码行的重复</p>\n</li>\n</ul>\n<h2 id=\"吐槽\"><a href=\"#吐槽\" class=\"headerlink\" title=\"吐槽\"></a>吐槽</h2><blockquote>\n<p>Oxygen 从 20 号开始写，从 需求 —— 原型 —— 实现 一步步走下来一共经历 6 天，实际工作时间不会超过 5 天，中间夹杂着各种上课、做实验、做作业，这次算是对前面一个阶段学习的总结。第一次尝试了 Backbone.js 和 JQuery.js，使用手段颇为生疏，希望以后有机会再次熟悉一下各种 API 的使用。最后吐槽一下接下来十几周都要面对 JavaEE 和 JSP 和 SSH 的课程的痛苦……</p>\n</blockquote>\n"},{"title":"ele.me 二面代码题实现","date":"2016-04-13T07:53:59.000Z","_content":"> 饿了么二面是在线写代码，有三道题，一道题十分钟内写完提交，在一个网站写，会自动录制代码编写过程\n\n1. 首先写了一个判断数组的函数\n```JavaScript\nfunction isArray(array) {\n    return !!array && Object.prototype.toString.call(array) === \"[object Array]\";\n}\n```\n\n2. 有序数组的打乱\n```JavaScript\nfunction random(array) {\n    if(!isArray(array)) return array;\n\n    return array.sort(function() {\n        return 0.8 - Math.random();\n    });\n}\n```\n\n3. 多维数组变为一维数组\n```JavaScript\nfunction flatten(array) {\n    if(!isArray(array)) return [array];\n\n    let len = array.length;\n    let flattenArr = [];\n\n    for(let idx=0;idx<len;idx++) {\n        Array.prototype.push.apply(flattenArr, isArray(array[idx]) ? flatten(array[idx]) : [array[idx]]);\n    }\n\n    return flattenArr;\n}\n\n// 使用 ES6 的 Generator 函数实现\nfunction flattenES6(array) {\n    function* iterator(array) {\n        if(isArray(array)) {\n            for(let i=0;i<array.length;i++) {\n                yield* iterator(array[i]);\n            }\n        }else {\n            yield array;\n        }\n    }\n\n    let result = [];\n    for(let value of iterator(array)) {\n        result.push(value);\n    }\n\n    return result;\n}\n```\n\n4. 将一个乱序数组，里面有`*`和`数字`，将`*`提到最前，数字往后放，并且数字顺序不变\n```JavaScript\nfunction arrange(array) {\n    if(!isArray(array)) return array;\n\n    let prePoint = 0,\n        nextPoint = 1,\n        len = array.length;\n\n    while(true) {\n        while(array[prePoint] === \"*\" && prePoint < len) {\n            prePoint++;\n        }\n        while(array[nextPoint] !== \"*\" && nextPoint < len) {\n            nextPoint++;\n        }\n        while(prePoint > nextPoint) {\n            nextPoint++;\n        }\n        if(prePoint >= len || nextPoint >= len) {\n            break;\n        }\n\n        // exchange\n        [array[prePoint], array[nextPoint]] = [array[nextPoint], array[prePoint]];\n    }\n\n    return array;\n}\n```\n","source":"_posts/ele-me-二面代码题实现.md","raw":"---\ntitle: ele.me 二面代码题实现\ndate: 2016-04-13 15:53:59\ntags: 面试\n---\n> 饿了么二面是在线写代码，有三道题，一道题十分钟内写完提交，在一个网站写，会自动录制代码编写过程\n\n1. 首先写了一个判断数组的函数\n```JavaScript\nfunction isArray(array) {\n    return !!array && Object.prototype.toString.call(array) === \"[object Array]\";\n}\n```\n\n2. 有序数组的打乱\n```JavaScript\nfunction random(array) {\n    if(!isArray(array)) return array;\n\n    return array.sort(function() {\n        return 0.8 - Math.random();\n    });\n}\n```\n\n3. 多维数组变为一维数组\n```JavaScript\nfunction flatten(array) {\n    if(!isArray(array)) return [array];\n\n    let len = array.length;\n    let flattenArr = [];\n\n    for(let idx=0;idx<len;idx++) {\n        Array.prototype.push.apply(flattenArr, isArray(array[idx]) ? flatten(array[idx]) : [array[idx]]);\n    }\n\n    return flattenArr;\n}\n\n// 使用 ES6 的 Generator 函数实现\nfunction flattenES6(array) {\n    function* iterator(array) {\n        if(isArray(array)) {\n            for(let i=0;i<array.length;i++) {\n                yield* iterator(array[i]);\n            }\n        }else {\n            yield array;\n        }\n    }\n\n    let result = [];\n    for(let value of iterator(array)) {\n        result.push(value);\n    }\n\n    return result;\n}\n```\n\n4. 将一个乱序数组，里面有`*`和`数字`，将`*`提到最前，数字往后放，并且数字顺序不变\n```JavaScript\nfunction arrange(array) {\n    if(!isArray(array)) return array;\n\n    let prePoint = 0,\n        nextPoint = 1,\n        len = array.length;\n\n    while(true) {\n        while(array[prePoint] === \"*\" && prePoint < len) {\n            prePoint++;\n        }\n        while(array[nextPoint] !== \"*\" && nextPoint < len) {\n            nextPoint++;\n        }\n        while(prePoint > nextPoint) {\n            nextPoint++;\n        }\n        if(prePoint >= len || nextPoint >= len) {\n            break;\n        }\n\n        // exchange\n        [array[prePoint], array[nextPoint]] = [array[nextPoint], array[prePoint]];\n    }\n\n    return array;\n}\n```\n","slug":"ele-me-二面代码题实现","published":1,"updated":"2016-04-24T08:18:41.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqggs7lt001kikvd7bdm28xq","content":"<blockquote>\n<p>饿了么二面是在线写代码，有三道题，一道题十分钟内写完提交，在一个网站写，会自动录制代码编写过程</p>\n</blockquote>\n<ol>\n<li><p>首先写了一个判断数组的函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !!array &amp;&amp; <span class=\"built_in\">Object</span>.prototype.toString.call(array) === <span class=\"string\">\"[object Array]\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>有序数组的打乱</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">random</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!isArray(array)) <span class=\"keyword\">return</span> array;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> array.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0.8</span> - <span class=\"built_in\">Math</span>.random();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多维数组变为一维数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flatten</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!isArray(array)) <span class=\"keyword\">return</span> [array];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = array.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> flattenArr = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> idx=<span class=\"number\">0</span>;idx&lt;len;idx++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Array</span>.prototype.push.apply(flattenArr, isArray(array[idx]) ? flatten(array[idx]) : [array[idx]]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> flattenArr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 ES6 的 Generator 函数实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flattenES6</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">iterator</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isArray(array)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;array.length;i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">yield</span>* iterator(array[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> array;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> iterator(array)) &#123;</span><br><span class=\"line\">        result.push(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将一个乱序数组，里面有<code>*</code>和<code>数字</code>，将<code>*</code>提到最前，数字往后放，并且数字顺序不变</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arrange</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!isArray(array)) <span class=\"keyword\">return</span> array;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> prePoint = <span class=\"number\">0</span>,</span><br><span class=\"line\">        nextPoint = <span class=\"number\">1</span>,</span><br><span class=\"line\">        len = array.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(array[prePoint] === <span class=\"string\">\"*\"</span> &amp;&amp; prePoint &lt; len) &#123;</span><br><span class=\"line\">            prePoint++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(array[nextPoint] !== <span class=\"string\">\"*\"</span> &amp;&amp; nextPoint &lt; len) &#123;</span><br><span class=\"line\">            nextPoint++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(prePoint &gt; nextPoint) &#123;</span><br><span class=\"line\">            nextPoint++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(prePoint &gt;= len || nextPoint &gt;= len) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// exchange</span></span><br><span class=\"line\">        [array[prePoint], array[nextPoint]] = [array[nextPoint], array[prePoint]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"","more":"<blockquote>\n<p>饿了么二面是在线写代码，有三道题，一道题十分钟内写完提交，在一个网站写，会自动录制代码编写过程</p>\n</blockquote>\n<ol>\n<li><p>首先写了一个判断数组的函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !!array &amp;&amp; <span class=\"built_in\">Object</span>.prototype.toString.call(array) === <span class=\"string\">\"[object Array]\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>有序数组的打乱</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">random</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!isArray(array)) <span class=\"keyword\">return</span> array;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> array.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0.8</span> - <span class=\"built_in\">Math</span>.random();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多维数组变为一维数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flatten</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!isArray(array)) <span class=\"keyword\">return</span> [array];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = array.length;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> flattenArr = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> idx=<span class=\"number\">0</span>;idx&lt;len;idx++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Array</span>.prototype.push.apply(flattenArr, isArray(array[idx]) ? flatten(array[idx]) : [array[idx]]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> flattenArr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 ES6 的 Generator 函数实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flattenES6</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">iterator</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isArray(array)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;array.length;i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">yield</span>* iterator(array[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> array;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> iterator(array)) &#123;</span><br><span class=\"line\">        result.push(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将一个乱序数组，里面有<code>*</code>和<code>数字</code>，将<code>*</code>提到最前，数字往后放，并且数字顺序不变</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arrange</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!isArray(array)) <span class=\"keyword\">return</span> array;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> prePoint = <span class=\"number\">0</span>,</span><br><span class=\"line\">        nextPoint = <span class=\"number\">1</span>,</span><br><span class=\"line\">        len = array.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(array[prePoint] === <span class=\"string\">\"*\"</span> &amp;&amp; prePoint &lt; len) &#123;</span><br><span class=\"line\">            prePoint++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(array[nextPoint] !== <span class=\"string\">\"*\"</span> &amp;&amp; nextPoint &lt; len) &#123;</span><br><span class=\"line\">            nextPoint++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(prePoint &gt; nextPoint) &#123;</span><br><span class=\"line\">            nextPoint++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(prePoint &gt;= len || nextPoint &gt;= len) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// exchange</span></span><br><span class=\"line\">        [array[prePoint], array[nextPoint]] = [array[nextPoint], array[prePoint]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"reflow 和 repaint 简易分析","date":"2016-06-17T02:16:50.000Z","_content":"![福利](http://7xoehm.com1.z0.glb.clouddn.com/1448333443367.jpg)\n\n# 浏览器渲染\n当我们打开一个网页的时候，浏览器是如何将 HTML 代码转换为用户可见的视图的？浏览器又在何时进行 `repaint` 和 `reflow` 的操作？首先我们要先知道用于该操作的 `渲染树` 的由来。\n\n## DOM Tree 的生成\n> 浏览器首先会解析 HTML 代码，生成一颗 `DOM Tree`，DOM（文档对象模型）\n\n简单地说，`DOM Tree` 的生成一般经历了四个阶段\n* 转换——浏览器将从供应方（例如本地磁盘或服务器）获取到的 HTML 字节，根据 HTML 的文件编码格式转换为字符\n* 符号化——浏览对转换好的字符串进行解析，将 `<>` 识别为对应的符号\n* 词法分析——将符号化的字符串转换为 `对象`，一般来说是节点（Node）\n* DOM 构建——对象生成完毕后，将根据对象之间的关系（父子、兄弟）生成 `DOM Tree`，在 `DOM Tree` 中可以确认 Node 节点间的关系\n\n\n## CSSOM 的生成\n> 在生成 `DOM Tree` 以后，将会生成 `CSSOM`（CSS 对象模型）的树形结构\n\n与构建 `DOM` 的过程类似是，`CSSOM` 的构建过程也是读取 CSS 字节，进行转换解析，并生成对应的 `CSSOM Tree`，不同的是，`CSSOM` 为 CSS 样式服务，而 `DOM` 为节点服务\n\n### CSSOM 能干什么？\nCSSOM 通过复杂而具体的规则计算 CSS 样式，并将其映射到对应的需要样式的节点上，其遵循 `向下层叠` 的计算规则，例如下图\n\n![向下层叠](http://7xoehm.com1.z0.glb.clouddn.com/cssom-tree.png)\n\n可以看到，body 处使用了 `font-size: 16px`，根据 `向下层叠` 的规则，body 的子节点如果没有其自己的 `font-size` 规则，那么 body 的 `font-size` 规则将会层叠给该节点\n\n### CSSOM 注意点\n* `CSSOM` 的构建会阻塞页面的渲染——假设页面的呈现没有等待 `CSSOM` 的构建和计算，那么用户看到的将会是一堆没有样式的页面，等到 `CSSOM` 构建以后，页面又突然间变成有样式的页面，所以等待 `CSSOM` 的构建完成再进行渲染并呈现页面是必须的，不过如果 `CSSOM` 的构建的效率很低，那么将会出现常见的 `白屏` 现象。\n* 只要重新加载页面，那么 `CSSOM` 也会重新构建——不管 CSS 样式文件是否被浏览器进行了缓存，`CSSOM` 是永远不会被缓存的，它会伴随页面的每一次重新加载而加载。\n* JS 的运行所阻塞会被 `CSSOM` 的构建阻塞——在构建 `DOM` 时，遇见 `<script>` 标签时，浏览器会发出 HTTP 请求资源，并将控制权移交给 JavaScript 引擎，等待 JS 执行完毕归还控制权继续 `DOM` 的构建，然而，如果此时 `CSSOM` 未下载并构建完成，JS 的执行时机将被延迟\n\n## Render Tree——渲染树\n> `渲染树` 由 `DOM Tree` 和 `CSSOM Tree` 融合构成，渲染树与 `DOM Tree` 和 `CSSOM Tree` 不同，渲染树只包含需要渲染的节点信息，例如 `display: none` 的节点是不存在于 `渲染树` 内的\n\n![合成渲染树](http://7xoehm.com1.z0.glb.clouddn.com/render-tree-construction.png)\n\n可以发现，`span` 由于拥有 `display: none` 并未包含在 `渲染树` 里。\n\n## 渲染树构建和渲染步骤\n在这里我们简单说一下 `渲染树` 的构建和渲染步骤：\n* 从 `DOM Tree` 根节点开始遍历所有可见节点\n    * 不可见节点（如 `<script>` 和 `<meta>` 等）将不会包含在内，会被忽略\n    * 通过 CSS 样式设置不可见的节点也不被包括，例如 `display: none`，不包括 `visibility: hidden` 等\n* 从 `CSSOM Tree` 找到对应节点的规则，进行匹配\n* 发射可见节点，连带其内容及计算的样式\n* 根据生成的渲染树计算每个节点在屏幕中的绝对像素位置\n* 根据计算结果开始渲染，这一步通常称为 `绘制` 或者 `栅格化`\n\n# 重绘（repaint）和重排（reflow）\n上面我们知道了 `渲染树` 由 `DOM Tree` 和 `CSSOM Tree` 融合构建而成，但是页面并不是进行一次渲染就可以适应各种节点的几何属性改变等变化的，页面会在某些时机进行 `重绘（repaint）` 和 `重排（reflow）`。\n\n我们首先要知道其二者的区别：\n* 重绘（repaint）——页面部分样式属性改变了（背景颜色，字体颜色等），但是几何属性没有改变，页面需要重绘该部分的内容，这就叫 `重绘（repaint）`\n* 重排（reflow）——页面节点的几何属性改变，这时候需要重新计算元素的几何属性，重新构建 `渲染树`，这就叫 `重排（reflow）`\n\n同时，我们要记得一下这句话：\n> 重绘不一定导致重排，但是重排一定会导致重绘\n\n## repaint 和 reflow 所带来的性能问题\n通过前面的分析，可以预见的是，`repaint` 和 `reflow` 所需的性能消耗代价必然巨大，下面通过一个例子来说明：\n\nHTML:\n```html\n<body>\n    <div id=\"elem-a\"></div>\n    <div id=\"elem-b\"></div>\n    <div id=\"elem-c\"></div>\n    <div id=\"elem-d\"></div>\n</body>\n```\n\nJavaScript:\n```javascript\n// example 1\n(function() {\n    console.time(\"elem-a render time\");\n    for(let idx=0;idx<10000;idx++) {\n        document.getElementById(\"elem-a\").innerHTML += idx;\n    }\n    console.timeEnd(\"elem-a render time\");\n})();\n\n// example 2\n(function() {\n    console.time(\"elem-b render time\");\n    let elemB = document.getElementById(\"elem-b\");\n    for(let idx=0;idx<10000;idx++) {\n        elemB.innerHTML += idx;\n    }\n    console.timeEnd(\"elem-b render time\");\n})();\n\n// example 3\n(function() {\n    console.time(\"elem-c render time\");\n    let str = \"\";\n    for(let idx=0;idx<10000;idx++) {\n        let elemC = document.getElementById(\"elem-c\");\n        str += idx;\n    }\n    document.getElementById(\"elem-c\").innerHTML = str;\n    console.timeEnd(\"elem-c render time\");\n})();\n\n// example 4\n(function() {\n    console.time(\"elem-d render time\");\n    let elemD = document.getElementById(\"elem-d\");\n    let str = \"\";\n    for(let idx=0;idx<10000;idx++) {\n        str += idx;\n    }\n    elemD.innerHTML += str;\n    console.timeEnd(\"elem-d render time\");\n})();\n```\n\n上面进行了 4 次试验，每次试验的内容不一样，下面进行分析：\n* example 1——进行 10000 次的 “DOM 索引 + 重绘 + 重排”\n* example 2——进行 10000 次的 “重绘 + 重排”，进行 1 次的 “DOM 索引”\n* example 3——进行 10000 次的 “DOM 索引”，进行 1 次的 “重绘 + 重排”\n* example 4——进行 10000 次的 “字符串拼接”，进行一次的 “DOM 索引 + 重绘 + 重排”\n\n控制台打印结果如下：\n* elem-a render time: 6020.826ms\n* elem-b render time: 5797.140ms\n* elem-c render time: 14.061ms\n* elem-d render time: 3.905ms\n\n由结果分析可知：\n* `repaint` 和 `reflow` 消耗的性能是无比巨大的\n* DOM 索引也消耗一定的性能，但是比起 `repaint` 和 `reflow` 简直是小巫见大巫\n* 优化的重点在于减少 DOM 重复索引和循环引起的 `repaint` 和 `reflow`，尽量压缩为一次\n\n## 如何减少 `repaint` 和 `reflow` 的发生？\n要知道如何减少 `repaint` 和 `reflow` 的发生，我们就得先知道引起它们的原因， `repaint` 无疑就是改变 DOM 的背景颜色等导致，重点在于 `reflow` 的原因：\n* 页面初始化必须进行一次的 `reflow`\n* 缩放窗口\n* 改变字体\n* 添加或删除样式\n* 添加或删除元素\n* 内容改变，例如用户在输入框中输入文本\n* 激活了伪类样式，例如：hover\n* 脚本操作 DOM 并改变了其样式\n* 计算 offsetWidth 和 offsetHeight\n* 设置样式属性（width，height等）\n\n以上种种都有可能引起页面的 `reflow`，而且不止这些，但是我们无法完全避免 `reflow`，所以我们必须想方设法去减少 `reflow`，例如：\n* 减少单一操作样式属性，使用 class 一次性替换\n* 对有动画的元素，使其 `position` 为 `fixed` 或 `absolute`，这样会减少元素间的影响\n* 使用平滑的过渡动画，例如尽量少用 1 个像素的移动动画，可以改为 3 个像素，[具体原因](http://www.stubbornella.org/content/2009/03/27/reflows-repaints-css-performance-making-your-javascript-slow/#smooth)\n* 避免使用 table 布局，[具体原因](http://www.stubbornella.org/content/2009/03/27/reflows-repaints-css-performance-making-your-javascript-slow/#tables)\n* 减少在 CSS 样式中使用 JS 表达式\n* 将元素 `display: none` 后再修改样式\n* 创建一个新的节点元素，进行样式操作后替代原先的元素，不过可能会出现页面闪烁\n* 创建 DocumentFragment 来进行更新\n\n这里提一下浏览器自身对减少 `reflow` 的优化，下面例子：\n```javascript\nlet elemA = document.getElementById(\"elem-a\");\n\nelemA.style.width = \"100px\";\nelemA.style.height = \"100px\";\nelemA.style.backgroundColor = \"yellow\";\n```\n以上例子浏览器只会一次性进行 `reflow` 而非 3 次\n\n```javascript\nlet elemA = document.getElementById(\"elem-a\");\n\nelemA.style.width = \"100px\";\nelemA.style.height = \"100px\";\nelemA.getComputedStyle();\nelemA.style.backgroundColor = \"yellow\";\n```\n以上例子浏览器会进行 2 次 `reflow`，因为中间需要获取当前的样式信息，浏览器必须先进行 `渲染树` 的重新计算，只要是获取以下样式信息的，都会引起浏览器立即重新渲染（如果必须则会 `reflow`）：\n* offsetTop\n* offsetLeft\n* offsetWidth\n* offsetHeight\n* scrollTop\n* scrollLeft\n* scrollWidth\n* scrollHeight\n* clientTop\n* clientLeft\n* clientWidth\n* clientHeight\n* getComputedStyle()\n* currentStyle（just for IE）\n\n> 参考\n\n* https://varvy.com/performance/cssom.html\n* http://www.stubbornella.org/content/2009/03/27/reflows-repaints-css-performance-making-your-javascript-slow/\n* https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model?hl=zh-cn\n* http://taligarsiel.com/Projects/howbrowserswork1.htm\n* http://www.cnblogs.com/zichi/p/4720000.html\n","source":"_posts/reflow-和-repaint-简易分析.md","raw":"---\ntitle: reflow 和 repaint 简易分析\ndate: 2016-06-17 10:16:50\ncategories:\n    - 前端\n    - CSS\ntags: CSS\n---\n![福利](http://7xoehm.com1.z0.glb.clouddn.com/1448333443367.jpg)\n\n# 浏览器渲染\n当我们打开一个网页的时候，浏览器是如何将 HTML 代码转换为用户可见的视图的？浏览器又在何时进行 `repaint` 和 `reflow` 的操作？首先我们要先知道用于该操作的 `渲染树` 的由来。\n\n## DOM Tree 的生成\n> 浏览器首先会解析 HTML 代码，生成一颗 `DOM Tree`，DOM（文档对象模型）\n\n简单地说，`DOM Tree` 的生成一般经历了四个阶段\n* 转换——浏览器将从供应方（例如本地磁盘或服务器）获取到的 HTML 字节，根据 HTML 的文件编码格式转换为字符\n* 符号化——浏览对转换好的字符串进行解析，将 `<>` 识别为对应的符号\n* 词法分析——将符号化的字符串转换为 `对象`，一般来说是节点（Node）\n* DOM 构建——对象生成完毕后，将根据对象之间的关系（父子、兄弟）生成 `DOM Tree`，在 `DOM Tree` 中可以确认 Node 节点间的关系\n\n\n## CSSOM 的生成\n> 在生成 `DOM Tree` 以后，将会生成 `CSSOM`（CSS 对象模型）的树形结构\n\n与构建 `DOM` 的过程类似是，`CSSOM` 的构建过程也是读取 CSS 字节，进行转换解析，并生成对应的 `CSSOM Tree`，不同的是，`CSSOM` 为 CSS 样式服务，而 `DOM` 为节点服务\n\n### CSSOM 能干什么？\nCSSOM 通过复杂而具体的规则计算 CSS 样式，并将其映射到对应的需要样式的节点上，其遵循 `向下层叠` 的计算规则，例如下图\n\n![向下层叠](http://7xoehm.com1.z0.glb.clouddn.com/cssom-tree.png)\n\n可以看到，body 处使用了 `font-size: 16px`，根据 `向下层叠` 的规则，body 的子节点如果没有其自己的 `font-size` 规则，那么 body 的 `font-size` 规则将会层叠给该节点\n\n### CSSOM 注意点\n* `CSSOM` 的构建会阻塞页面的渲染——假设页面的呈现没有等待 `CSSOM` 的构建和计算，那么用户看到的将会是一堆没有样式的页面，等到 `CSSOM` 构建以后，页面又突然间变成有样式的页面，所以等待 `CSSOM` 的构建完成再进行渲染并呈现页面是必须的，不过如果 `CSSOM` 的构建的效率很低，那么将会出现常见的 `白屏` 现象。\n* 只要重新加载页面，那么 `CSSOM` 也会重新构建——不管 CSS 样式文件是否被浏览器进行了缓存，`CSSOM` 是永远不会被缓存的，它会伴随页面的每一次重新加载而加载。\n* JS 的运行所阻塞会被 `CSSOM` 的构建阻塞——在构建 `DOM` 时，遇见 `<script>` 标签时，浏览器会发出 HTTP 请求资源，并将控制权移交给 JavaScript 引擎，等待 JS 执行完毕归还控制权继续 `DOM` 的构建，然而，如果此时 `CSSOM` 未下载并构建完成，JS 的执行时机将被延迟\n\n## Render Tree——渲染树\n> `渲染树` 由 `DOM Tree` 和 `CSSOM Tree` 融合构成，渲染树与 `DOM Tree` 和 `CSSOM Tree` 不同，渲染树只包含需要渲染的节点信息，例如 `display: none` 的节点是不存在于 `渲染树` 内的\n\n![合成渲染树](http://7xoehm.com1.z0.glb.clouddn.com/render-tree-construction.png)\n\n可以发现，`span` 由于拥有 `display: none` 并未包含在 `渲染树` 里。\n\n## 渲染树构建和渲染步骤\n在这里我们简单说一下 `渲染树` 的构建和渲染步骤：\n* 从 `DOM Tree` 根节点开始遍历所有可见节点\n    * 不可见节点（如 `<script>` 和 `<meta>` 等）将不会包含在内，会被忽略\n    * 通过 CSS 样式设置不可见的节点也不被包括，例如 `display: none`，不包括 `visibility: hidden` 等\n* 从 `CSSOM Tree` 找到对应节点的规则，进行匹配\n* 发射可见节点，连带其内容及计算的样式\n* 根据生成的渲染树计算每个节点在屏幕中的绝对像素位置\n* 根据计算结果开始渲染，这一步通常称为 `绘制` 或者 `栅格化`\n\n# 重绘（repaint）和重排（reflow）\n上面我们知道了 `渲染树` 由 `DOM Tree` 和 `CSSOM Tree` 融合构建而成，但是页面并不是进行一次渲染就可以适应各种节点的几何属性改变等变化的，页面会在某些时机进行 `重绘（repaint）` 和 `重排（reflow）`。\n\n我们首先要知道其二者的区别：\n* 重绘（repaint）——页面部分样式属性改变了（背景颜色，字体颜色等），但是几何属性没有改变，页面需要重绘该部分的内容，这就叫 `重绘（repaint）`\n* 重排（reflow）——页面节点的几何属性改变，这时候需要重新计算元素的几何属性，重新构建 `渲染树`，这就叫 `重排（reflow）`\n\n同时，我们要记得一下这句话：\n> 重绘不一定导致重排，但是重排一定会导致重绘\n\n## repaint 和 reflow 所带来的性能问题\n通过前面的分析，可以预见的是，`repaint` 和 `reflow` 所需的性能消耗代价必然巨大，下面通过一个例子来说明：\n\nHTML:\n```html\n<body>\n    <div id=\"elem-a\"></div>\n    <div id=\"elem-b\"></div>\n    <div id=\"elem-c\"></div>\n    <div id=\"elem-d\"></div>\n</body>\n```\n\nJavaScript:\n```javascript\n// example 1\n(function() {\n    console.time(\"elem-a render time\");\n    for(let idx=0;idx<10000;idx++) {\n        document.getElementById(\"elem-a\").innerHTML += idx;\n    }\n    console.timeEnd(\"elem-a render time\");\n})();\n\n// example 2\n(function() {\n    console.time(\"elem-b render time\");\n    let elemB = document.getElementById(\"elem-b\");\n    for(let idx=0;idx<10000;idx++) {\n        elemB.innerHTML += idx;\n    }\n    console.timeEnd(\"elem-b render time\");\n})();\n\n// example 3\n(function() {\n    console.time(\"elem-c render time\");\n    let str = \"\";\n    for(let idx=0;idx<10000;idx++) {\n        let elemC = document.getElementById(\"elem-c\");\n        str += idx;\n    }\n    document.getElementById(\"elem-c\").innerHTML = str;\n    console.timeEnd(\"elem-c render time\");\n})();\n\n// example 4\n(function() {\n    console.time(\"elem-d render time\");\n    let elemD = document.getElementById(\"elem-d\");\n    let str = \"\";\n    for(let idx=0;idx<10000;idx++) {\n        str += idx;\n    }\n    elemD.innerHTML += str;\n    console.timeEnd(\"elem-d render time\");\n})();\n```\n\n上面进行了 4 次试验，每次试验的内容不一样，下面进行分析：\n* example 1——进行 10000 次的 “DOM 索引 + 重绘 + 重排”\n* example 2——进行 10000 次的 “重绘 + 重排”，进行 1 次的 “DOM 索引”\n* example 3——进行 10000 次的 “DOM 索引”，进行 1 次的 “重绘 + 重排”\n* example 4——进行 10000 次的 “字符串拼接”，进行一次的 “DOM 索引 + 重绘 + 重排”\n\n控制台打印结果如下：\n* elem-a render time: 6020.826ms\n* elem-b render time: 5797.140ms\n* elem-c render time: 14.061ms\n* elem-d render time: 3.905ms\n\n由结果分析可知：\n* `repaint` 和 `reflow` 消耗的性能是无比巨大的\n* DOM 索引也消耗一定的性能，但是比起 `repaint` 和 `reflow` 简直是小巫见大巫\n* 优化的重点在于减少 DOM 重复索引和循环引起的 `repaint` 和 `reflow`，尽量压缩为一次\n\n## 如何减少 `repaint` 和 `reflow` 的发生？\n要知道如何减少 `repaint` 和 `reflow` 的发生，我们就得先知道引起它们的原因， `repaint` 无疑就是改变 DOM 的背景颜色等导致，重点在于 `reflow` 的原因：\n* 页面初始化必须进行一次的 `reflow`\n* 缩放窗口\n* 改变字体\n* 添加或删除样式\n* 添加或删除元素\n* 内容改变，例如用户在输入框中输入文本\n* 激活了伪类样式，例如：hover\n* 脚本操作 DOM 并改变了其样式\n* 计算 offsetWidth 和 offsetHeight\n* 设置样式属性（width，height等）\n\n以上种种都有可能引起页面的 `reflow`，而且不止这些，但是我们无法完全避免 `reflow`，所以我们必须想方设法去减少 `reflow`，例如：\n* 减少单一操作样式属性，使用 class 一次性替换\n* 对有动画的元素，使其 `position` 为 `fixed` 或 `absolute`，这样会减少元素间的影响\n* 使用平滑的过渡动画，例如尽量少用 1 个像素的移动动画，可以改为 3 个像素，[具体原因](http://www.stubbornella.org/content/2009/03/27/reflows-repaints-css-performance-making-your-javascript-slow/#smooth)\n* 避免使用 table 布局，[具体原因](http://www.stubbornella.org/content/2009/03/27/reflows-repaints-css-performance-making-your-javascript-slow/#tables)\n* 减少在 CSS 样式中使用 JS 表达式\n* 将元素 `display: none` 后再修改样式\n* 创建一个新的节点元素，进行样式操作后替代原先的元素，不过可能会出现页面闪烁\n* 创建 DocumentFragment 来进行更新\n\n这里提一下浏览器自身对减少 `reflow` 的优化，下面例子：\n```javascript\nlet elemA = document.getElementById(\"elem-a\");\n\nelemA.style.width = \"100px\";\nelemA.style.height = \"100px\";\nelemA.style.backgroundColor = \"yellow\";\n```\n以上例子浏览器只会一次性进行 `reflow` 而非 3 次\n\n```javascript\nlet elemA = document.getElementById(\"elem-a\");\n\nelemA.style.width = \"100px\";\nelemA.style.height = \"100px\";\nelemA.getComputedStyle();\nelemA.style.backgroundColor = \"yellow\";\n```\n以上例子浏览器会进行 2 次 `reflow`，因为中间需要获取当前的样式信息，浏览器必须先进行 `渲染树` 的重新计算，只要是获取以下样式信息的，都会引起浏览器立即重新渲染（如果必须则会 `reflow`）：\n* offsetTop\n* offsetLeft\n* offsetWidth\n* offsetHeight\n* scrollTop\n* scrollLeft\n* scrollWidth\n* scrollHeight\n* clientTop\n* clientLeft\n* clientWidth\n* clientHeight\n* getComputedStyle()\n* currentStyle（just for IE）\n\n> 参考\n\n* https://varvy.com/performance/cssom.html\n* http://www.stubbornella.org/content/2009/03/27/reflows-repaints-css-performance-making-your-javascript-slow/\n* https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model?hl=zh-cn\n* http://taligarsiel.com/Projects/howbrowserswork1.htm\n* http://www.cnblogs.com/zichi/p/4720000.html\n","slug":"reflow-和-repaint-简易分析","published":1,"updated":"2016-06-17T18:18:46.856Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqggs7ma001nikvdvzulnx2j","content":"<p><img src=\"http://7xoehm.com1.z0.glb.clouddn.com/1448333443367.jpg\" alt=\"福利\"></p>\n<h1 id=\"浏览器渲染\"><a href=\"#浏览器渲染\" class=\"headerlink\" title=\"浏览器渲染\"></a>浏览器渲染</h1><p>当我们打开一个网页的时候，浏览器是如何将 HTML 代码转换为用户可见的视图的？浏览器又在何时进行 <code>repaint</code> 和 <code>reflow</code> 的操作？首先我们要先知道用于该操作的 <code>渲染树</code> 的由来。</p>\n<h2 id=\"DOM-Tree-的生成\"><a href=\"#DOM-Tree-的生成\" class=\"headerlink\" title=\"DOM Tree 的生成\"></a>DOM Tree 的生成</h2><blockquote>\n<p>浏览器首先会解析 HTML 代码，生成一颗 <code>DOM Tree</code>，DOM（文档对象模型）</p>\n</blockquote>\n<p>简单地说，<code>DOM Tree</code> 的生成一般经历了四个阶段</p>\n<ul>\n<li>转换——浏览器将从供应方（例如本地磁盘或服务器）获取到的 HTML 字节，根据 HTML 的文件编码格式转换为字符</li>\n<li>符号化——浏览对转换好的字符串进行解析，将 <code>&lt;&gt;</code> 识别为对应的符号</li>\n<li>词法分析——将符号化的字符串转换为 <code>对象</code>，一般来说是节点（Node）</li>\n<li>DOM 构建——对象生成完毕后，将根据对象之间的关系（父子、兄弟）生成 <code>DOM Tree</code>，在 <code>DOM Tree</code> 中可以确认 Node 节点间的关系</li>\n</ul>\n<h2 id=\"CSSOM-的生成\"><a href=\"#CSSOM-的生成\" class=\"headerlink\" title=\"CSSOM 的生成\"></a>CSSOM 的生成</h2><blockquote>\n<p>在生成 <code>DOM Tree</code> 以后，将会生成 <code>CSSOM</code>（CSS 对象模型）的树形结构</p>\n</blockquote>\n<p>与构建 <code>DOM</code> 的过程类似是，<code>CSSOM</code> 的构建过程也是读取 CSS 字节，进行转换解析，并生成对应的 <code>CSSOM Tree</code>，不同的是，<code>CSSOM</code> 为 CSS 样式服务，而 <code>DOM</code> 为节点服务</p>\n<h3 id=\"CSSOM-能干什么？\"><a href=\"#CSSOM-能干什么？\" class=\"headerlink\" title=\"CSSOM 能干什么？\"></a>CSSOM 能干什么？</h3><p>CSSOM 通过复杂而具体的规则计算 CSS 样式，并将其映射到对应的需要样式的节点上，其遵循 <code>向下层叠</code> 的计算规则，例如下图</p>\n<p><img src=\"http://7xoehm.com1.z0.glb.clouddn.com/cssom-tree.png\" alt=\"向下层叠\"></p>\n<p>可以看到，body 处使用了 <code>font-size: 16px</code>，根据 <code>向下层叠</code> 的规则，body 的子节点如果没有其自己的 <code>font-size</code> 规则，那么 body 的 <code>font-size</code> 规则将会层叠给该节点</p>\n<h3 id=\"CSSOM-注意点\"><a href=\"#CSSOM-注意点\" class=\"headerlink\" title=\"CSSOM 注意点\"></a>CSSOM 注意点</h3><ul>\n<li><code>CSSOM</code> 的构建会阻塞页面的渲染——假设页面的呈现没有等待 <code>CSSOM</code> 的构建和计算，那么用户看到的将会是一堆没有样式的页面，等到 <code>CSSOM</code> 构建以后，页面又突然间变成有样式的页面，所以等待 <code>CSSOM</code> 的构建完成再进行渲染并呈现页面是必须的，不过如果 <code>CSSOM</code> 的构建的效率很低，那么将会出现常见的 <code>白屏</code> 现象。</li>\n<li>只要重新加载页面，那么 <code>CSSOM</code> 也会重新构建——不管 CSS 样式文件是否被浏览器进行了缓存，<code>CSSOM</code> 是永远不会被缓存的，它会伴随页面的每一次重新加载而加载。</li>\n<li>JS 的运行所阻塞会被 <code>CSSOM</code> 的构建阻塞——在构建 <code>DOM</code> 时，遇见 <code>&lt;script&gt;</code> 标签时，浏览器会发出 HTTP 请求资源，并将控制权移交给 JavaScript 引擎，等待 JS 执行完毕归还控制权继续 <code>DOM</code> 的构建，然而，如果此时 <code>CSSOM</code> 未下载并构建完成，JS 的执行时机将被延迟</li>\n</ul>\n<h2 id=\"Render-Tree——渲染树\"><a href=\"#Render-Tree——渲染树\" class=\"headerlink\" title=\"Render Tree——渲染树\"></a>Render Tree——渲染树</h2><blockquote>\n<p><code>渲染树</code> 由 <code>DOM Tree</code> 和 <code>CSSOM Tree</code> 融合构成，渲染树与 <code>DOM Tree</code> 和 <code>CSSOM Tree</code> 不同，渲染树只包含需要渲染的节点信息，例如 <code>display: none</code> 的节点是不存在于 <code>渲染树</code> 内的</p>\n</blockquote>\n<p><img src=\"http://7xoehm.com1.z0.glb.clouddn.com/render-tree-construction.png\" alt=\"合成渲染树\"></p>\n<p>可以发现，<code>span</code> 由于拥有 <code>display: none</code> 并未包含在 <code>渲染树</code> 里。</p>\n<h2 id=\"渲染树构建和渲染步骤\"><a href=\"#渲染树构建和渲染步骤\" class=\"headerlink\" title=\"渲染树构建和渲染步骤\"></a>渲染树构建和渲染步骤</h2><p>在这里我们简单说一下 <code>渲染树</code> 的构建和渲染步骤：</p>\n<ul>\n<li>从 <code>DOM Tree</code> 根节点开始遍历所有可见节点<ul>\n<li>不可见节点（如 <code>&lt;script&gt;</code> 和 <code>&lt;meta&gt;</code> 等）将不会包含在内，会被忽略</li>\n<li>通过 CSS 样式设置不可见的节点也不被包括，例如 <code>display: none</code>，不包括 <code>visibility: hidden</code> 等</li>\n</ul>\n</li>\n<li>从 <code>CSSOM Tree</code> 找到对应节点的规则，进行匹配</li>\n<li>发射可见节点，连带其内容及计算的样式</li>\n<li>根据生成的渲染树计算每个节点在屏幕中的绝对像素位置</li>\n<li>根据计算结果开始渲染，这一步通常称为 <code>绘制</code> 或者 <code>栅格化</code></li>\n</ul>\n<h1 id=\"重绘（repaint）和重排（reflow）\"><a href=\"#重绘（repaint）和重排（reflow）\" class=\"headerlink\" title=\"重绘（repaint）和重排（reflow）\"></a>重绘（repaint）和重排（reflow）</h1><p>上面我们知道了 <code>渲染树</code> 由 <code>DOM Tree</code> 和 <code>CSSOM Tree</code> 融合构建而成，但是页面并不是进行一次渲染就可以适应各种节点的几何属性改变等变化的，页面会在某些时机进行 <code>重绘（repaint）</code> 和 <code>重排（reflow）</code>。</p>\n<p>我们首先要知道其二者的区别：</p>\n<ul>\n<li>重绘（repaint）——页面部分样式属性改变了（背景颜色，字体颜色等），但是几何属性没有改变，页面需要重绘该部分的内容，这就叫 <code>重绘（repaint）</code></li>\n<li>重排（reflow）——页面节点的几何属性改变，这时候需要重新计算元素的几何属性，重新构建 <code>渲染树</code>，这就叫 <code>重排（reflow）</code></li>\n</ul>\n<p>同时，我们要记得一下这句话：</p>\n<blockquote>\n<p>重绘不一定导致重排，但是重排一定会导致重绘</p>\n</blockquote>\n<h2 id=\"repaint-和-reflow-所带来的性能问题\"><a href=\"#repaint-和-reflow-所带来的性能问题\" class=\"headerlink\" title=\"repaint 和 reflow 所带来的性能问题\"></a>repaint 和 reflow 所带来的性能问题</h2><p>通过前面的分析，可以预见的是，<code>repaint</code> 和 <code>reflow</code> 所需的性能消耗代价必然巨大，下面通过一个例子来说明：</p>\n<p>HTML:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"elem-a\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"elem-b\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"elem-c\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"elem-d\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>JavaScript:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// example 1</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">\"elem-a render time\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> idx=<span class=\"number\">0</span>;idx&lt;<span class=\"number\">10000</span>;idx++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"elem-a\"</span>).innerHTML += idx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">\"elem-a render time\"</span>);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// example 2</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">\"elem-b render time\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> elemB = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"elem-b\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> idx=<span class=\"number\">0</span>;idx&lt;<span class=\"number\">10000</span>;idx++) &#123;</span><br><span class=\"line\">        elemB.innerHTML += idx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">\"elem-b render time\"</span>);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// example 3</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">\"elem-c render time\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> str = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> idx=<span class=\"number\">0</span>;idx&lt;<span class=\"number\">10000</span>;idx++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> elemC = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"elem-c\"</span>);</span><br><span class=\"line\">        str += idx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"elem-c\"</span>).innerHTML = str;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">\"elem-c render time\"</span>);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// example 4</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">\"elem-d render time\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> elemD = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"elem-d\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> str = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> idx=<span class=\"number\">0</span>;idx&lt;<span class=\"number\">10000</span>;idx++) &#123;</span><br><span class=\"line\">        str += idx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    elemD.innerHTML += str;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">\"elem-d render time\"</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n<p>上面进行了 4 次试验，每次试验的内容不一样，下面进行分析：</p>\n<ul>\n<li>example 1——进行 10000 次的 “DOM 索引 + 重绘 + 重排”</li>\n<li>example 2——进行 10000 次的 “重绘 + 重排”，进行 1 次的 “DOM 索引”</li>\n<li>example 3——进行 10000 次的 “DOM 索引”，进行 1 次的 “重绘 + 重排”</li>\n<li>example 4——进行 10000 次的 “字符串拼接”，进行一次的 “DOM 索引 + 重绘 + 重排”</li>\n</ul>\n<p>控制台打印结果如下：</p>\n<ul>\n<li>elem-a render time: 6020.826ms</li>\n<li>elem-b render time: 5797.140ms</li>\n<li>elem-c render time: 14.061ms</li>\n<li>elem-d render time: 3.905ms</li>\n</ul>\n<p>由结果分析可知：</p>\n<ul>\n<li><code>repaint</code> 和 <code>reflow</code> 消耗的性能是无比巨大的</li>\n<li>DOM 索引也消耗一定的性能，但是比起 <code>repaint</code> 和 <code>reflow</code> 简直是小巫见大巫</li>\n<li>优化的重点在于减少 DOM 重复索引和循环引起的 <code>repaint</code> 和 <code>reflow</code>，尽量压缩为一次</li>\n</ul>\n<h2 id=\"如何减少-repaint-和-reflow-的发生？\"><a href=\"#如何减少-repaint-和-reflow-的发生？\" class=\"headerlink\" title=\"如何减少 repaint 和 reflow 的发生？\"></a>如何减少 <code>repaint</code> 和 <code>reflow</code> 的发生？</h2><p>要知道如何减少 <code>repaint</code> 和 <code>reflow</code> 的发生，我们就得先知道引起它们的原因， <code>repaint</code> 无疑就是改变 DOM 的背景颜色等导致，重点在于 <code>reflow</code> 的原因：</p>\n<ul>\n<li>页面初始化必须进行一次的 <code>reflow</code></li>\n<li>缩放窗口</li>\n<li>改变字体</li>\n<li>添加或删除样式</li>\n<li>添加或删除元素</li>\n<li>内容改变，例如用户在输入框中输入文本</li>\n<li>激活了伪类样式，例如：hover</li>\n<li>脚本操作 DOM 并改变了其样式</li>\n<li>计算 offsetWidth 和 offsetHeight</li>\n<li>设置样式属性（width，height等）</li>\n</ul>\n<p>以上种种都有可能引起页面的 <code>reflow</code>，而且不止这些，但是我们无法完全避免 <code>reflow</code>，所以我们必须想方设法去减少 <code>reflow</code>，例如：</p>\n<ul>\n<li>减少单一操作样式属性，使用 class 一次性替换</li>\n<li>对有动画的元素，使其 <code>position</code> 为 <code>fixed</code> 或 <code>absolute</code>，这样会减少元素间的影响</li>\n<li>使用平滑的过渡动画，例如尽量少用 1 个像素的移动动画，可以改为 3 个像素，<a href=\"http://www.stubbornella.org/content/2009/03/27/reflows-repaints-css-performance-making-your-javascript-slow/#smooth\" target=\"_blank\" rel=\"external\">具体原因</a></li>\n<li>避免使用 table 布局，<a href=\"http://www.stubbornella.org/content/2009/03/27/reflows-repaints-css-performance-making-your-javascript-slow/#tables\" target=\"_blank\" rel=\"external\">具体原因</a></li>\n<li>减少在 CSS 样式中使用 JS 表达式</li>\n<li>将元素 <code>display: none</code> 后再修改样式</li>\n<li>创建一个新的节点元素，进行样式操作后替代原先的元素，不过可能会出现页面闪烁</li>\n<li>创建 DocumentFragment 来进行更新</li>\n</ul>\n<p>这里提一下浏览器自身对减少 <code>reflow</code> 的优化，下面例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> elemA = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"elem-a\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">elemA.style.width = <span class=\"string\">\"100px\"</span>;</span><br><span class=\"line\">elemA.style.height = <span class=\"string\">\"100px\"</span>;</span><br><span class=\"line\">elemA.style.backgroundColor = <span class=\"string\">\"yellow\"</span>;</span><br></pre></td></tr></table></figure></p>\n<p>以上例子浏览器只会一次性进行 <code>reflow</code> 而非 3 次</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> elemA = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"elem-a\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">elemA.style.width = <span class=\"string\">\"100px\"</span>;</span><br><span class=\"line\">elemA.style.height = <span class=\"string\">\"100px\"</span>;</span><br><span class=\"line\">elemA.getComputedStyle();</span><br><span class=\"line\">elemA.style.backgroundColor = <span class=\"string\">\"yellow\"</span>;</span><br></pre></td></tr></table></figure>\n<p>以上例子浏览器会进行 2 次 <code>reflow</code>，因为中间需要获取当前的样式信息，浏览器必须先进行 <code>渲染树</code> 的重新计算，只要是获取以下样式信息的，都会引起浏览器立即重新渲染（如果必须则会 <code>reflow</code>）：</p>\n<ul>\n<li>offsetTop</li>\n<li>offsetLeft</li>\n<li>offsetWidth</li>\n<li>offsetHeight</li>\n<li>scrollTop</li>\n<li>scrollLeft</li>\n<li>scrollWidth</li>\n<li>scrollHeight</li>\n<li>clientTop</li>\n<li>clientLeft</li>\n<li>clientWidth</li>\n<li>clientHeight</li>\n<li>getComputedStyle()</li>\n<li>currentStyle（just for IE）</li>\n</ul>\n<blockquote>\n<p>参考</p>\n</blockquote>\n<ul>\n<li><a href=\"https://varvy.com/performance/cssom.html\" target=\"_blank\" rel=\"external\">https://varvy.com/performance/cssom.html</a></li>\n<li><a href=\"http://www.stubbornella.org/content/2009/03/27/reflows-repaints-css-performance-making-your-javascript-slow/\" target=\"_blank\" rel=\"external\">http://www.stubbornella.org/content/2009/03/27/reflows-repaints-css-performance-making-your-javascript-slow/</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model?hl=zh-cn\" target=\"_blank\" rel=\"external\">https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model?hl=zh-cn</a></li>\n<li><a href=\"http://taligarsiel.com/Projects/howbrowserswork1.htm\" target=\"_blank\" rel=\"external\">http://taligarsiel.com/Projects/howbrowserswork1.htm</a></li>\n<li><a href=\"http://www.cnblogs.com/zichi/p/4720000.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/zichi/p/4720000.html</a></li>\n</ul>\n","excerpt":"","more":"<p><img src=\"http://7xoehm.com1.z0.glb.clouddn.com/1448333443367.jpg\" alt=\"福利\"></p>\n<h1 id=\"浏览器渲染\"><a href=\"#浏览器渲染\" class=\"headerlink\" title=\"浏览器渲染\"></a>浏览器渲染</h1><p>当我们打开一个网页的时候，浏览器是如何将 HTML 代码转换为用户可见的视图的？浏览器又在何时进行 <code>repaint</code> 和 <code>reflow</code> 的操作？首先我们要先知道用于该操作的 <code>渲染树</code> 的由来。</p>\n<h2 id=\"DOM-Tree-的生成\"><a href=\"#DOM-Tree-的生成\" class=\"headerlink\" title=\"DOM Tree 的生成\"></a>DOM Tree 的生成</h2><blockquote>\n<p>浏览器首先会解析 HTML 代码，生成一颗 <code>DOM Tree</code>，DOM（文档对象模型）</p>\n</blockquote>\n<p>简单地说，<code>DOM Tree</code> 的生成一般经历了四个阶段</p>\n<ul>\n<li>转换——浏览器将从供应方（例如本地磁盘或服务器）获取到的 HTML 字节，根据 HTML 的文件编码格式转换为字符</li>\n<li>符号化——浏览对转换好的字符串进行解析，将 <code>&lt;&gt;</code> 识别为对应的符号</li>\n<li>词法分析——将符号化的字符串转换为 <code>对象</code>，一般来说是节点（Node）</li>\n<li>DOM 构建——对象生成完毕后，将根据对象之间的关系（父子、兄弟）生成 <code>DOM Tree</code>，在 <code>DOM Tree</code> 中可以确认 Node 节点间的关系</li>\n</ul>\n<h2 id=\"CSSOM-的生成\"><a href=\"#CSSOM-的生成\" class=\"headerlink\" title=\"CSSOM 的生成\"></a>CSSOM 的生成</h2><blockquote>\n<p>在生成 <code>DOM Tree</code> 以后，将会生成 <code>CSSOM</code>（CSS 对象模型）的树形结构</p>\n</blockquote>\n<p>与构建 <code>DOM</code> 的过程类似是，<code>CSSOM</code> 的构建过程也是读取 CSS 字节，进行转换解析，并生成对应的 <code>CSSOM Tree</code>，不同的是，<code>CSSOM</code> 为 CSS 样式服务，而 <code>DOM</code> 为节点服务</p>\n<h3 id=\"CSSOM-能干什么？\"><a href=\"#CSSOM-能干什么？\" class=\"headerlink\" title=\"CSSOM 能干什么？\"></a>CSSOM 能干什么？</h3><p>CSSOM 通过复杂而具体的规则计算 CSS 样式，并将其映射到对应的需要样式的节点上，其遵循 <code>向下层叠</code> 的计算规则，例如下图</p>\n<p><img src=\"http://7xoehm.com1.z0.glb.clouddn.com/cssom-tree.png\" alt=\"向下层叠\"></p>\n<p>可以看到，body 处使用了 <code>font-size: 16px</code>，根据 <code>向下层叠</code> 的规则，body 的子节点如果没有其自己的 <code>font-size</code> 规则，那么 body 的 <code>font-size</code> 规则将会层叠给该节点</p>\n<h3 id=\"CSSOM-注意点\"><a href=\"#CSSOM-注意点\" class=\"headerlink\" title=\"CSSOM 注意点\"></a>CSSOM 注意点</h3><ul>\n<li><code>CSSOM</code> 的构建会阻塞页面的渲染——假设页面的呈现没有等待 <code>CSSOM</code> 的构建和计算，那么用户看到的将会是一堆没有样式的页面，等到 <code>CSSOM</code> 构建以后，页面又突然间变成有样式的页面，所以等待 <code>CSSOM</code> 的构建完成再进行渲染并呈现页面是必须的，不过如果 <code>CSSOM</code> 的构建的效率很低，那么将会出现常见的 <code>白屏</code> 现象。</li>\n<li>只要重新加载页面，那么 <code>CSSOM</code> 也会重新构建——不管 CSS 样式文件是否被浏览器进行了缓存，<code>CSSOM</code> 是永远不会被缓存的，它会伴随页面的每一次重新加载而加载。</li>\n<li>JS 的运行所阻塞会被 <code>CSSOM</code> 的构建阻塞——在构建 <code>DOM</code> 时，遇见 <code>&lt;script&gt;</code> 标签时，浏览器会发出 HTTP 请求资源，并将控制权移交给 JavaScript 引擎，等待 JS 执行完毕归还控制权继续 <code>DOM</code> 的构建，然而，如果此时 <code>CSSOM</code> 未下载并构建完成，JS 的执行时机将被延迟</li>\n</ul>\n<h2 id=\"Render-Tree——渲染树\"><a href=\"#Render-Tree——渲染树\" class=\"headerlink\" title=\"Render Tree——渲染树\"></a>Render Tree——渲染树</h2><blockquote>\n<p><code>渲染树</code> 由 <code>DOM Tree</code> 和 <code>CSSOM Tree</code> 融合构成，渲染树与 <code>DOM Tree</code> 和 <code>CSSOM Tree</code> 不同，渲染树只包含需要渲染的节点信息，例如 <code>display: none</code> 的节点是不存在于 <code>渲染树</code> 内的</p>\n</blockquote>\n<p><img src=\"http://7xoehm.com1.z0.glb.clouddn.com/render-tree-construction.png\" alt=\"合成渲染树\"></p>\n<p>可以发现，<code>span</code> 由于拥有 <code>display: none</code> 并未包含在 <code>渲染树</code> 里。</p>\n<h2 id=\"渲染树构建和渲染步骤\"><a href=\"#渲染树构建和渲染步骤\" class=\"headerlink\" title=\"渲染树构建和渲染步骤\"></a>渲染树构建和渲染步骤</h2><p>在这里我们简单说一下 <code>渲染树</code> 的构建和渲染步骤：</p>\n<ul>\n<li>从 <code>DOM Tree</code> 根节点开始遍历所有可见节点<ul>\n<li>不可见节点（如 <code>&lt;script&gt;</code> 和 <code>&lt;meta&gt;</code> 等）将不会包含在内，会被忽略</li>\n<li>通过 CSS 样式设置不可见的节点也不被包括，例如 <code>display: none</code>，不包括 <code>visibility: hidden</code> 等</li>\n</ul>\n</li>\n<li>从 <code>CSSOM Tree</code> 找到对应节点的规则，进行匹配</li>\n<li>发射可见节点，连带其内容及计算的样式</li>\n<li>根据生成的渲染树计算每个节点在屏幕中的绝对像素位置</li>\n<li>根据计算结果开始渲染，这一步通常称为 <code>绘制</code> 或者 <code>栅格化</code></li>\n</ul>\n<h1 id=\"重绘（repaint）和重排（reflow）\"><a href=\"#重绘（repaint）和重排（reflow）\" class=\"headerlink\" title=\"重绘（repaint）和重排（reflow）\"></a>重绘（repaint）和重排（reflow）</h1><p>上面我们知道了 <code>渲染树</code> 由 <code>DOM Tree</code> 和 <code>CSSOM Tree</code> 融合构建而成，但是页面并不是进行一次渲染就可以适应各种节点的几何属性改变等变化的，页面会在某些时机进行 <code>重绘（repaint）</code> 和 <code>重排（reflow）</code>。</p>\n<p>我们首先要知道其二者的区别：</p>\n<ul>\n<li>重绘（repaint）——页面部分样式属性改变了（背景颜色，字体颜色等），但是几何属性没有改变，页面需要重绘该部分的内容，这就叫 <code>重绘（repaint）</code></li>\n<li>重排（reflow）——页面节点的几何属性改变，这时候需要重新计算元素的几何属性，重新构建 <code>渲染树</code>，这就叫 <code>重排（reflow）</code></li>\n</ul>\n<p>同时，我们要记得一下这句话：</p>\n<blockquote>\n<p>重绘不一定导致重排，但是重排一定会导致重绘</p>\n</blockquote>\n<h2 id=\"repaint-和-reflow-所带来的性能问题\"><a href=\"#repaint-和-reflow-所带来的性能问题\" class=\"headerlink\" title=\"repaint 和 reflow 所带来的性能问题\"></a>repaint 和 reflow 所带来的性能问题</h2><p>通过前面的分析，可以预见的是，<code>repaint</code> 和 <code>reflow</code> 所需的性能消耗代价必然巨大，下面通过一个例子来说明：</p>\n<p>HTML:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"elem-a\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"elem-b\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"elem-c\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"elem-d\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>JavaScript:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// example 1</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">\"elem-a render time\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> idx=<span class=\"number\">0</span>;idx&lt;<span class=\"number\">10000</span>;idx++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"elem-a\"</span>).innerHTML += idx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">\"elem-a render time\"</span>);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// example 2</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">\"elem-b render time\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> elemB = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"elem-b\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> idx=<span class=\"number\">0</span>;idx&lt;<span class=\"number\">10000</span>;idx++) &#123;</span><br><span class=\"line\">        elemB.innerHTML += idx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">\"elem-b render time\"</span>);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// example 3</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">\"elem-c render time\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> str = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> idx=<span class=\"number\">0</span>;idx&lt;<span class=\"number\">10000</span>;idx++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> elemC = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"elem-c\"</span>);</span><br><span class=\"line\">        str += idx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"elem-c\"</span>).innerHTML = str;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">\"elem-c render time\"</span>);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// example 4</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">\"elem-d render time\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> elemD = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"elem-d\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> str = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> idx=<span class=\"number\">0</span>;idx&lt;<span class=\"number\">10000</span>;idx++) &#123;</span><br><span class=\"line\">        str += idx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    elemD.innerHTML += str;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">\"elem-d render time\"</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n<p>上面进行了 4 次试验，每次试验的内容不一样，下面进行分析：</p>\n<ul>\n<li>example 1——进行 10000 次的 “DOM 索引 + 重绘 + 重排”</li>\n<li>example 2——进行 10000 次的 “重绘 + 重排”，进行 1 次的 “DOM 索引”</li>\n<li>example 3——进行 10000 次的 “DOM 索引”，进行 1 次的 “重绘 + 重排”</li>\n<li>example 4——进行 10000 次的 “字符串拼接”，进行一次的 “DOM 索引 + 重绘 + 重排”</li>\n</ul>\n<p>控制台打印结果如下：</p>\n<ul>\n<li>elem-a render time: 6020.826ms</li>\n<li>elem-b render time: 5797.140ms</li>\n<li>elem-c render time: 14.061ms</li>\n<li>elem-d render time: 3.905ms</li>\n</ul>\n<p>由结果分析可知：</p>\n<ul>\n<li><code>repaint</code> 和 <code>reflow</code> 消耗的性能是无比巨大的</li>\n<li>DOM 索引也消耗一定的性能，但是比起 <code>repaint</code> 和 <code>reflow</code> 简直是小巫见大巫</li>\n<li>优化的重点在于减少 DOM 重复索引和循环引起的 <code>repaint</code> 和 <code>reflow</code>，尽量压缩为一次</li>\n</ul>\n<h2 id=\"如何减少-repaint-和-reflow-的发生？\"><a href=\"#如何减少-repaint-和-reflow-的发生？\" class=\"headerlink\" title=\"如何减少 repaint 和 reflow 的发生？\"></a>如何减少 <code>repaint</code> 和 <code>reflow</code> 的发生？</h2><p>要知道如何减少 <code>repaint</code> 和 <code>reflow</code> 的发生，我们就得先知道引起它们的原因， <code>repaint</code> 无疑就是改变 DOM 的背景颜色等导致，重点在于 <code>reflow</code> 的原因：</p>\n<ul>\n<li>页面初始化必须进行一次的 <code>reflow</code></li>\n<li>缩放窗口</li>\n<li>改变字体</li>\n<li>添加或删除样式</li>\n<li>添加或删除元素</li>\n<li>内容改变，例如用户在输入框中输入文本</li>\n<li>激活了伪类样式，例如：hover</li>\n<li>脚本操作 DOM 并改变了其样式</li>\n<li>计算 offsetWidth 和 offsetHeight</li>\n<li>设置样式属性（width，height等）</li>\n</ul>\n<p>以上种种都有可能引起页面的 <code>reflow</code>，而且不止这些，但是我们无法完全避免 <code>reflow</code>，所以我们必须想方设法去减少 <code>reflow</code>，例如：</p>\n<ul>\n<li>减少单一操作样式属性，使用 class 一次性替换</li>\n<li>对有动画的元素，使其 <code>position</code> 为 <code>fixed</code> 或 <code>absolute</code>，这样会减少元素间的影响</li>\n<li>使用平滑的过渡动画，例如尽量少用 1 个像素的移动动画，可以改为 3 个像素，<a href=\"http://www.stubbornella.org/content/2009/03/27/reflows-repaints-css-performance-making-your-javascript-slow/#smooth\">具体原因</a></li>\n<li>避免使用 table 布局，<a href=\"http://www.stubbornella.org/content/2009/03/27/reflows-repaints-css-performance-making-your-javascript-slow/#tables\">具体原因</a></li>\n<li>减少在 CSS 样式中使用 JS 表达式</li>\n<li>将元素 <code>display: none</code> 后再修改样式</li>\n<li>创建一个新的节点元素，进行样式操作后替代原先的元素，不过可能会出现页面闪烁</li>\n<li>创建 DocumentFragment 来进行更新</li>\n</ul>\n<p>这里提一下浏览器自身对减少 <code>reflow</code> 的优化，下面例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> elemA = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"elem-a\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">elemA.style.width = <span class=\"string\">\"100px\"</span>;</span><br><span class=\"line\">elemA.style.height = <span class=\"string\">\"100px\"</span>;</span><br><span class=\"line\">elemA.style.backgroundColor = <span class=\"string\">\"yellow\"</span>;</span><br></pre></td></tr></table></figure></p>\n<p>以上例子浏览器只会一次性进行 <code>reflow</code> 而非 3 次</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> elemA = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"elem-a\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">elemA.style.width = <span class=\"string\">\"100px\"</span>;</span><br><span class=\"line\">elemA.style.height = <span class=\"string\">\"100px\"</span>;</span><br><span class=\"line\">elemA.getComputedStyle();</span><br><span class=\"line\">elemA.style.backgroundColor = <span class=\"string\">\"yellow\"</span>;</span><br></pre></td></tr></table></figure>\n<p>以上例子浏览器会进行 2 次 <code>reflow</code>，因为中间需要获取当前的样式信息，浏览器必须先进行 <code>渲染树</code> 的重新计算，只要是获取以下样式信息的，都会引起浏览器立即重新渲染（如果必须则会 <code>reflow</code>）：</p>\n<ul>\n<li>offsetTop</li>\n<li>offsetLeft</li>\n<li>offsetWidth</li>\n<li>offsetHeight</li>\n<li>scrollTop</li>\n<li>scrollLeft</li>\n<li>scrollWidth</li>\n<li>scrollHeight</li>\n<li>clientTop</li>\n<li>clientLeft</li>\n<li>clientWidth</li>\n<li>clientHeight</li>\n<li>getComputedStyle()</li>\n<li>currentStyle（just for IE）</li>\n</ul>\n<blockquote>\n<p>参考</p>\n</blockquote>\n<ul>\n<li><a href=\"https://varvy.com/performance/cssom.html\">https://varvy.com/performance/cssom.html</a></li>\n<li><a href=\"http://www.stubbornella.org/content/2009/03/27/reflows-repaints-css-performance-making-your-javascript-slow/\">http://www.stubbornella.org/content/2009/03/27/reflows-repaints-css-performance-making-your-javascript-slow/</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model?hl=zh-cn\">https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model?hl=zh-cn</a></li>\n<li><a href=\"http://taligarsiel.com/Projects/howbrowserswork1.htm\">http://taligarsiel.com/Projects/howbrowserswork1.htm</a></li>\n<li><a href=\"http://www.cnblogs.com/zichi/p/4720000.html\">http://www.cnblogs.com/zichi/p/4720000.html</a></li>\n</ul>\n"},{"title":"两列布局一列固定宽度一列自适应宽度实现","date":"2016-03-18T05:43:31.000Z","_content":"## 1.使用 margin + float 实现\n\n### HTML：\n```html\n<div class=\"normal\">\n    <div class=\"normal-right\"></div>\n    <div class=\"normal-left\"></div>\n</div>\n```\n\n### CSS：\n```css\n.normal-right {\n    float: right;\n    width: 100px;\n    height: 300px;\n    background-color: blue;\n}\n.normal-left {\n    margin-right: 100px;\n    height: 300px;\n    background-color: yellow;\n}\n```\n`使用该种方法，浮动在右边的div必须写在左边div之前`\n\n## 2.使用 table + table-cell 实现\n\n### HTML：\n```html\n<div class=\"table\">\n    <div class=\"table-left\"></div>\n    <div class=\"table-right\"></div>\n</div>\n```\n\n### CSS：\n```css\n.table {\n    display: table;\n    width: 100%;\n    margin-top: 50px;\n}\n.table-left {\n    display: table-cell;\n    height: 300px;\n    background-color: yellow;\n}\n.table-right {\n    display: table-cell;\n    width: 100px;\n    height: 300px;\n    background-color: blue;\n}\n```\n`diplay: table 在IE上仅支持IE 8及以上版本`\n\n## 3.使用 flex 布局实现\n\n### HTML：\n```html\n<div class=\"flex\">\n    <div class=\"flex-left\"></div>\n    <div class=\"flex-right\"></div>\n</div>\n```\n\n### CSS：\n```css\n.flex {\n    display: flex;\n    margin-top: 50px;\n}\n.flex-left {\n    width: 100%;\n    background-color: blue;\n    flex-shrink: 1;\n    height: 300px;\n}\n.flex-right {\n    width: 100px;\n    background-color: yellow;\n    flex-shrink: 0;\n    height: 300px;\n}\n```\n`flex 布局仅支持 IE 10+、Chrome 21+、Firefox 22+、Safari 6.1+、Opera 12.1+`\n","source":"_posts/两列布局一列固定宽度一列自适应宽度实现.md","raw":"---\ntitle: 两列布局一列固定宽度一列自适应宽度实现\ndate: 2016-03-18 13:43:31\ncategories: 前端\ntags: 布局\n---\n## 1.使用 margin + float 实现\n\n### HTML：\n```html\n<div class=\"normal\">\n    <div class=\"normal-right\"></div>\n    <div class=\"normal-left\"></div>\n</div>\n```\n\n### CSS：\n```css\n.normal-right {\n    float: right;\n    width: 100px;\n    height: 300px;\n    background-color: blue;\n}\n.normal-left {\n    margin-right: 100px;\n    height: 300px;\n    background-color: yellow;\n}\n```\n`使用该种方法，浮动在右边的div必须写在左边div之前`\n\n## 2.使用 table + table-cell 实现\n\n### HTML：\n```html\n<div class=\"table\">\n    <div class=\"table-left\"></div>\n    <div class=\"table-right\"></div>\n</div>\n```\n\n### CSS：\n```css\n.table {\n    display: table;\n    width: 100%;\n    margin-top: 50px;\n}\n.table-left {\n    display: table-cell;\n    height: 300px;\n    background-color: yellow;\n}\n.table-right {\n    display: table-cell;\n    width: 100px;\n    height: 300px;\n    background-color: blue;\n}\n```\n`diplay: table 在IE上仅支持IE 8及以上版本`\n\n## 3.使用 flex 布局实现\n\n### HTML：\n```html\n<div class=\"flex\">\n    <div class=\"flex-left\"></div>\n    <div class=\"flex-right\"></div>\n</div>\n```\n\n### CSS：\n```css\n.flex {\n    display: flex;\n    margin-top: 50px;\n}\n.flex-left {\n    width: 100%;\n    background-color: blue;\n    flex-shrink: 1;\n    height: 300px;\n}\n.flex-right {\n    width: 100px;\n    background-color: yellow;\n    flex-shrink: 0;\n    height: 300px;\n}\n```\n`flex 布局仅支持 IE 10+、Chrome 21+、Firefox 22+、Safari 6.1+、Opera 12.1+`\n","slug":"两列布局一列固定宽度一列自适应宽度实现","published":1,"updated":"2016-03-18T07:10:39.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqggs7mf001rikvdbrvq113g","content":"<h2 id=\"1-使用-margin-float-实现\"><a href=\"#1-使用-margin-float-实现\" class=\"headerlink\" title=\"1.使用 margin + float 实现\"></a>1.使用 margin + float 实现</h2><h3 id=\"HTML：\"><a href=\"#HTML：\" class=\"headerlink\" title=\"HTML：\"></a>HTML：</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"normal\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"normal-right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"normal-left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"CSS：\"><a href=\"#CSS：\" class=\"headerlink\" title=\"CSS：\"></a>CSS：</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.normal-right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.normal-left</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: yellow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>使用该种方法，浮动在右边的div必须写在左边div之前</code></p>\n<h2 id=\"2-使用-table-table-cell-实现\"><a href=\"#2-使用-table-table-cell-实现\" class=\"headerlink\" title=\"2.使用 table + table-cell 实现\"></a>2.使用 table + table-cell 实现</h2><h3 id=\"HTML：-1\"><a href=\"#HTML：-1\" class=\"headerlink\" title=\"HTML：\"></a>HTML：</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"table\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"table-left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"table-right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"CSS：-1\"><a href=\"#CSS：-1\" class=\"headerlink\" title=\"CSS：\"></a>CSS：</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.table</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.table-left</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: yellow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.table-right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>diplay: table 在IE上仅支持IE 8及以上版本</code></p>\n<h2 id=\"3-使用-flex-布局实现\"><a href=\"#3-使用-flex-布局实现\" class=\"headerlink\" title=\"3.使用 flex 布局实现\"></a>3.使用 flex 布局实现</h2><h3 id=\"HTML：-2\"><a href=\"#HTML：-2\" class=\"headerlink\" title=\"HTML：\"></a>HTML：</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flex\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flex-left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flex-right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"CSS：-2\"><a href=\"#CSS：-2\" class=\"headerlink\" title=\"CSS：\"></a>CSS：</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.flex</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.flex-left</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">flex-shrink</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.flex-right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: yellow;</span><br><span class=\"line\">    <span class=\"attribute\">flex-shrink</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>flex 布局仅支持 IE 10+、Chrome 21+、Firefox 22+、Safari 6.1+、Opera 12.1+</code></p>\n","excerpt":"","more":"<h2 id=\"1-使用-margin-float-实现\"><a href=\"#1-使用-margin-float-实现\" class=\"headerlink\" title=\"1.使用 margin + float 实现\"></a>1.使用 margin + float 实现</h2><h3 id=\"HTML：\"><a href=\"#HTML：\" class=\"headerlink\" title=\"HTML：\"></a>HTML：</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"normal\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"normal-right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"normal-left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"CSS：\"><a href=\"#CSS：\" class=\"headerlink\" title=\"CSS：\"></a>CSS：</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.normal-right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.normal-left</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: yellow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>使用该种方法，浮动在右边的div必须写在左边div之前</code></p>\n<h2 id=\"2-使用-table-table-cell-实现\"><a href=\"#2-使用-table-table-cell-实现\" class=\"headerlink\" title=\"2.使用 table + table-cell 实现\"></a>2.使用 table + table-cell 实现</h2><h3 id=\"HTML：-1\"><a href=\"#HTML：-1\" class=\"headerlink\" title=\"HTML：\"></a>HTML：</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"table\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"table-left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"table-right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"CSS：-1\"><a href=\"#CSS：-1\" class=\"headerlink\" title=\"CSS：\"></a>CSS：</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.table</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.table-left</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: yellow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.table-right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>diplay: table 在IE上仅支持IE 8及以上版本</code></p>\n<h2 id=\"3-使用-flex-布局实现\"><a href=\"#3-使用-flex-布局实现\" class=\"headerlink\" title=\"3.使用 flex 布局实现\"></a>3.使用 flex 布局实现</h2><h3 id=\"HTML：-2\"><a href=\"#HTML：-2\" class=\"headerlink\" title=\"HTML：\"></a>HTML：</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flex\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flex-left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flex-right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"CSS：-2\"><a href=\"#CSS：-2\" class=\"headerlink\" title=\"CSS：\"></a>CSS：</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.flex</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.flex-left</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">flex-shrink</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.flex-right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: yellow;</span><br><span class=\"line\">    <span class=\"attribute\">flex-shrink</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>flex 布局仅支持 IE 10+、Chrome 21+、Firefox 22+、Safari 6.1+、Opera 12.1+</code></p>\n"},{"title":"一道有趣的JS题目的分析","date":"2016-03-18T06:08:29.000Z","_content":"今天在微博看到有人发了一道题目，代码如下：\n\n```javascript\nfunction Foo() {\n    getName = function() {console.log(1);}\n    return this;\n}\nFoo.getName = function() {console.log(2);};\nFoo.prototype.getName = function() {console.log(3);};\nvar getName = function() {console.log(4);};\nfunction getName() {console.log(5);};\n\nFoo.getName();//2\ngetName();//4\nFoo().getName();//1\ngetName();//1\nnew Foo.getName();//2\nnew Foo().getName();//3\nnew new Foo().getName();//3\n\nFoo.getName()，这里调用的方法是第5行代码的函数，这个没什么疑问。\n```\n\n`getName()`，这里调用的是第 7 行的函数，有人要问了，为什么不是第 8 行，这里涉及到JS解析器中一个`function declaration hoisting(函数声明提升)`的过程，在 JS 代码中，使用`var x = function(){}`叫作`函数表达式`，使用`function x(){}`叫作`函数声明`，在 JS 代码加载的过程中，函数声明会在第一时间加载到源代码树的顶部，所以即使你调用使用函数声明的函数比该函数的声明还早，也是无异常的。反之，函数表达式则要在 JS 加载到该行代码时，函数才算是真正可以使用。所以这道题里，第 8 行比第 7 行的函数声明早，所以第7行的函数表达式覆盖了第 8 行的函数内容。\n\n`Foo().getName()`，这里执行 Foo() 后返回的 this 是 window，即全局对象，而 Foo() 内部的`getName`由于没有使用 var 去声明，故默认为 window 的 getName 属性，所以又再一次覆盖了原先的 getName()，所以打印是1。\n\n`getName()`，由于上一行代码的执行已经导致了 window 下的 getName() 被覆盖，所以依旧打印1。\n\n`new Foo.getName()`，这里 new 的是 getName() 而不是 Foo()，所以打印了2，与第 10 行的调用方法类似，不过这里还会返回一个 Foo.getName 的实例。\n\n`new Foo().getName()`，这里首先 new Foo() 返回 Foo() 的实例对象，这里注意，构造函数中如果没有指明 return，那么默认返回构造函数的实例，如果指定了 return，那么返回指定的 return 的值（只能是引用类型的值，如{},[]等），这里指定了 return this，this 在 new 的情况下是实例本身，所以跟默认情况下是一致的，然后又调用了 getName()，这里调用的是原型中的函数，所以打印3。\n\n`new new Foo().getName()`，先不看第一个 new，则后面的步骤跟上面一致，不过到了调用函数的时候，第一个 new 发生作用了，实例化了 getName()，不过这里的 getName() 依旧是原型中的函数，只不过将他实例化了，所以依旧打印3。\n","source":"_posts/一道有趣的JS题目的分析.md","raw":"---\ntitle: 一道有趣的JS题目的分析\ndate: 2016-03-18 14:08:29\ncategories: 前端\ntags: Javascript\n---\n今天在微博看到有人发了一道题目，代码如下：\n\n```javascript\nfunction Foo() {\n    getName = function() {console.log(1);}\n    return this;\n}\nFoo.getName = function() {console.log(2);};\nFoo.prototype.getName = function() {console.log(3);};\nvar getName = function() {console.log(4);};\nfunction getName() {console.log(5);};\n\nFoo.getName();//2\ngetName();//4\nFoo().getName();//1\ngetName();//1\nnew Foo.getName();//2\nnew Foo().getName();//3\nnew new Foo().getName();//3\n\nFoo.getName()，这里调用的方法是第5行代码的函数，这个没什么疑问。\n```\n\n`getName()`，这里调用的是第 7 行的函数，有人要问了，为什么不是第 8 行，这里涉及到JS解析器中一个`function declaration hoisting(函数声明提升)`的过程，在 JS 代码中，使用`var x = function(){}`叫作`函数表达式`，使用`function x(){}`叫作`函数声明`，在 JS 代码加载的过程中，函数声明会在第一时间加载到源代码树的顶部，所以即使你调用使用函数声明的函数比该函数的声明还早，也是无异常的。反之，函数表达式则要在 JS 加载到该行代码时，函数才算是真正可以使用。所以这道题里，第 8 行比第 7 行的函数声明早，所以第7行的函数表达式覆盖了第 8 行的函数内容。\n\n`Foo().getName()`，这里执行 Foo() 后返回的 this 是 window，即全局对象，而 Foo() 内部的`getName`由于没有使用 var 去声明，故默认为 window 的 getName 属性，所以又再一次覆盖了原先的 getName()，所以打印是1。\n\n`getName()`，由于上一行代码的执行已经导致了 window 下的 getName() 被覆盖，所以依旧打印1。\n\n`new Foo.getName()`，这里 new 的是 getName() 而不是 Foo()，所以打印了2，与第 10 行的调用方法类似，不过这里还会返回一个 Foo.getName 的实例。\n\n`new Foo().getName()`，这里首先 new Foo() 返回 Foo() 的实例对象，这里注意，构造函数中如果没有指明 return，那么默认返回构造函数的实例，如果指定了 return，那么返回指定的 return 的值（只能是引用类型的值，如{},[]等），这里指定了 return this，this 在 new 的情况下是实例本身，所以跟默认情况下是一致的，然后又调用了 getName()，这里调用的是原型中的函数，所以打印3。\n\n`new new Foo().getName()`，先不看第一个 new，则后面的步骤跟上面一致，不过到了调用函数的时候，第一个 new 发生作用了，实例化了 getName()，不过这里的 getName() 依旧是原型中的函数，只不过将他实例化了，所以依旧打印3。\n","slug":"一道有趣的JS题目的分析","published":1,"updated":"2016-03-18T07:10:35.211Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqggs7mf001tikvd6edgyvij","content":"<p>今天在微博看到有人发了一道题目，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);&#125;;</span><br><span class=\"line\">Foo.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>);&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Foo.getName();<span class=\"comment\">//2</span></span><br><span class=\"line\">getName();<span class=\"comment\">//4</span></span><br><span class=\"line\">Foo().getName();<span class=\"comment\">//1</span></span><br><span class=\"line\">getName();<span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo.getName();<span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo().getName();<span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">new</span> Foo().getName();<span class=\"comment\">//3</span></span><br><span class=\"line\"></span><br><span class=\"line\">Foo.getName()，这里调用的方法是第<span class=\"number\">5</span>行代码的函数，这个没什么疑问。</span><br></pre></td></tr></table></figure>\n<p><code>getName()</code>，这里调用的是第 7 行的函数，有人要问了，为什么不是第 8 行，这里涉及到JS解析器中一个<code>function declaration hoisting(函数声明提升)</code>的过程，在 JS 代码中，使用<code>var x = function(){}</code>叫作<code>函数表达式</code>，使用<code>function x(){}</code>叫作<code>函数声明</code>，在 JS 代码加载的过程中，函数声明会在第一时间加载到源代码树的顶部，所以即使你调用使用函数声明的函数比该函数的声明还早，也是无异常的。反之，函数表达式则要在 JS 加载到该行代码时，函数才算是真正可以使用。所以这道题里，第 8 行比第 7 行的函数声明早，所以第7行的函数表达式覆盖了第 8 行的函数内容。</p>\n<p><code>Foo().getName()</code>，这里执行 Foo() 后返回的 this 是 window，即全局对象，而 Foo() 内部的<code>getName</code>由于没有使用 var 去声明，故默认为 window 的 getName 属性，所以又再一次覆盖了原先的 getName()，所以打印是1。</p>\n<p><code>getName()</code>，由于上一行代码的执行已经导致了 window 下的 getName() 被覆盖，所以依旧打印1。</p>\n<p><code>new Foo.getName()</code>，这里 new 的是 getName() 而不是 Foo()，所以打印了2，与第 10 行的调用方法类似，不过这里还会返回一个 Foo.getName 的实例。</p>\n<p><code>new Foo().getName()</code>，这里首先 new Foo() 返回 Foo() 的实例对象，这里注意，构造函数中如果没有指明 return，那么默认返回构造函数的实例，如果指定了 return，那么返回指定的 return 的值（只能是引用类型的值，如{},[]等），这里指定了 return this，this 在 new 的情况下是实例本身，所以跟默认情况下是一致的，然后又调用了 getName()，这里调用的是原型中的函数，所以打印3。</p>\n<p><code>new new Foo().getName()</code>，先不看第一个 new，则后面的步骤跟上面一致，不过到了调用函数的时候，第一个 new 发生作用了，实例化了 getName()，不过这里的 getName() 依旧是原型中的函数，只不过将他实例化了，所以依旧打印3。</p>\n","excerpt":"","more":"<p>今天在微博看到有人发了一道题目，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);&#125;;</span><br><span class=\"line\">Foo.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>);&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Foo.getName();<span class=\"comment\">//2</span></span><br><span class=\"line\">getName();<span class=\"comment\">//4</span></span><br><span class=\"line\">Foo().getName();<span class=\"comment\">//1</span></span><br><span class=\"line\">getName();<span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo.getName();<span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo().getName();<span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"keyword\">new</span> Foo().getName();<span class=\"comment\">//3</span></span><br><span class=\"line\"></span><br><span class=\"line\">Foo.getName()，这里调用的方法是第<span class=\"number\">5</span>行代码的函数，这个没什么疑问。</span><br></pre></td></tr></table></figure>\n<p><code>getName()</code>，这里调用的是第 7 行的函数，有人要问了，为什么不是第 8 行，这里涉及到JS解析器中一个<code>function declaration hoisting(函数声明提升)</code>的过程，在 JS 代码中，使用<code>var x = function(){}</code>叫作<code>函数表达式</code>，使用<code>function x(){}</code>叫作<code>函数声明</code>，在 JS 代码加载的过程中，函数声明会在第一时间加载到源代码树的顶部，所以即使你调用使用函数声明的函数比该函数的声明还早，也是无异常的。反之，函数表达式则要在 JS 加载到该行代码时，函数才算是真正可以使用。所以这道题里，第 8 行比第 7 行的函数声明早，所以第7行的函数表达式覆盖了第 8 行的函数内容。</p>\n<p><code>Foo().getName()</code>，这里执行 Foo() 后返回的 this 是 window，即全局对象，而 Foo() 内部的<code>getName</code>由于没有使用 var 去声明，故默认为 window 的 getName 属性，所以又再一次覆盖了原先的 getName()，所以打印是1。</p>\n<p><code>getName()</code>，由于上一行代码的执行已经导致了 window 下的 getName() 被覆盖，所以依旧打印1。</p>\n<p><code>new Foo.getName()</code>，这里 new 的是 getName() 而不是 Foo()，所以打印了2，与第 10 行的调用方法类似，不过这里还会返回一个 Foo.getName 的实例。</p>\n<p><code>new Foo().getName()</code>，这里首先 new Foo() 返回 Foo() 的实例对象，这里注意，构造函数中如果没有指明 return，那么默认返回构造函数的实例，如果指定了 return，那么返回指定的 return 的值（只能是引用类型的值，如{},[]等），这里指定了 return this，this 在 new 的情况下是实例本身，所以跟默认情况下是一致的，然后又调用了 getName()，这里调用的是原型中的函数，所以打印3。</p>\n<p><code>new new Foo().getName()</code>，先不看第一个 new，则后面的步骤跟上面一致，不过到了调用函数的时候，第一个 new 发生作用了，实例化了 getName()，不过这里的 getName() 依旧是原型中的函数，只不过将他实例化了，所以依旧打印3。</p>\n"},{"title":"gulp 简单使用","date":"2016-04-04T13:08:57.000Z","_content":"\n# 前言\n\n> 今天必须安利一下 gulp 这个前端自动化构建工具，天呐噜，今天学了一下怎么用以后，我已经忘记什么是 Grunt 了！gulp 比 Grunt 好的地方就是，基于 Node.js 的流，使用 JS 语法，配置项相对于 Grunt 的简直就简单得不要不要的（虽然我 Grunt 也用得很少，因为发现用 Grunt 的配置时间比我自己去压缩什么用的时间还长……），另外，两个配置文件的代码清晰度和简洁度的对比上，gulp 就是完胜啊么么哒~\n\n# 引入和使用\n\n1. 安装好 `Node.js` 和 `npm` 两个神器以后，往下看\n\n2. 使用 npm 全局安装 gulp，命令行如下所示\n> npm install gulp -g\n\n3. 或者你也可以不全局安装，仅仅作为项目开发依赖，那么使用如下命令行安装 gulp\n> npm install gulp --save-dev\n\n4. 在项目根目录下创建一个 `gulpfile.js` 文件，用于 gulp 任务的配置\n\n5. 在 `gulpfile.js` 里进行任务配置，例如：\n```JavaScript\nvar gulp = require(\"gulp\");\n// JavaScript 压缩\nvar uglify = require(\"gulp-uglify\");\n// JavaScript 语法检测\nvar jshint = require(\"gulp-jshint\");\n// 文件输出重命名\nvar rename = require(\"gulp-rename\");\n\ngulp.task(\"jshint\", function() {\n    gulp.src(\"Nope.js\")\n        .pipe(jshint())\n        .pipe(jshint.reporter(\"default\"));\n});\n\ngulp.task(\"compress\", function() {\n    gulp.src(\"Nope.js\")\n        .pipe(rename(\"Nope.min.js\"))\n        .pipe(uglify())\n        .pipe(gulp.dest(\"gulpJS/\"));\n});\n\ngulp.task(\"default\", [\"jshint\", \"compress\"]);\n```\n\n6. 在当先目录下使用命令行工具，输入命令执行 gulp 进行自动构建\n> gulp\n或者\n> gulp jshint\n\n如果单独输入 gulp，那么会执行 `default` 任务，如果在 gulp 后面加一个任务名称，那么就是执行特定名称任务\n\n# API 说明\n\n* gulp.task(name[, deps], fn)\n> task 用于配置一个单独的任务，name 是该任务的名称；deps 是该任务的依赖任务，会在该任务执行前执行完毕；fn 是该任务的执行体。\n\n* gulp.src(globs[, options])\n> src 用于配置该任务的目标文件，globs 可以配置文件路径，当然不止于此，更多的写法可以查看官网的 API 文档；options 用于配置一些选项，如 `{buffer: false}`，将文件输入改为 stream 而不是 buffer。\n\n* gulp.pipe()\n> 使用过 Node.js 就很容易明白中间件的概念，pipe 的作用类似于中间件的作用，对文件进行处理后输出。\n\n* gulp.dest(path[, options])\n> dest 用于将 pipe 进来的文件流输出到 path 下，options 用于配置写文件的一些权限等。\n\n# 结束语\n\n> 上面提到了 gulp 的几个常用 API，此外还有几个 API 我没用到，例如 watch，可能后续在使用 less 的时候会用到。gulp 的 API 就是这么少，更多的依赖中间件处理，所以代码也更简洁，gulp 还有很多有趣的地方我没发现，希望后续学习可以发掘更多 gulp 的优点。\n\n> 官方中文文档：http://www.gulpjs.com.cn/docs/api/\n","source":"_posts/gulp-简单使用.md","raw":"---\ntitle: gulp 简单使用\ndate: 2016-04-04 21:08:57\ntags: gulp\ncategories: 前端\n---\n\n# 前言\n\n> 今天必须安利一下 gulp 这个前端自动化构建工具，天呐噜，今天学了一下怎么用以后，我已经忘记什么是 Grunt 了！gulp 比 Grunt 好的地方就是，基于 Node.js 的流，使用 JS 语法，配置项相对于 Grunt 的简直就简单得不要不要的（虽然我 Grunt 也用得很少，因为发现用 Grunt 的配置时间比我自己去压缩什么用的时间还长……），另外，两个配置文件的代码清晰度和简洁度的对比上，gulp 就是完胜啊么么哒~\n\n# 引入和使用\n\n1. 安装好 `Node.js` 和 `npm` 两个神器以后，往下看\n\n2. 使用 npm 全局安装 gulp，命令行如下所示\n> npm install gulp -g\n\n3. 或者你也可以不全局安装，仅仅作为项目开发依赖，那么使用如下命令行安装 gulp\n> npm install gulp --save-dev\n\n4. 在项目根目录下创建一个 `gulpfile.js` 文件，用于 gulp 任务的配置\n\n5. 在 `gulpfile.js` 里进行任务配置，例如：\n```JavaScript\nvar gulp = require(\"gulp\");\n// JavaScript 压缩\nvar uglify = require(\"gulp-uglify\");\n// JavaScript 语法检测\nvar jshint = require(\"gulp-jshint\");\n// 文件输出重命名\nvar rename = require(\"gulp-rename\");\n\ngulp.task(\"jshint\", function() {\n    gulp.src(\"Nope.js\")\n        .pipe(jshint())\n        .pipe(jshint.reporter(\"default\"));\n});\n\ngulp.task(\"compress\", function() {\n    gulp.src(\"Nope.js\")\n        .pipe(rename(\"Nope.min.js\"))\n        .pipe(uglify())\n        .pipe(gulp.dest(\"gulpJS/\"));\n});\n\ngulp.task(\"default\", [\"jshint\", \"compress\"]);\n```\n\n6. 在当先目录下使用命令行工具，输入命令执行 gulp 进行自动构建\n> gulp\n或者\n> gulp jshint\n\n如果单独输入 gulp，那么会执行 `default` 任务，如果在 gulp 后面加一个任务名称，那么就是执行特定名称任务\n\n# API 说明\n\n* gulp.task(name[, deps], fn)\n> task 用于配置一个单独的任务，name 是该任务的名称；deps 是该任务的依赖任务，会在该任务执行前执行完毕；fn 是该任务的执行体。\n\n* gulp.src(globs[, options])\n> src 用于配置该任务的目标文件，globs 可以配置文件路径，当然不止于此，更多的写法可以查看官网的 API 文档；options 用于配置一些选项，如 `{buffer: false}`，将文件输入改为 stream 而不是 buffer。\n\n* gulp.pipe()\n> 使用过 Node.js 就很容易明白中间件的概念，pipe 的作用类似于中间件的作用，对文件进行处理后输出。\n\n* gulp.dest(path[, options])\n> dest 用于将 pipe 进来的文件流输出到 path 下，options 用于配置写文件的一些权限等。\n\n# 结束语\n\n> 上面提到了 gulp 的几个常用 API，此外还有几个 API 我没用到，例如 watch，可能后续在使用 less 的时候会用到。gulp 的 API 就是这么少，更多的依赖中间件处理，所以代码也更简洁，gulp 还有很多有趣的地方我没发现，希望后续学习可以发掘更多 gulp 的优点。\n\n> 官方中文文档：http://www.gulpjs.com.cn/docs/api/\n","slug":"gulp-简单使用","published":1,"updated":"2016-04-04T14:13:28.611Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqggs7mf001yikvdsyh0suk3","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>今天必须安利一下 gulp 这个前端自动化构建工具，天呐噜，今天学了一下怎么用以后，我已经忘记什么是 Grunt 了！gulp 比 Grunt 好的地方就是，基于 Node.js 的流，使用 JS 语法，配置项相对于 Grunt 的简直就简单得不要不要的（虽然我 Grunt 也用得很少，因为发现用 Grunt 的配置时间比我自己去压缩什么用的时间还长……），另外，两个配置文件的代码清晰度和简洁度的对比上，gulp 就是完胜啊么么哒~</p>\n</blockquote>\n<h1 id=\"引入和使用\"><a href=\"#引入和使用\" class=\"headerlink\" title=\"引入和使用\"></a>引入和使用</h1><ol>\n<li><p>安装好 <code>Node.js</code> 和 <code>npm</code> 两个神器以后，往下看</p>\n</li>\n<li><p>使用 npm 全局安装 gulp，命令行如下所示</p>\n<blockquote>\n<p>npm install gulp -g</p>\n</blockquote>\n</li>\n<li><p>或者你也可以不全局安装，仅仅作为项目开发依赖，那么使用如下命令行安装 gulp</p>\n<blockquote>\n<p>npm install gulp –save-dev</p>\n</blockquote>\n</li>\n<li><p>在项目根目录下创建一个 <code>gulpfile.js</code> 文件，用于 gulp 任务的配置</p>\n</li>\n<li><p>在 <code>gulpfile.js</code> 里进行任务配置，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// JavaScript 压缩</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-uglify\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// JavaScript 语法检测</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> jshint = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-jshint\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 文件输出重命名</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rename = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-rename\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"jshint\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">\"Nope.js\"</span>)</span><br><span class=\"line\">        .pipe(jshint())</span><br><span class=\"line\">        .pipe(jshint.reporter(<span class=\"string\">\"default\"</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"compress\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">\"Nope.js\"</span>)</span><br><span class=\"line\">        .pipe(rename(<span class=\"string\">\"Nope.min.js\"</span>))</span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">\"gulpJS/\"</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"default\"</span>, [<span class=\"string\">\"jshint\"</span>, <span class=\"string\">\"compress\"</span>]);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在当先目录下使用命令行工具，输入命令执行 gulp 进行自动构建</p>\n<blockquote>\n<p>gulp<br>或者<br>gulp jshint</p>\n</blockquote>\n</li>\n</ol>\n<p>如果单独输入 gulp，那么会执行 <code>default</code> 任务，如果在 gulp 后面加一个任务名称，那么就是执行特定名称任务</p>\n<h1 id=\"API-说明\"><a href=\"#API-说明\" class=\"headerlink\" title=\"API 说明\"></a>API 说明</h1><ul>\n<li><p>gulp.task(name[, deps], fn)</p>\n<blockquote>\n<p>task 用于配置一个单独的任务，name 是该任务的名称；deps 是该任务的依赖任务，会在该任务执行前执行完毕；fn 是该任务的执行体。</p>\n</blockquote>\n</li>\n<li><p>gulp.src(globs[, options])</p>\n<blockquote>\n<p>src 用于配置该任务的目标文件，globs 可以配置文件路径，当然不止于此，更多的写法可以查看官网的 API 文档；options 用于配置一些选项，如 <code>{buffer: false}</code>，将文件输入改为 stream 而不是 buffer。</p>\n</blockquote>\n</li>\n<li><p>gulp.pipe()</p>\n<blockquote>\n<p>使用过 Node.js 就很容易明白中间件的概念，pipe 的作用类似于中间件的作用，对文件进行处理后输出。</p>\n</blockquote>\n</li>\n<li><p>gulp.dest(path[, options])</p>\n<blockquote>\n<p>dest 用于将 pipe 进来的文件流输出到 path 下，options 用于配置写文件的一些权限等。</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h1><blockquote>\n<p>上面提到了 gulp 的几个常用 API，此外还有几个 API 我没用到，例如 watch，可能后续在使用 less 的时候会用到。gulp 的 API 就是这么少，更多的依赖中间件处理，所以代码也更简洁，gulp 还有很多有趣的地方我没发现，希望后续学习可以发掘更多 gulp 的优点。</p>\n<p>官方中文文档：<a href=\"http://www.gulpjs.com.cn/docs/api/\" target=\"_blank\" rel=\"external\">http://www.gulpjs.com.cn/docs/api/</a></p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>今天必须安利一下 gulp 这个前端自动化构建工具，天呐噜，今天学了一下怎么用以后，我已经忘记什么是 Grunt 了！gulp 比 Grunt 好的地方就是，基于 Node.js 的流，使用 JS 语法，配置项相对于 Grunt 的简直就简单得不要不要的（虽然我 Grunt 也用得很少，因为发现用 Grunt 的配置时间比我自己去压缩什么用的时间还长……），另外，两个配置文件的代码清晰度和简洁度的对比上，gulp 就是完胜啊么么哒~</p>\n</blockquote>\n<h1 id=\"引入和使用\"><a href=\"#引入和使用\" class=\"headerlink\" title=\"引入和使用\"></a>引入和使用</h1><ol>\n<li><p>安装好 <code>Node.js</code> 和 <code>npm</code> 两个神器以后，往下看</p>\n</li>\n<li><p>使用 npm 全局安装 gulp，命令行如下所示</p>\n<blockquote>\n<p>npm install gulp -g</p>\n</blockquote>\n</li>\n<li><p>或者你也可以不全局安装，仅仅作为项目开发依赖，那么使用如下命令行安装 gulp</p>\n<blockquote>\n<p>npm install gulp –save-dev</p>\n</blockquote>\n</li>\n<li><p>在项目根目录下创建一个 <code>gulpfile.js</code> 文件，用于 gulp 任务的配置</p>\n</li>\n<li><p>在 <code>gulpfile.js</code> 里进行任务配置，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// JavaScript 压缩</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-uglify\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// JavaScript 语法检测</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> jshint = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-jshint\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 文件输出重命名</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rename = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-rename\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"jshint\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">\"Nope.js\"</span>)</span><br><span class=\"line\">        .pipe(jshint())</span><br><span class=\"line\">        .pipe(jshint.reporter(<span class=\"string\">\"default\"</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"compress\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">\"Nope.js\"</span>)</span><br><span class=\"line\">        .pipe(rename(<span class=\"string\">\"Nope.min.js\"</span>))</span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">\"gulpJS/\"</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"default\"</span>, [<span class=\"string\">\"jshint\"</span>, <span class=\"string\">\"compress\"</span>]);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在当先目录下使用命令行工具，输入命令执行 gulp 进行自动构建</p>\n<blockquote>\n<p>gulp<br>或者<br>gulp jshint</p>\n</blockquote>\n</li>\n</ol>\n<p>如果单独输入 gulp，那么会执行 <code>default</code> 任务，如果在 gulp 后面加一个任务名称，那么就是执行特定名称任务</p>\n<h1 id=\"API-说明\"><a href=\"#API-说明\" class=\"headerlink\" title=\"API 说明\"></a>API 说明</h1><ul>\n<li><p>gulp.task(name[, deps], fn)</p>\n<blockquote>\n<p>task 用于配置一个单独的任务，name 是该任务的名称；deps 是该任务的依赖任务，会在该任务执行前执行完毕；fn 是该任务的执行体。</p>\n</blockquote>\n</li>\n<li><p>gulp.src(globs[, options])</p>\n<blockquote>\n<p>src 用于配置该任务的目标文件，globs 可以配置文件路径，当然不止于此，更多的写法可以查看官网的 API 文档；options 用于配置一些选项，如 <code>{buffer: false}</code>，将文件输入改为 stream 而不是 buffer。</p>\n</blockquote>\n</li>\n<li><p>gulp.pipe()</p>\n<blockquote>\n<p>使用过 Node.js 就很容易明白中间件的概念，pipe 的作用类似于中间件的作用，对文件进行处理后输出。</p>\n</blockquote>\n</li>\n<li><p>gulp.dest(path[, options])</p>\n<blockquote>\n<p>dest 用于将 pipe 进来的文件流输出到 path 下，options 用于配置写文件的一些权限等。</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h1><blockquote>\n<p>上面提到了 gulp 的几个常用 API，此外还有几个 API 我没用到，例如 watch，可能后续在使用 less 的时候会用到。gulp 的 API 就是这么少，更多的依赖中间件处理，所以代码也更简洁，gulp 还有很多有趣的地方我没发现，希望后续学习可以发掘更多 gulp 的优点。</p>\n<p>官方中文文档：<a href=\"http://www.gulpjs.com.cn/docs/api/\">http://www.gulpjs.com.cn/docs/api/</a></p>\n</blockquote>\n"},{"title":"简单使用 require.js","date":"2016-03-28T05:25:44.000Z","_content":"\n# 前言\n\n> `CommonJS` 和 `AMD` 是目前前端模块化的两个常用规范，此外，还有从 `sea.js` 引申出来的 `CMD` 规范，与 `AMD` 规范有异曲同工之妙，由于没有实际使用过，所以还是不赘述了。\n\n## CommonJS\n\nCommonJS 规范在 JavaScript 上的应用比较广泛的当属 Node.js。Node.js 是运行在 V8 引擎上的以 JavaScript 作为编程语言的服务端语言，模块化对服务端是非常重要的。美国程序员 `Ryan Dahl`（Node.js 创始人）在使用了 CommonJS 规范来对 Node.js 的模块进行规范管理，并且模块的加载时同步的。你可以像下面一样引入模块：\n\n```Javascript\nvar express = require(\"express\");\nvar app = express();\n\napp.get(\"/something\", function(req, res, next) {\n\n    // doing something\n\n})\n```\n\n以上代码引入了 `express` 框架模块，并且执行了 express，这样 `app` 这个变量就得到了执行后的一个实例，并可以使用其中的各种函数方法。\n\n## 为什么使用 AMD？\n\n既然有了 CommonJS 规范来进行 JavaScript 的模块化管理，为什么还会出现 AMD 规范？原因很简单，环境不同，在服务端环境中，由于模块文件都存在于服务器中，所以请求模块的时间几乎可以忽略，而且请求模块的次数大多数只请求一次就可以从服务器开启一直使用到服务器重启。而在客户端环境中，每次刷新页面都会重新请求 JavaScript 文件，并且，CommonJS 是同步加载模块文件，所谓同步，就是必须等到 JavaScript 模块文件请求并加载完毕才会继续往下执行程序，在客户端页面中，如果一个 JavaScript 模块文件请求和加载的时间很长，那么页面的渲染和后续的程序执行将会一直被阻塞。所以，客户端的模块化管理需要一种 `非阻塞式` 和 `异步` 的加载方式，而 AMD 规范就是这么一种规范。\n\n## require.js\n\n`require.js` 是对 AMD 规范的一种实现和执行，此外，require.js 也可以使用 CommonJS 风格的方式。\n\n### 引入\n\n```Javascript\n<script data-main=\"javascripts/main.js\" src=\"javascripts/require.js\"></script>\n```\n\n以上，引入了 require.js 的同时，使用 `data-main` 指定了最早加载的一个模块，require.js 里的 `baseUrl` 同时默认被设置为 `javascripts`，如果此后没有显式地使用 require.config() 对 baseUrl 和 paths 进行设置，那么所有依赖模块的基础路径都将会以该 baseUrl 路径作为基础路径进行搜索。\n\n### require.config(options)\n\n```Javascript\nrequire.config({\n\n    baseUrl: \"./libs\",\n\n    paths: {\n        jquery: \"jquery-2.2.2\",\n        underscore: \"/underscore\",\n        backbone: \"http://backbonejs.org/backbone\"\n    }\n})\n```\n\n以上代码中，我们显式地设置了模块搜索路径的 baseUrl 为 `./libs`，同时在 paths 中，我们指定了 `jquery`，`underscore` 和 `backbone` 的路径，这里使用了三种不同的路径定义方式，会有不同的搜索结果。假设我们当前页面的路径为 `http://localhost`，那么三个模块文件的路径如下：\n\n* jquery 的路径为 `baseUrl + paths路径 = http://localhost/libs/jquery-2.2.2.js`\n\n* underscore 的路径为 `当前路径 + paths路径 = http://localhost/underscore.js`\n\n* backbone 的路径为 `paths 路径 = http://backbonejs.org/backbone.js`\n\n这里可以发现，所有 JavaScript 的后缀 `.js` 都不能加上去，不然会请求类似 `underscore.js.js` 这样的错误文件。以上就是模块文件路径指定的多种不同方式所产生的不同结果。\n\n### define(name, deps, callback)\n\nrequire.js 使用 `define(name, deps, callback)` 来定义模块，如下代码所示：\n\n```Javascript\n// first\ndefine(function() {\n\n    // do somthing\n\n    return {\n        // return a key-value object\n        api: \"myApi\"\n    };\n});\n\n// second\ndefine([\"jquery\", \"underscore\"], function($, _) {\n\n    // do something\n\n    return ……;\n});\n\n// third\ndefine(\"foo/user\", [\"jquery\", \"underscore\"], function($, _) {\n\n    // do something\n\n    return ……;\n});\n```\n\n* 第一种方法是简单的定义模块，这里可以在 callback 里直接定义一些东西，使用 return 返回一个对象字面量\n\n* 第二种方法首先定义了该模块的依赖模块 jquery 和 underscore，然后定义一个 callback函数，当 jquery 和 underscore加载完成后，其暴露的接口将会依次传给 callback 的 arguments\n\n* 第三种方法首先定义了该模块的名称，后面的如第二种方法一样，但是不推荐自定义模块名称，如果你移动了该模块的路径，那么就得重命名\n\n### require(deps, callback)\n\nrequire.js 使用 `require(deps, callback)` 来请求加载模块，如下代码所示：\n\n```Javascript\nrequire([\"jquery\"], function($) {\n\n    // do something\n    // never need return anything\n});\n```\n\nrequire() 和 define() 的使用上很相似，但是 require() 用来加载，define() 用来定义，区别是前者不需要返回一个对象，后者需要返回一个对象来代表该模块的接口。\n\n\n### CommonJS 风格的 require.js\n\n```Javascript\n// 可以解决循环依赖\ndefine(function(require, exports, module) {\n\n    var base = require(\"./base\");\n\n    exports.a = function() {\n        return base;\n    };\n});\n\n// 就近依赖\ndefine([\"require\", \"jquery\"], function(require) {\n\n    var $ = require(\"jquery\");\n\n    return function() {\n        return $;\n    }\n});\n\n// 定义模块并暴露接口\ndefine([\"exports\", \"a\"], function(exports, a) {\n\n    exports.bar = function() {\n        return a.bar();\n    };\n});\n```\n\n> 以上三种 CommonJS 风格的定义模块方法，更详细的请参考 http://www.requirejs.cn/\n\n> 参考来源: http://www.ruanyifeng.com/blog/2012/11/require_js.html\n","source":"_posts/简单使用-require-js.md","raw":"---\ntitle: 简单使用 require.js\ndate: 2016-03-28 13:25:44\ntags: 模块化\ncategories: Javascript\n---\n\n# 前言\n\n> `CommonJS` 和 `AMD` 是目前前端模块化的两个常用规范，此外，还有从 `sea.js` 引申出来的 `CMD` 规范，与 `AMD` 规范有异曲同工之妙，由于没有实际使用过，所以还是不赘述了。\n\n## CommonJS\n\nCommonJS 规范在 JavaScript 上的应用比较广泛的当属 Node.js。Node.js 是运行在 V8 引擎上的以 JavaScript 作为编程语言的服务端语言，模块化对服务端是非常重要的。美国程序员 `Ryan Dahl`（Node.js 创始人）在使用了 CommonJS 规范来对 Node.js 的模块进行规范管理，并且模块的加载时同步的。你可以像下面一样引入模块：\n\n```Javascript\nvar express = require(\"express\");\nvar app = express();\n\napp.get(\"/something\", function(req, res, next) {\n\n    // doing something\n\n})\n```\n\n以上代码引入了 `express` 框架模块，并且执行了 express，这样 `app` 这个变量就得到了执行后的一个实例，并可以使用其中的各种函数方法。\n\n## 为什么使用 AMD？\n\n既然有了 CommonJS 规范来进行 JavaScript 的模块化管理，为什么还会出现 AMD 规范？原因很简单，环境不同，在服务端环境中，由于模块文件都存在于服务器中，所以请求模块的时间几乎可以忽略，而且请求模块的次数大多数只请求一次就可以从服务器开启一直使用到服务器重启。而在客户端环境中，每次刷新页面都会重新请求 JavaScript 文件，并且，CommonJS 是同步加载模块文件，所谓同步，就是必须等到 JavaScript 模块文件请求并加载完毕才会继续往下执行程序，在客户端页面中，如果一个 JavaScript 模块文件请求和加载的时间很长，那么页面的渲染和后续的程序执行将会一直被阻塞。所以，客户端的模块化管理需要一种 `非阻塞式` 和 `异步` 的加载方式，而 AMD 规范就是这么一种规范。\n\n## require.js\n\n`require.js` 是对 AMD 规范的一种实现和执行，此外，require.js 也可以使用 CommonJS 风格的方式。\n\n### 引入\n\n```Javascript\n<script data-main=\"javascripts/main.js\" src=\"javascripts/require.js\"></script>\n```\n\n以上，引入了 require.js 的同时，使用 `data-main` 指定了最早加载的一个模块，require.js 里的 `baseUrl` 同时默认被设置为 `javascripts`，如果此后没有显式地使用 require.config() 对 baseUrl 和 paths 进行设置，那么所有依赖模块的基础路径都将会以该 baseUrl 路径作为基础路径进行搜索。\n\n### require.config(options)\n\n```Javascript\nrequire.config({\n\n    baseUrl: \"./libs\",\n\n    paths: {\n        jquery: \"jquery-2.2.2\",\n        underscore: \"/underscore\",\n        backbone: \"http://backbonejs.org/backbone\"\n    }\n})\n```\n\n以上代码中，我们显式地设置了模块搜索路径的 baseUrl 为 `./libs`，同时在 paths 中，我们指定了 `jquery`，`underscore` 和 `backbone` 的路径，这里使用了三种不同的路径定义方式，会有不同的搜索结果。假设我们当前页面的路径为 `http://localhost`，那么三个模块文件的路径如下：\n\n* jquery 的路径为 `baseUrl + paths路径 = http://localhost/libs/jquery-2.2.2.js`\n\n* underscore 的路径为 `当前路径 + paths路径 = http://localhost/underscore.js`\n\n* backbone 的路径为 `paths 路径 = http://backbonejs.org/backbone.js`\n\n这里可以发现，所有 JavaScript 的后缀 `.js` 都不能加上去，不然会请求类似 `underscore.js.js` 这样的错误文件。以上就是模块文件路径指定的多种不同方式所产生的不同结果。\n\n### define(name, deps, callback)\n\nrequire.js 使用 `define(name, deps, callback)` 来定义模块，如下代码所示：\n\n```Javascript\n// first\ndefine(function() {\n\n    // do somthing\n\n    return {\n        // return a key-value object\n        api: \"myApi\"\n    };\n});\n\n// second\ndefine([\"jquery\", \"underscore\"], function($, _) {\n\n    // do something\n\n    return ……;\n});\n\n// third\ndefine(\"foo/user\", [\"jquery\", \"underscore\"], function($, _) {\n\n    // do something\n\n    return ……;\n});\n```\n\n* 第一种方法是简单的定义模块，这里可以在 callback 里直接定义一些东西，使用 return 返回一个对象字面量\n\n* 第二种方法首先定义了该模块的依赖模块 jquery 和 underscore，然后定义一个 callback函数，当 jquery 和 underscore加载完成后，其暴露的接口将会依次传给 callback 的 arguments\n\n* 第三种方法首先定义了该模块的名称，后面的如第二种方法一样，但是不推荐自定义模块名称，如果你移动了该模块的路径，那么就得重命名\n\n### require(deps, callback)\n\nrequire.js 使用 `require(deps, callback)` 来请求加载模块，如下代码所示：\n\n```Javascript\nrequire([\"jquery\"], function($) {\n\n    // do something\n    // never need return anything\n});\n```\n\nrequire() 和 define() 的使用上很相似，但是 require() 用来加载，define() 用来定义，区别是前者不需要返回一个对象，后者需要返回一个对象来代表该模块的接口。\n\n\n### CommonJS 风格的 require.js\n\n```Javascript\n// 可以解决循环依赖\ndefine(function(require, exports, module) {\n\n    var base = require(\"./base\");\n\n    exports.a = function() {\n        return base;\n    };\n});\n\n// 就近依赖\ndefine([\"require\", \"jquery\"], function(require) {\n\n    var $ = require(\"jquery\");\n\n    return function() {\n        return $;\n    }\n});\n\n// 定义模块并暴露接口\ndefine([\"exports\", \"a\"], function(exports, a) {\n\n    exports.bar = function() {\n        return a.bar();\n    };\n});\n```\n\n> 以上三种 CommonJS 风格的定义模块方法，更详细的请参考 http://www.requirejs.cn/\n\n> 参考来源: http://www.ruanyifeng.com/blog/2012/11/require_js.html\n","slug":"简单使用-require-js","published":1,"updated":"2016-03-28T07:47:52.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqggs7mf0021ikvdx38ohnd5","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p><code>CommonJS</code> 和 <code>AMD</code> 是目前前端模块化的两个常用规范，此外，还有从 <code>sea.js</code> 引申出来的 <code>CMD</code> 规范，与 <code>AMD</code> 规范有异曲同工之妙，由于没有实际使用过，所以还是不赘述了。</p>\n</blockquote>\n<h2 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h2><p>CommonJS 规范在 JavaScript 上的应用比较广泛的当属 Node.js。Node.js 是运行在 V8 引擎上的以 JavaScript 作为编程语言的服务端语言，模块化对服务端是非常重要的。美国程序员 <code>Ryan Dahl</code>（Node.js 创始人）在使用了 CommonJS 规范来对 Node.js 的模块进行规范管理，并且模块的加载时同步的。你可以像下面一样引入模块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/something\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// doing something</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>以上代码引入了 <code>express</code> 框架模块，并且执行了 express，这样 <code>app</code> 这个变量就得到了执行后的一个实例，并可以使用其中的各种函数方法。</p>\n<h2 id=\"为什么使用-AMD？\"><a href=\"#为什么使用-AMD？\" class=\"headerlink\" title=\"为什么使用 AMD？\"></a>为什么使用 AMD？</h2><p>既然有了 CommonJS 规范来进行 JavaScript 的模块化管理，为什么还会出现 AMD 规范？原因很简单，环境不同，在服务端环境中，由于模块文件都存在于服务器中，所以请求模块的时间几乎可以忽略，而且请求模块的次数大多数只请求一次就可以从服务器开启一直使用到服务器重启。而在客户端环境中，每次刷新页面都会重新请求 JavaScript 文件，并且，CommonJS 是同步加载模块文件，所谓同步，就是必须等到 JavaScript 模块文件请求并加载完毕才会继续往下执行程序，在客户端页面中，如果一个 JavaScript 模块文件请求和加载的时间很长，那么页面的渲染和后续的程序执行将会一直被阻塞。所以，客户端的模块化管理需要一种 <code>非阻塞式</code> 和 <code>异步</code> 的加载方式，而 AMD 规范就是这么一种规范。</p>\n<h2 id=\"require-js\"><a href=\"#require-js\" class=\"headerlink\" title=\"require.js\"></a>require.js</h2><p><code>require.js</code> 是对 AMD 规范的一种实现和执行，此外，require.js 也可以使用 CommonJS 风格的方式。</p>\n<h3 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script data-main=<span class=\"string\">\"javascripts/main.js\"</span> src=<span class=\"string\">\"javascripts/require.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>以上，引入了 require.js 的同时，使用 <code>data-main</code> 指定了最早加载的一个模块，require.js 里的 <code>baseUrl</code> 同时默认被设置为 <code>javascripts</code>，如果此后没有显式地使用 require.config() 对 baseUrl 和 paths 进行设置，那么所有依赖模块的基础路径都将会以该 baseUrl 路径作为基础路径进行搜索。</p>\n<h3 id=\"require-config-options\"><a href=\"#require-config-options\" class=\"headerlink\" title=\"require.config(options)\"></a>require.config(options)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>.config(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    baseUrl: <span class=\"string\">\"./libs\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    paths: &#123;</span><br><span class=\"line\">        jquery: <span class=\"string\">\"jquery-2.2.2\"</span>,</span><br><span class=\"line\">        underscore: <span class=\"string\">\"/underscore\"</span>,</span><br><span class=\"line\">        backbone: <span class=\"string\">\"http://backbonejs.org/backbone\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>以上代码中，我们显式地设置了模块搜索路径的 baseUrl 为 <code>./libs</code>，同时在 paths 中，我们指定了 <code>jquery</code>，<code>underscore</code> 和 <code>backbone</code> 的路径，这里使用了三种不同的路径定义方式，会有不同的搜索结果。假设我们当前页面的路径为 <code>http://localhost</code>，那么三个模块文件的路径如下：</p>\n<ul>\n<li><p>jquery 的路径为 <code>baseUrl + paths路径 = http://localhost/libs/jquery-2.2.2.js</code></p>\n</li>\n<li><p>underscore 的路径为 <code>当前路径 + paths路径 = http://localhost/underscore.js</code></p>\n</li>\n<li><p>backbone 的路径为 <code>paths 路径 = http://backbonejs.org/backbone.js</code></p>\n</li>\n</ul>\n<p>这里可以发现，所有 JavaScript 的后缀 <code>.js</code> 都不能加上去，不然会请求类似 <code>underscore.js.js</code> 这样的错误文件。以上就是模块文件路径指定的多种不同方式所产生的不同结果。</p>\n<h3 id=\"define-name-deps-callback\"><a href=\"#define-name-deps-callback\" class=\"headerlink\" title=\"define(name, deps, callback)\"></a>define(name, deps, callback)</h3><p>require.js 使用 <code>define(name, deps, callback)</code> 来定义模块，如下代码所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// first</span></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// do somthing</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// return a key-value object</span></span><br><span class=\"line\">        api: <span class=\"string\">\"myApi\"</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// second</span></span><br><span class=\"line\">define([<span class=\"string\">\"jquery\"</span>, <span class=\"string\">\"underscore\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$, _</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ……;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// third</span></span><br><span class=\"line\">define(<span class=\"string\">\"foo/user\"</span>, [<span class=\"string\">\"jquery\"</span>, <span class=\"string\">\"underscore\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$, _</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ……;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>第一种方法是简单的定义模块，这里可以在 callback 里直接定义一些东西，使用 return 返回一个对象字面量</p>\n</li>\n<li><p>第二种方法首先定义了该模块的依赖模块 jquery 和 underscore，然后定义一个 callback函数，当 jquery 和 underscore加载完成后，其暴露的接口将会依次传给 callback 的 arguments</p>\n</li>\n<li><p>第三种方法首先定义了该模块的名称，后面的如第二种方法一样，但是不推荐自定义模块名称，如果你移动了该模块的路径，那么就得重命名</p>\n</li>\n</ul>\n<h3 id=\"require-deps-callback\"><a href=\"#require-deps-callback\" class=\"headerlink\" title=\"require(deps, callback)\"></a>require(deps, callback)</h3><p>require.js 使用 <code>require(deps, callback)</code> 来请求加载模块，如下代码所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">\"jquery\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">    <span class=\"comment\">// never need return anything</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>require() 和 define() 的使用上很相似，但是 require() 用来加载，define() 用来定义，区别是前者不需要返回一个对象，后者需要返回一个对象来代表该模块的接口。</p>\n<h3 id=\"CommonJS-风格的-require-js\"><a href=\"#CommonJS-风格的-require-js\" class=\"headerlink\" title=\"CommonJS 风格的 require.js\"></a>CommonJS 风格的 require.js</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可以解决循环依赖</span></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> base = <span class=\"built_in\">require</span>(<span class=\"string\">\"./base\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    exports.a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> base;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 就近依赖</span></span><br><span class=\"line\">define([<span class=\"string\">\"require\"</span>, <span class=\"string\">\"jquery\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">\"jquery\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义模块并暴露接口</span></span><br><span class=\"line\">define([<span class=\"string\">\"exports\"</span>, <span class=\"string\">\"a\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">exports, a</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    exports.bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.bar();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以上三种 CommonJS 风格的定义模块方法，更详细的请参考 <a href=\"http://www.requirejs.cn/\" target=\"_blank\" rel=\"external\">http://www.requirejs.cn/</a></p>\n<p>参考来源: <a href=\"http://www.ruanyifeng.com/blog/2012/11/require_js.html\" target=\"_blank\" rel=\"external\">http://www.ruanyifeng.com/blog/2012/11/require_js.html</a></p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p><code>CommonJS</code> 和 <code>AMD</code> 是目前前端模块化的两个常用规范，此外，还有从 <code>sea.js</code> 引申出来的 <code>CMD</code> 规范，与 <code>AMD</code> 规范有异曲同工之妙，由于没有实际使用过，所以还是不赘述了。</p>\n</blockquote>\n<h2 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h2><p>CommonJS 规范在 JavaScript 上的应用比较广泛的当属 Node.js。Node.js 是运行在 V8 引擎上的以 JavaScript 作为编程语言的服务端语言，模块化对服务端是非常重要的。美国程序员 <code>Ryan Dahl</code>（Node.js 创始人）在使用了 CommonJS 规范来对 Node.js 的模块进行规范管理，并且模块的加载时同步的。你可以像下面一样引入模块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/something\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// doing something</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>以上代码引入了 <code>express</code> 框架模块，并且执行了 express，这样 <code>app</code> 这个变量就得到了执行后的一个实例，并可以使用其中的各种函数方法。</p>\n<h2 id=\"为什么使用-AMD？\"><a href=\"#为什么使用-AMD？\" class=\"headerlink\" title=\"为什么使用 AMD？\"></a>为什么使用 AMD？</h2><p>既然有了 CommonJS 规范来进行 JavaScript 的模块化管理，为什么还会出现 AMD 规范？原因很简单，环境不同，在服务端环境中，由于模块文件都存在于服务器中，所以请求模块的时间几乎可以忽略，而且请求模块的次数大多数只请求一次就可以从服务器开启一直使用到服务器重启。而在客户端环境中，每次刷新页面都会重新请求 JavaScript 文件，并且，CommonJS 是同步加载模块文件，所谓同步，就是必须等到 JavaScript 模块文件请求并加载完毕才会继续往下执行程序，在客户端页面中，如果一个 JavaScript 模块文件请求和加载的时间很长，那么页面的渲染和后续的程序执行将会一直被阻塞。所以，客户端的模块化管理需要一种 <code>非阻塞式</code> 和 <code>异步</code> 的加载方式，而 AMD 规范就是这么一种规范。</p>\n<h2 id=\"require-js\"><a href=\"#require-js\" class=\"headerlink\" title=\"require.js\"></a>require.js</h2><p><code>require.js</code> 是对 AMD 规范的一种实现和执行，此外，require.js 也可以使用 CommonJS 风格的方式。</p>\n<h3 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script data-main=<span class=\"string\">\"javascripts/main.js\"</span> src=<span class=\"string\">\"javascripts/require.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>以上，引入了 require.js 的同时，使用 <code>data-main</code> 指定了最早加载的一个模块，require.js 里的 <code>baseUrl</code> 同时默认被设置为 <code>javascripts</code>，如果此后没有显式地使用 require.config() 对 baseUrl 和 paths 进行设置，那么所有依赖模块的基础路径都将会以该 baseUrl 路径作为基础路径进行搜索。</p>\n<h3 id=\"require-config-options\"><a href=\"#require-config-options\" class=\"headerlink\" title=\"require.config(options)\"></a>require.config(options)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>.config(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    baseUrl: <span class=\"string\">\"./libs\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    paths: &#123;</span><br><span class=\"line\">        jquery: <span class=\"string\">\"jquery-2.2.2\"</span>,</span><br><span class=\"line\">        underscore: <span class=\"string\">\"/underscore\"</span>,</span><br><span class=\"line\">        backbone: <span class=\"string\">\"http://backbonejs.org/backbone\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>以上代码中，我们显式地设置了模块搜索路径的 baseUrl 为 <code>./libs</code>，同时在 paths 中，我们指定了 <code>jquery</code>，<code>underscore</code> 和 <code>backbone</code> 的路径，这里使用了三种不同的路径定义方式，会有不同的搜索结果。假设我们当前页面的路径为 <code>http://localhost</code>，那么三个模块文件的路径如下：</p>\n<ul>\n<li><p>jquery 的路径为 <code>baseUrl + paths路径 = http://localhost/libs/jquery-2.2.2.js</code></p>\n</li>\n<li><p>underscore 的路径为 <code>当前路径 + paths路径 = http://localhost/underscore.js</code></p>\n</li>\n<li><p>backbone 的路径为 <code>paths 路径 = http://backbonejs.org/backbone.js</code></p>\n</li>\n</ul>\n<p>这里可以发现，所有 JavaScript 的后缀 <code>.js</code> 都不能加上去，不然会请求类似 <code>underscore.js.js</code> 这样的错误文件。以上就是模块文件路径指定的多种不同方式所产生的不同结果。</p>\n<h3 id=\"define-name-deps-callback\"><a href=\"#define-name-deps-callback\" class=\"headerlink\" title=\"define(name, deps, callback)\"></a>define(name, deps, callback)</h3><p>require.js 使用 <code>define(name, deps, callback)</code> 来定义模块，如下代码所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// first</span></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// do somthing</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// return a key-value object</span></span><br><span class=\"line\">        api: <span class=\"string\">\"myApi\"</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// second</span></span><br><span class=\"line\">define([<span class=\"string\">\"jquery\"</span>, <span class=\"string\">\"underscore\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$, _</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ……;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// third</span></span><br><span class=\"line\">define(<span class=\"string\">\"foo/user\"</span>, [<span class=\"string\">\"jquery\"</span>, <span class=\"string\">\"underscore\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$, _</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ……;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>第一种方法是简单的定义模块，这里可以在 callback 里直接定义一些东西，使用 return 返回一个对象字面量</p>\n</li>\n<li><p>第二种方法首先定义了该模块的依赖模块 jquery 和 underscore，然后定义一个 callback函数，当 jquery 和 underscore加载完成后，其暴露的接口将会依次传给 callback 的 arguments</p>\n</li>\n<li><p>第三种方法首先定义了该模块的名称，后面的如第二种方法一样，但是不推荐自定义模块名称，如果你移动了该模块的路径，那么就得重命名</p>\n</li>\n</ul>\n<h3 id=\"require-deps-callback\"><a href=\"#require-deps-callback\" class=\"headerlink\" title=\"require(deps, callback)\"></a>require(deps, callback)</h3><p>require.js 使用 <code>require(deps, callback)</code> 来请求加载模块，如下代码所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">\"jquery\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">    <span class=\"comment\">// never need return anything</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>require() 和 define() 的使用上很相似，但是 require() 用来加载，define() 用来定义，区别是前者不需要返回一个对象，后者需要返回一个对象来代表该模块的接口。</p>\n<h3 id=\"CommonJS-风格的-require-js\"><a href=\"#CommonJS-风格的-require-js\" class=\"headerlink\" title=\"CommonJS 风格的 require.js\"></a>CommonJS 风格的 require.js</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可以解决循环依赖</span></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> base = <span class=\"built_in\">require</span>(<span class=\"string\">\"./base\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    exports.a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> base;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 就近依赖</span></span><br><span class=\"line\">define([<span class=\"string\">\"require\"</span>, <span class=\"string\">\"jquery\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">\"jquery\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义模块并暴露接口</span></span><br><span class=\"line\">define([<span class=\"string\">\"exports\"</span>, <span class=\"string\">\"a\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">exports, a</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    exports.bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.bar();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以上三种 CommonJS 风格的定义模块方法，更详细的请参考 <a href=\"http://www.requirejs.cn/\">http://www.requirejs.cn/</a></p>\n<p>参考来源: <a href=\"http://www.ruanyifeng.com/blog/2012/11/require_js.html\">http://www.ruanyifeng.com/blog/2012/11/require_js.html</a></p>\n</blockquote>\n"},{"title":"准备开始一个新的项目 Oxygen轻音乐","date":"2016-03-18T17:54:40.000Z","_content":"> 今天顿生无聊，感觉陷入一个瓶颈，所以打算开一个新的项目——`Oxygen轻音乐`，比较简单的一个收藏自己喜欢的歌的网站，结合自己之前学过的东西进行整理，从中发现不足，进行下一步学习。同时也可以得到一些`Nope.js`的新函数的灵感，不废话，先进行一下需求分析和技术分析。\n\n# 需求\n* 前端\n    * 一个简单的播放器样式\n    * 暂停/播放\n    * 切歌\n    * 音量调节\n    * 循环播放\n    * 歌词显示（动态 or 静态）\n    * 歌曲列表的显示\n    * 歌曲 & 歌手信息\n* 后台\n    * 需要有提供更新歌曲信息的页面\n    * 新增歌曲\n    * 删除歌曲\n    * 排序歌曲\n\n# 技术\n* 前端\n    * Javascript + CSS3 + HTML5\n    * Grunt 负责打包\n    * require.js 作模块管理\n    * Backbone.js 作为 MVC 框架(优点：轻量级，适合SPA，Oxygen 切歌需要相对多的 dom 操作)\n    * 暂定支持IE 9+, Chrome, Firefox, Opera, Edge\n* 后台\n    * Node.js\n    * hbs 模板引擎\n    * MongoDB 数据库\n    * express Web框架\n    * 腾讯云作为资源存放和服务器托管（下行1M，如果速度不满足，改用七牛云）\n\n# 样式\n* 参照一下 UI 设计图，并作修改\n> http://www.ui.cn/detail/9499.html\n\n* 播放器背景使用高斯模糊对相应歌曲图片处理\n* 使用 Font Awesome 字体图标\n","source":"_posts/准备开始一个新的项目-Oxygen轻音乐.md","raw":"---\ntitle: 准备开始一个新的项目 Oxygen轻音乐\ndate: 2016-03-19 01:54:40\ntags: Oxygen\ncategories: 项目\n---\n> 今天顿生无聊，感觉陷入一个瓶颈，所以打算开一个新的项目——`Oxygen轻音乐`，比较简单的一个收藏自己喜欢的歌的网站，结合自己之前学过的东西进行整理，从中发现不足，进行下一步学习。同时也可以得到一些`Nope.js`的新函数的灵感，不废话，先进行一下需求分析和技术分析。\n\n# 需求\n* 前端\n    * 一个简单的播放器样式\n    * 暂停/播放\n    * 切歌\n    * 音量调节\n    * 循环播放\n    * 歌词显示（动态 or 静态）\n    * 歌曲列表的显示\n    * 歌曲 & 歌手信息\n* 后台\n    * 需要有提供更新歌曲信息的页面\n    * 新增歌曲\n    * 删除歌曲\n    * 排序歌曲\n\n# 技术\n* 前端\n    * Javascript + CSS3 + HTML5\n    * Grunt 负责打包\n    * require.js 作模块管理\n    * Backbone.js 作为 MVC 框架(优点：轻量级，适合SPA，Oxygen 切歌需要相对多的 dom 操作)\n    * 暂定支持IE 9+, Chrome, Firefox, Opera, Edge\n* 后台\n    * Node.js\n    * hbs 模板引擎\n    * MongoDB 数据库\n    * express Web框架\n    * 腾讯云作为资源存放和服务器托管（下行1M，如果速度不满足，改用七牛云）\n\n# 样式\n* 参照一下 UI 设计图，并作修改\n> http://www.ui.cn/detail/9499.html\n\n* 播放器背景使用高斯模糊对相应歌曲图片处理\n* 使用 Font Awesome 字体图标\n","slug":"准备开始一个新的项目-Oxygen轻音乐","published":1,"updated":"2016-03-18T18:45:56.494Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqggs7mf0024ikvd6abwqbk5","content":"<blockquote>\n<p>今天顿生无聊，感觉陷入一个瓶颈，所以打算开一个新的项目——<code>Oxygen轻音乐</code>，比较简单的一个收藏自己喜欢的歌的网站，结合自己之前学过的东西进行整理，从中发现不足，进行下一步学习。同时也可以得到一些<code>Nope.js</code>的新函数的灵感，不废话，先进行一下需求分析和技术分析。</p>\n</blockquote>\n<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><ul>\n<li>前端<ul>\n<li>一个简单的播放器样式</li>\n<li>暂停/播放</li>\n<li>切歌</li>\n<li>音量调节</li>\n<li>循环播放</li>\n<li>歌词显示（动态 or 静态）</li>\n<li>歌曲列表的显示</li>\n<li>歌曲 &amp; 歌手信息</li>\n</ul>\n</li>\n<li>后台<ul>\n<li>需要有提供更新歌曲信息的页面</li>\n<li>新增歌曲</li>\n<li>删除歌曲</li>\n<li>排序歌曲</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h1><ul>\n<li>前端<ul>\n<li>Javascript + CSS3 + HTML5</li>\n<li>Grunt 负责打包</li>\n<li>require.js 作模块管理</li>\n<li>Backbone.js 作为 MVC 框架(优点：轻量级，适合SPA，Oxygen 切歌需要相对多的 dom 操作)</li>\n<li>暂定支持IE 9+, Chrome, Firefox, Opera, Edge</li>\n</ul>\n</li>\n<li>后台<ul>\n<li>Node.js</li>\n<li>hbs 模板引擎</li>\n<li>MongoDB 数据库</li>\n<li>express Web框架</li>\n<li>腾讯云作为资源存放和服务器托管（下行1M，如果速度不满足，改用七牛云）</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h1><ul>\n<li><p>参照一下 UI 设计图，并作修改</p>\n<blockquote>\n<p><a href=\"http://www.ui.cn/detail/9499.html\" target=\"_blank\" rel=\"external\">http://www.ui.cn/detail/9499.html</a></p>\n</blockquote>\n</li>\n<li><p>播放器背景使用高斯模糊对相应歌曲图片处理</p>\n</li>\n<li>使用 Font Awesome 字体图标</li>\n</ul>\n","excerpt":"","more":"<blockquote>\n<p>今天顿生无聊，感觉陷入一个瓶颈，所以打算开一个新的项目——<code>Oxygen轻音乐</code>，比较简单的一个收藏自己喜欢的歌的网站，结合自己之前学过的东西进行整理，从中发现不足，进行下一步学习。同时也可以得到一些<code>Nope.js</code>的新函数的灵感，不废话，先进行一下需求分析和技术分析。</p>\n</blockquote>\n<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><ul>\n<li>前端<ul>\n<li>一个简单的播放器样式</li>\n<li>暂停/播放</li>\n<li>切歌</li>\n<li>音量调节</li>\n<li>循环播放</li>\n<li>歌词显示（动态 or 静态）</li>\n<li>歌曲列表的显示</li>\n<li>歌曲 &amp; 歌手信息</li>\n</ul>\n</li>\n<li>后台<ul>\n<li>需要有提供更新歌曲信息的页面</li>\n<li>新增歌曲</li>\n<li>删除歌曲</li>\n<li>排序歌曲</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h1><ul>\n<li>前端<ul>\n<li>Javascript + CSS3 + HTML5</li>\n<li>Grunt 负责打包</li>\n<li>require.js 作模块管理</li>\n<li>Backbone.js 作为 MVC 框架(优点：轻量级，适合SPA，Oxygen 切歌需要相对多的 dom 操作)</li>\n<li>暂定支持IE 9+, Chrome, Firefox, Opera, Edge</li>\n</ul>\n</li>\n<li>后台<ul>\n<li>Node.js</li>\n<li>hbs 模板引擎</li>\n<li>MongoDB 数据库</li>\n<li>express Web框架</li>\n<li>腾讯云作为资源存放和服务器托管（下行1M，如果速度不满足，改用七牛云）</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h1><ul>\n<li><p>参照一下 UI 设计图，并作修改</p>\n<blockquote>\n<p><a href=\"http://www.ui.cn/detail/9499.html\">http://www.ui.cn/detail/9499.html</a></p>\n</blockquote>\n</li>\n<li><p>播放器背景使用高斯模糊对相应歌曲图片处理</p>\n</li>\n<li>使用 Font Awesome 字体图标</li>\n</ul>\n"},{"title":"webpack + Babel 使用 ES6 新特性","date":"2016-05-04T14:49:46.000Z","_content":"\n> webpack 是一个模块加载器兼打包工具，Babel 是一款转码编译器，可以很方便地将 ES6、ES7 等当前浏览器不兼容的 JavaScript 新特性转码为 ES5 等当前浏览器普遍兼容的代码。将两者结合起来可以很方便地在项目中一边使用 ES6 编写代码，一边自动生成 ES5 代码\n\n# webpack & Babel\n\n## 安装 webpack\n```bash\nnpm install webpack -g\n```\n或者\n```bash\nnpm init\nnpm install webpack --save-dev\n```\n\n## 安装 Babel 相关组件\n```bash\n# 安装加载器 babel-loader 和 Babel 的 API 代码 babel-core\nnpm install --save-dev babel-loader babel-core\n# 安装 ES2015（ES6）的代码，用于转码\nnpm install babel-preset-es2015 --save-dev\n# 用于转换一些 ES6 的新 API，如 Generator，Promise 等\nnpm install --save babel-polyfill\n```\n你可以在以下页面查看 JavaScript 的所需的转换代码模块进行按需安装\nhttp://babeljs.io/docs/plugins/preset-es2015/\n\n## 配置\n> 类似于 Grunt 和 Gulp，webpack 也有其特定地配置文件 `webpack.config.js`\n\n如下配置使用babel：\n```JavaScript\nmodule.exports = {\n    entry: [\n        \"babel-polyfill\",\n        \"./index.js\"\n    ],\n\n    output: {\n        path: __dirname + '/output/',\n        publicPath: \"/output/\",\n        filename: 'index.js'\n    },\n\n    module: {\n        loaders: [\n            {\n                test: /\\.jsx?$/,\n                exclude: /(node_modules|bower_components)/,\n                loader: 'babel-loader', // 'babel-loader' is also a legal name to reference\n                query: {\n                    presets: ['es2015']\n                }\n            }\n        ]\n    }\n};\n```\n* entry——用于设置 webpack 执行打包文件的入口，是一个数组\n* output——用于指定生成文件的路径以及文件名等\n    * path——指定生成文件路径\n    * publicPath——指定域名公共路径\n    * filename——指定生成文件的名称\n* module——主要用于配置 `loaders`\n    * loaders——用于配置对应后缀的文件使用何种加载器进行处理\n        * test——使用正则表达式来指定某种特定的文件类型\n        * exclude——排除某个文件夹下的文件进行处理\n        * loader——指定相应的加载器，多个加载器使用 `!` 进行连接，每个 loader 都可以省略其后缀，如 `babel-loader` 可以写成 `babel`\n        * query——指定加载器的配置信息，也可以使用 `?` 直接连接在 `loader` 后面\n\n以上只是涉及到我目前用到的一些配置信息的说明，更多的配置信息可以查阅官方文档，地址如下：\nhttps://webpack.github.io/docs/configuration.html\n\n## 开始\n在有 `webpack.config.js` 文件的目录下使用一下命令行：\n* `webpack`——直接启动 webpack，默认配置文件为 `webpack.config.js`\n* `webpack -w`——监测启动 webpack，实时打包更新文件\n* `webpack -p`——对打包后的文件进行压缩\n\n更多的命令可以查看官方文档下的说明，地址如下：\nhttp://webpack.github.io/docs/cli.html\n","source":"_posts/Webpack-Babel-使用-ES6-新特性.md","raw":"---\ntitle: webpack + Babel 使用 ES6 新特性\ndate: 2016-05-04 22:49:46\ncategories:\n    - 前端\n    - ECMAScript 6\ntags: Javascript\n---\n\n> webpack 是一个模块加载器兼打包工具，Babel 是一款转码编译器，可以很方便地将 ES6、ES7 等当前浏览器不兼容的 JavaScript 新特性转码为 ES5 等当前浏览器普遍兼容的代码。将两者结合起来可以很方便地在项目中一边使用 ES6 编写代码，一边自动生成 ES5 代码\n\n# webpack & Babel\n\n## 安装 webpack\n```bash\nnpm install webpack -g\n```\n或者\n```bash\nnpm init\nnpm install webpack --save-dev\n```\n\n## 安装 Babel 相关组件\n```bash\n# 安装加载器 babel-loader 和 Babel 的 API 代码 babel-core\nnpm install --save-dev babel-loader babel-core\n# 安装 ES2015（ES6）的代码，用于转码\nnpm install babel-preset-es2015 --save-dev\n# 用于转换一些 ES6 的新 API，如 Generator，Promise 等\nnpm install --save babel-polyfill\n```\n你可以在以下页面查看 JavaScript 的所需的转换代码模块进行按需安装\nhttp://babeljs.io/docs/plugins/preset-es2015/\n\n## 配置\n> 类似于 Grunt 和 Gulp，webpack 也有其特定地配置文件 `webpack.config.js`\n\n如下配置使用babel：\n```JavaScript\nmodule.exports = {\n    entry: [\n        \"babel-polyfill\",\n        \"./index.js\"\n    ],\n\n    output: {\n        path: __dirname + '/output/',\n        publicPath: \"/output/\",\n        filename: 'index.js'\n    },\n\n    module: {\n        loaders: [\n            {\n                test: /\\.jsx?$/,\n                exclude: /(node_modules|bower_components)/,\n                loader: 'babel-loader', // 'babel-loader' is also a legal name to reference\n                query: {\n                    presets: ['es2015']\n                }\n            }\n        ]\n    }\n};\n```\n* entry——用于设置 webpack 执行打包文件的入口，是一个数组\n* output——用于指定生成文件的路径以及文件名等\n    * path——指定生成文件路径\n    * publicPath——指定域名公共路径\n    * filename——指定生成文件的名称\n* module——主要用于配置 `loaders`\n    * loaders——用于配置对应后缀的文件使用何种加载器进行处理\n        * test——使用正则表达式来指定某种特定的文件类型\n        * exclude——排除某个文件夹下的文件进行处理\n        * loader——指定相应的加载器，多个加载器使用 `!` 进行连接，每个 loader 都可以省略其后缀，如 `babel-loader` 可以写成 `babel`\n        * query——指定加载器的配置信息，也可以使用 `?` 直接连接在 `loader` 后面\n\n以上只是涉及到我目前用到的一些配置信息的说明，更多的配置信息可以查阅官方文档，地址如下：\nhttps://webpack.github.io/docs/configuration.html\n\n## 开始\n在有 `webpack.config.js` 文件的目录下使用一下命令行：\n* `webpack`——直接启动 webpack，默认配置文件为 `webpack.config.js`\n* `webpack -w`——监测启动 webpack，实时打包更新文件\n* `webpack -p`——对打包后的文件进行压缩\n\n更多的命令可以查看官方文档下的说明，地址如下：\nhttp://webpack.github.io/docs/cli.html\n","slug":"Webpack-Babel-使用-ES6-新特性","published":1,"updated":"2016-05-06T09:03:41.034Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqggs7mv0029ikvd17cz6nyg","content":"<blockquote>\n<p>webpack 是一个模块加载器兼打包工具，Babel 是一款转码编译器，可以很方便地将 ES6、ES7 等当前浏览器不兼容的 JavaScript 新特性转码为 ES5 等当前浏览器普遍兼容的代码。将两者结合起来可以很方便地在项目中一边使用 ES6 编写代码，一边自动生成 ES5 代码</p>\n</blockquote>\n<h1 id=\"webpack-amp-Babel\"><a href=\"#webpack-amp-Babel\" class=\"headerlink\" title=\"webpack &amp; Babel\"></a>webpack &amp; Babel</h1><h2 id=\"安装-webpack\"><a href=\"#安装-webpack\" class=\"headerlink\" title=\"安装 webpack\"></a>安装 webpack</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack -g</span><br></pre></td></tr></table></figure>\n<p>或者<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br><span class=\"line\">npm install webpack --save-dev</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装-Babel-相关组件\"><a href=\"#安装-Babel-相关组件\" class=\"headerlink\" title=\"安装 Babel 相关组件\"></a>安装 Babel 相关组件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装加载器 babel-loader 和 Babel 的 API 代码 babel-core</span></span><br><span class=\"line\">npm install --save-dev babel-loader babel-core</span><br><span class=\"line\"><span class=\"comment\"># 安装 ES2015（ES6）的代码，用于转码</span></span><br><span class=\"line\">npm install babel-preset-es2015 --save-dev</span><br><span class=\"line\"><span class=\"comment\"># 用于转换一些 ES6 的新 API，如 Generator，Promise 等</span></span><br><span class=\"line\">npm install --save babel-polyfill</span><br></pre></td></tr></table></figure>\n<p>你可以在以下页面查看 JavaScript 的所需的转换代码模块进行按需安装<br><a href=\"http://babeljs.io/docs/plugins/preset-es2015/\" target=\"_blank\" rel=\"external\">http://babeljs.io/docs/plugins/preset-es2015/</a></p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><blockquote>\n<p>类似于 Grunt 和 Gulp，webpack 也有其特定地配置文件 <code>webpack.config.js</code></p>\n</blockquote>\n<p>如下配置使用babel：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: [</span><br><span class=\"line\">        <span class=\"string\">\"babel-polyfill\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"./index.js\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: __dirname + <span class=\"string\">'/output/'</span>,</span><br><span class=\"line\">        publicPath: <span class=\"string\">\"/output/\"</span>,</span><br><span class=\"line\">        filename: <span class=\"string\">'index.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.jsx?$/</span>,</span><br><span class=\"line\">                exclude: <span class=\"regexp\">/(node_modules|bower_components)/</span>,</span><br><span class=\"line\">                loader: <span class=\"string\">'babel-loader'</span>, <span class=\"comment\">// 'babel-loader' is also a legal name to reference</span></span><br><span class=\"line\">                query: &#123;</span><br><span class=\"line\">                    presets: [<span class=\"string\">'es2015'</span>]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>entry——用于设置 webpack 执行打包文件的入口，是一个数组</li>\n<li>output——用于指定生成文件的路径以及文件名等<ul>\n<li>path——指定生成文件路径</li>\n<li>publicPath——指定域名公共路径</li>\n<li>filename——指定生成文件的名称</li>\n</ul>\n</li>\n<li>module——主要用于配置 <code>loaders</code><ul>\n<li>loaders——用于配置对应后缀的文件使用何种加载器进行处理<ul>\n<li>test——使用正则表达式来指定某种特定的文件类型</li>\n<li>exclude——排除某个文件夹下的文件进行处理</li>\n<li>loader——指定相应的加载器，多个加载器使用 <code>!</code> 进行连接，每个 loader 都可以省略其后缀，如 <code>babel-loader</code> 可以写成 <code>babel</code></li>\n<li>query——指定加载器的配置信息，也可以使用 <code>?</code> 直接连接在 <code>loader</code> 后面</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>以上只是涉及到我目前用到的一些配置信息的说明，更多的配置信息可以查阅官方文档，地址如下：<br><a href=\"https://webpack.github.io/docs/configuration.html\" target=\"_blank\" rel=\"external\">https://webpack.github.io/docs/configuration.html</a></p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>在有 <code>webpack.config.js</code> 文件的目录下使用一下命令行：</p>\n<ul>\n<li><code>webpack</code>——直接启动 webpack，默认配置文件为 <code>webpack.config.js</code></li>\n<li><code>webpack -w</code>——监测启动 webpack，实时打包更新文件</li>\n<li><code>webpack -p</code>——对打包后的文件进行压缩</li>\n</ul>\n<p>更多的命令可以查看官方文档下的说明，地址如下：<br><a href=\"http://webpack.github.io/docs/cli.html\" target=\"_blank\" rel=\"external\">http://webpack.github.io/docs/cli.html</a></p>\n","excerpt":"","more":"<blockquote>\n<p>webpack 是一个模块加载器兼打包工具，Babel 是一款转码编译器，可以很方便地将 ES6、ES7 等当前浏览器不兼容的 JavaScript 新特性转码为 ES5 等当前浏览器普遍兼容的代码。将两者结合起来可以很方便地在项目中一边使用 ES6 编写代码，一边自动生成 ES5 代码</p>\n</blockquote>\n<h1 id=\"webpack-amp-Babel\"><a href=\"#webpack-amp-Babel\" class=\"headerlink\" title=\"webpack &amp; Babel\"></a>webpack &amp; Babel</h1><h2 id=\"安装-webpack\"><a href=\"#安装-webpack\" class=\"headerlink\" title=\"安装 webpack\"></a>安装 webpack</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack -g</span><br></pre></td></tr></table></figure>\n<p>或者<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br><span class=\"line\">npm install webpack --save-dev</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装-Babel-相关组件\"><a href=\"#安装-Babel-相关组件\" class=\"headerlink\" title=\"安装 Babel 相关组件\"></a>安装 Babel 相关组件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装加载器 babel-loader 和 Babel 的 API 代码 babel-core</span></span><br><span class=\"line\">npm install --save-dev babel-loader babel-core</span><br><span class=\"line\"><span class=\"comment\"># 安装 ES2015（ES6）的代码，用于转码</span></span><br><span class=\"line\">npm install babel-preset-es2015 --save-dev</span><br><span class=\"line\"><span class=\"comment\"># 用于转换一些 ES6 的新 API，如 Generator，Promise 等</span></span><br><span class=\"line\">npm install --save babel-polyfill</span><br></pre></td></tr></table></figure>\n<p>你可以在以下页面查看 JavaScript 的所需的转换代码模块进行按需安装<br><a href=\"http://babeljs.io/docs/plugins/preset-es2015/\">http://babeljs.io/docs/plugins/preset-es2015/</a></p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><blockquote>\n<p>类似于 Grunt 和 Gulp，webpack 也有其特定地配置文件 <code>webpack.config.js</code></p>\n</blockquote>\n<p>如下配置使用babel：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: [</span><br><span class=\"line\">        <span class=\"string\">\"babel-polyfill\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"./index.js\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: __dirname + <span class=\"string\">'/output/'</span>,</span><br><span class=\"line\">        publicPath: <span class=\"string\">\"/output/\"</span>,</span><br><span class=\"line\">        filename: <span class=\"string\">'index.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.jsx?$/</span>,</span><br><span class=\"line\">                exclude: <span class=\"regexp\">/(node_modules|bower_components)/</span>,</span><br><span class=\"line\">                loader: <span class=\"string\">'babel-loader'</span>, <span class=\"comment\">// 'babel-loader' is also a legal name to reference</span></span><br><span class=\"line\">                query: &#123;</span><br><span class=\"line\">                    presets: [<span class=\"string\">'es2015'</span>]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>entry——用于设置 webpack 执行打包文件的入口，是一个数组</li>\n<li>output——用于指定生成文件的路径以及文件名等<ul>\n<li>path——指定生成文件路径</li>\n<li>publicPath——指定域名公共路径</li>\n<li>filename——指定生成文件的名称</li>\n</ul>\n</li>\n<li>module——主要用于配置 <code>loaders</code><ul>\n<li>loaders——用于配置对应后缀的文件使用何种加载器进行处理<ul>\n<li>test——使用正则表达式来指定某种特定的文件类型</li>\n<li>exclude——排除某个文件夹下的文件进行处理</li>\n<li>loader——指定相应的加载器，多个加载器使用 <code>!</code> 进行连接，每个 loader 都可以省略其后缀，如 <code>babel-loader</code> 可以写成 <code>babel</code></li>\n<li>query——指定加载器的配置信息，也可以使用 <code>?</code> 直接连接在 <code>loader</code> 后面</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>以上只是涉及到我目前用到的一些配置信息的说明，更多的配置信息可以查阅官方文档，地址如下：<br><a href=\"https://webpack.github.io/docs/configuration.html\">https://webpack.github.io/docs/configuration.html</a></p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>在有 <code>webpack.config.js</code> 文件的目录下使用一下命令行：</p>\n<ul>\n<li><code>webpack</code>——直接启动 webpack，默认配置文件为 <code>webpack.config.js</code></li>\n<li><code>webpack -w</code>——监测启动 webpack，实时打包更新文件</li>\n<li><code>webpack -p</code>——对打包后的文件进行压缩</li>\n</ul>\n<p>更多的命令可以查看官方文档下的说明，地址如下：<br><a href=\"http://webpack.github.io/docs/cli.html\">http://webpack.github.io/docs/cli.html</a></p>\n"},{"title":"双飞翼布局和圣杯布局","date":"2016-03-17T17:32:16.000Z","_content":"双飞翼布局源自淘宝UED，圣杯布局来自2006年 Matthew Levine 的一篇文章，目的都是为了实现三列布局（中间列自适应宽度，两边分别固定宽度），并且中间列优先加载。两种布局的原理可以应用到两列布局中。\n\n开始之前说一个翻译问题，圣杯布局作者提到发明圣杯布局前的其中一个需求：`allow any column to be the tallest`\n这里应该翻译为：允许任意列高度是最高的，而不是“允许任意列（在 HTML 中位置）在最高”。\n\n### 相同点：\n* 都让三列布局左浮动\n* 实现三列布局\n* 中间列优先加载\n* 左右两列顺序不影响布局\n\n### 异同点：\n* 圣杯布局利用布局父元素 container 左右 padding 出边距给予左右两列的空间放置，左右两列则通过 position 和margin 负边距插入到自身的位置。\n* 双飞翼布局直接在 container 加入一个 div 包裹住中间列，同时该 div 浮动，而被包裹住的中间列则 margin 左右为左右两列布局留出空白，这样做省了多个 CSS 属性（position，左右两列的 margin 负边距，container 的 padding 属性，左右两列的 left 或 right 属性），但是双飞翼则多了一个 div 标签。\n* 圣杯布局在 IE 6/7 下需要加入 hack 解决一个布局问题，双飞翼布局则不用。\n\n在我看来我更喜欢双飞翼布局，用一个 div 标签换来减少多个属性和一个 hack 属性（在 IE 6/7 下圣杯布局需要加入 hack，但是如果 container 触发了 BFC 则该 hack 不用加入，例如 container 使用了 clearfix 或 overflow: hidden）。圣杯布局下需要加入的 hack 是左边的列的 left 属性必须是右边列的宽度的值，在正常浏览器布局下 left 属性的值则是自身的宽度的负值，这里提一个现象，在实现圣杯布局的时候我使用了 clearfix 闭合浮动而不是圣杯布局来源文章中的使用 footer 来清除浮动，导致在 IE 6/7 下会出现的异常布局消失了，我估计是触发了 BFC 的原因（我把 clearfix 去掉后使用了 overflow: hidden 出现同样的效果）。\n\n## 1.双飞翼布局\n\n演示地址：http://www.libinhong.com/demo/Flying\n\n### CSS：\n```css\nbody {\n    margin: 0;\n    padding: 0;\n    text-align: center;\n    font-family: Microsoft YaHei;\n}\n\n.fl {\n    float: left;\n    height: 300px;\n}\n\n.container-center {\n    width: 100%;\n}\n\n.container-center .center {\n    margin: 0 200px;\n    height: 100%;\n    background-color: rgb(143, 221, 172);\n}\n\n.container .left {\n    width: 200px;\n    margin-left: -100%;\n    background: rgb(205, 228, 128);\n}\n\n.container .right {\n    width: 200px;\n    margin-left: -200px;\n    background-color: rgb(94, 152, 185);\n}\n\n.clearfix:before, .clearfix:after {\n    content: \"\";\n    display: table;\n}\n.clearfix:after {\n    clear: both;\n}\n.clearfix {\n    *zoom: 1;\n}\n```\n\n### HTML：\n```html\n<div class=\"container clearfix\">\n    <div class=\"container-center fl\">\n        <div class=\"center\">中间自适应</div>\n    </div>\n    <div class=\"left fl\">左边固定200px</div>\n    <div class=\"right fl\">右边固定200px</div>\n</div>\n```\n\n## 2.圣杯布局\n\n演示地址：http://www.libinhong.com/demo/HolyGrails\n\n### CSS：\n```css\nbody {\n    margin: 0;\n    padding: 0;\n    text-align: center;\n    font-family: Microsoft YaHei;\n}\n\n.fl {\n    float: left;\n    height: 300px;\n    position: relative;\n}\n\n.container {\n    padding: 0 200px 0 150px;\n}\n\n.container .center {\n    width: 100%;\n    background-color: rgb(166, 212, 121);\n}\n.container .left {\n    width: 150px;\n    margin-left: -100%;\n    left: -150px;\n    /**left: 200px;*/  /** for IE6/7*/*/\n    background-color: rgb(136, 204, 194);\n}\n\n.container .right {\n    width: 200px;\n    margin-right: -200px;\n    background-color: rgb(228, 215, 92);\n}\n\n.clearfix:before, .clearfix:after {\n    content: \"\";\n    display: table;\n}\n.clearfix:after {\n    clear: both;\n}\n.clearfix {\n    *zoom: 1;\n}\n```\n\n### HTML：\n```html\n<div class=\"container clearfix\">\n    <div class=\"center fl\">中间自适应</div>\n    <div class=\"left fl\">左边固定150px</div>\n    <div class=\"right fl\">右边固定200px</div>\n</div>\n```\n## 演示效果：\n![演示效果](http://7xoehm.com1.z0.glb.clouddn.com/githubclipboard.png)\n","source":"_posts/双飞翼布局和圣杯布局.md","raw":"---\ntitle: 双飞翼布局和圣杯布局\ndate: 2016-03-18 01:32:16\ncategories: 前端\ntags: 布局\n---\n双飞翼布局源自淘宝UED，圣杯布局来自2006年 Matthew Levine 的一篇文章，目的都是为了实现三列布局（中间列自适应宽度，两边分别固定宽度），并且中间列优先加载。两种布局的原理可以应用到两列布局中。\n\n开始之前说一个翻译问题，圣杯布局作者提到发明圣杯布局前的其中一个需求：`allow any column to be the tallest`\n这里应该翻译为：允许任意列高度是最高的，而不是“允许任意列（在 HTML 中位置）在最高”。\n\n### 相同点：\n* 都让三列布局左浮动\n* 实现三列布局\n* 中间列优先加载\n* 左右两列顺序不影响布局\n\n### 异同点：\n* 圣杯布局利用布局父元素 container 左右 padding 出边距给予左右两列的空间放置，左右两列则通过 position 和margin 负边距插入到自身的位置。\n* 双飞翼布局直接在 container 加入一个 div 包裹住中间列，同时该 div 浮动，而被包裹住的中间列则 margin 左右为左右两列布局留出空白，这样做省了多个 CSS 属性（position，左右两列的 margin 负边距，container 的 padding 属性，左右两列的 left 或 right 属性），但是双飞翼则多了一个 div 标签。\n* 圣杯布局在 IE 6/7 下需要加入 hack 解决一个布局问题，双飞翼布局则不用。\n\n在我看来我更喜欢双飞翼布局，用一个 div 标签换来减少多个属性和一个 hack 属性（在 IE 6/7 下圣杯布局需要加入 hack，但是如果 container 触发了 BFC 则该 hack 不用加入，例如 container 使用了 clearfix 或 overflow: hidden）。圣杯布局下需要加入的 hack 是左边的列的 left 属性必须是右边列的宽度的值，在正常浏览器布局下 left 属性的值则是自身的宽度的负值，这里提一个现象，在实现圣杯布局的时候我使用了 clearfix 闭合浮动而不是圣杯布局来源文章中的使用 footer 来清除浮动，导致在 IE 6/7 下会出现的异常布局消失了，我估计是触发了 BFC 的原因（我把 clearfix 去掉后使用了 overflow: hidden 出现同样的效果）。\n\n## 1.双飞翼布局\n\n演示地址：http://www.libinhong.com/demo/Flying\n\n### CSS：\n```css\nbody {\n    margin: 0;\n    padding: 0;\n    text-align: center;\n    font-family: Microsoft YaHei;\n}\n\n.fl {\n    float: left;\n    height: 300px;\n}\n\n.container-center {\n    width: 100%;\n}\n\n.container-center .center {\n    margin: 0 200px;\n    height: 100%;\n    background-color: rgb(143, 221, 172);\n}\n\n.container .left {\n    width: 200px;\n    margin-left: -100%;\n    background: rgb(205, 228, 128);\n}\n\n.container .right {\n    width: 200px;\n    margin-left: -200px;\n    background-color: rgb(94, 152, 185);\n}\n\n.clearfix:before, .clearfix:after {\n    content: \"\";\n    display: table;\n}\n.clearfix:after {\n    clear: both;\n}\n.clearfix {\n    *zoom: 1;\n}\n```\n\n### HTML：\n```html\n<div class=\"container clearfix\">\n    <div class=\"container-center fl\">\n        <div class=\"center\">中间自适应</div>\n    </div>\n    <div class=\"left fl\">左边固定200px</div>\n    <div class=\"right fl\">右边固定200px</div>\n</div>\n```\n\n## 2.圣杯布局\n\n演示地址：http://www.libinhong.com/demo/HolyGrails\n\n### CSS：\n```css\nbody {\n    margin: 0;\n    padding: 0;\n    text-align: center;\n    font-family: Microsoft YaHei;\n}\n\n.fl {\n    float: left;\n    height: 300px;\n    position: relative;\n}\n\n.container {\n    padding: 0 200px 0 150px;\n}\n\n.container .center {\n    width: 100%;\n    background-color: rgb(166, 212, 121);\n}\n.container .left {\n    width: 150px;\n    margin-left: -100%;\n    left: -150px;\n    /**left: 200px;*/  /** for IE6/7*/*/\n    background-color: rgb(136, 204, 194);\n}\n\n.container .right {\n    width: 200px;\n    margin-right: -200px;\n    background-color: rgb(228, 215, 92);\n}\n\n.clearfix:before, .clearfix:after {\n    content: \"\";\n    display: table;\n}\n.clearfix:after {\n    clear: both;\n}\n.clearfix {\n    *zoom: 1;\n}\n```\n\n### HTML：\n```html\n<div class=\"container clearfix\">\n    <div class=\"center fl\">中间自适应</div>\n    <div class=\"left fl\">左边固定150px</div>\n    <div class=\"right fl\">右边固定200px</div>\n</div>\n```\n## 演示效果：\n![演示效果](http://7xoehm.com1.z0.glb.clouddn.com/githubclipboard.png)\n","slug":"双飞翼布局和圣杯布局","published":1,"updated":"2016-03-18T07:44:05.433Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqggs7mv002cikvd9j5buuci","content":"<p>双飞翼布局源自淘宝UED，圣杯布局来自2006年 Matthew Levine 的一篇文章，目的都是为了实现三列布局（中间列自适应宽度，两边分别固定宽度），并且中间列优先加载。两种布局的原理可以应用到两列布局中。</p>\n<p>开始之前说一个翻译问题，圣杯布局作者提到发明圣杯布局前的其中一个需求：<code>allow any column to be the tallest</code><br>这里应该翻译为：允许任意列高度是最高的，而不是“允许任意列（在 HTML 中位置）在最高”。</p>\n<h3 id=\"相同点：\"><a href=\"#相同点：\" class=\"headerlink\" title=\"相同点：\"></a>相同点：</h3><ul>\n<li>都让三列布局左浮动</li>\n<li>实现三列布局</li>\n<li>中间列优先加载</li>\n<li>左右两列顺序不影响布局</li>\n</ul>\n<h3 id=\"异同点：\"><a href=\"#异同点：\" class=\"headerlink\" title=\"异同点：\"></a>异同点：</h3><ul>\n<li>圣杯布局利用布局父元素 container 左右 padding 出边距给予左右两列的空间放置，左右两列则通过 position 和margin 负边距插入到自身的位置。</li>\n<li>双飞翼布局直接在 container 加入一个 div 包裹住中间列，同时该 div 浮动，而被包裹住的中间列则 margin 左右为左右两列布局留出空白，这样做省了多个 CSS 属性（position，左右两列的 margin 负边距，container 的 padding 属性，左右两列的 left 或 right 属性），但是双飞翼则多了一个 div 标签。</li>\n<li>圣杯布局在 IE 6/7 下需要加入 hack 解决一个布局问题，双飞翼布局则不用。</li>\n</ul>\n<p>在我看来我更喜欢双飞翼布局，用一个 div 标签换来减少多个属性和一个 hack 属性（在 IE 6/7 下圣杯布局需要加入 hack，但是如果 container 触发了 BFC 则该 hack 不用加入，例如 container 使用了 clearfix 或 overflow: hidden）。圣杯布局下需要加入的 hack 是左边的列的 left 属性必须是右边列的宽度的值，在正常浏览器布局下 left 属性的值则是自身的宽度的负值，这里提一个现象，在实现圣杯布局的时候我使用了 clearfix 闭合浮动而不是圣杯布局来源文章中的使用 footer 来清除浮动，导致在 IE 6/7 下会出现的异常布局消失了，我估计是触发了 BFC 的原因（我把 clearfix 去掉后使用了 overflow: hidden 出现同样的效果）。</p>\n<h2 id=\"1-双飞翼布局\"><a href=\"#1-双飞翼布局\" class=\"headerlink\" title=\"1.双飞翼布局\"></a>1.双飞翼布局</h2><p>演示地址：<a href=\"http://www.libinhong.com/demo/Flying\" target=\"_blank\" rel=\"external\">http://www.libinhong.com/demo/Flying</a></p>\n<h3 id=\"CSS：\"><a href=\"#CSS：\" class=\"headerlink\" title=\"CSS：\"></a>CSS：</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body &#123;</span><br><span class=\"line\">    margin: 0;</span><br><span class=\"line\">    padding: 0;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    font-family: Microsoft YaHei;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.fl &#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    height: 300px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.container-center &#123;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.container-center .center &#123;</span><br><span class=\"line\">    margin: 0 200px;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">    background-color: rgb(143, 221, 172);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.container .left &#123;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    margin-left: -100%;</span><br><span class=\"line\">    background: rgb(205, 228, 128);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.container .right &#123;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    margin-left: -200px;</span><br><span class=\"line\">    background-color: rgb(94, 152, 185);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.clearfix:before, .clearfix:after &#123;</span><br><span class=\"line\">    content: \"\";</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.clearfix:after &#123;</span><br><span class=\"line\">    clear: both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.clearfix &#123;</span><br><span class=\"line\">    *zoom: 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"HTML：\"><a href=\"#HTML：\" class=\"headerlink\" title=\"HTML：\"></a>HTML：</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container clearfix\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container-center fl\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"center\"</span>&gt;</span>中间自适应<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left fl\"</span>&gt;</span>左边固定200px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right fl\"</span>&gt;</span>右边固定200px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-圣杯布局\"><a href=\"#2-圣杯布局\" class=\"headerlink\" title=\"2.圣杯布局\"></a>2.圣杯布局</h2><p>演示地址：<a href=\"http://www.libinhong.com/demo/HolyGrails\" target=\"_blank\" rel=\"external\">http://www.libinhong.com/demo/HolyGrails</a></p>\n<h3 id=\"CSS：-1\"><a href=\"#CSS：-1\" class=\"headerlink\" title=\"CSS：\"></a>CSS：</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body &#123;</span><br><span class=\"line\">    margin: 0;</span><br><span class=\"line\">    padding: 0;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    font-family: Microsoft YaHei;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.fl &#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    height: 300px;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.container &#123;</span><br><span class=\"line\">    padding: 0 200px 0 150px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.container .center &#123;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    background-color: rgb(166, 212, 121);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.container .left &#123;</span><br><span class=\"line\">    width: 150px;</span><br><span class=\"line\">    margin-left: -100%;</span><br><span class=\"line\">    left: -150px;</span><br><span class=\"line\">    /**left: 200px;*/  /** for IE6/7*/*/</span><br><span class=\"line\">    background-color: rgb(136, 204, 194);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.container .right &#123;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    margin-right: -200px;</span><br><span class=\"line\">    background-color: rgb(228, 215, 92);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.clearfix:before, .clearfix:after &#123;</span><br><span class=\"line\">    content: \"\";</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.clearfix:after &#123;</span><br><span class=\"line\">    clear: both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.clearfix &#123;</span><br><span class=\"line\">    *zoom: 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"HTML：-1\"><a href=\"#HTML：-1\" class=\"headerlink\" title=\"HTML：\"></a>HTML：</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container clearfix\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"center fl\"</span>&gt;</span>中间自适应<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left fl\"</span>&gt;</span>左边固定150px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right fl\"</span>&gt;</span>右边固定200px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"演示效果：\"><a href=\"#演示效果：\" class=\"headerlink\" title=\"演示效果：\"></a>演示效果：</h2><p><img src=\"http://7xoehm.com1.z0.glb.clouddn.com/githubclipboard.png\" alt=\"演示效果\"></p>\n","excerpt":"","more":"<p>双飞翼布局源自淘宝UED，圣杯布局来自2006年 Matthew Levine 的一篇文章，目的都是为了实现三列布局（中间列自适应宽度，两边分别固定宽度），并且中间列优先加载。两种布局的原理可以应用到两列布局中。</p>\n<p>开始之前说一个翻译问题，圣杯布局作者提到发明圣杯布局前的其中一个需求：<code>allow any column to be the tallest</code><br>这里应该翻译为：允许任意列高度是最高的，而不是“允许任意列（在 HTML 中位置）在最高”。</p>\n<h3 id=\"相同点：\"><a href=\"#相同点：\" class=\"headerlink\" title=\"相同点：\"></a>相同点：</h3><ul>\n<li>都让三列布局左浮动</li>\n<li>实现三列布局</li>\n<li>中间列优先加载</li>\n<li>左右两列顺序不影响布局</li>\n</ul>\n<h3 id=\"异同点：\"><a href=\"#异同点：\" class=\"headerlink\" title=\"异同点：\"></a>异同点：</h3><ul>\n<li>圣杯布局利用布局父元素 container 左右 padding 出边距给予左右两列的空间放置，左右两列则通过 position 和margin 负边距插入到自身的位置。</li>\n<li>双飞翼布局直接在 container 加入一个 div 包裹住中间列，同时该 div 浮动，而被包裹住的中间列则 margin 左右为左右两列布局留出空白，这样做省了多个 CSS 属性（position，左右两列的 margin 负边距，container 的 padding 属性，左右两列的 left 或 right 属性），但是双飞翼则多了一个 div 标签。</li>\n<li>圣杯布局在 IE 6/7 下需要加入 hack 解决一个布局问题，双飞翼布局则不用。</li>\n</ul>\n<p>在我看来我更喜欢双飞翼布局，用一个 div 标签换来减少多个属性和一个 hack 属性（在 IE 6/7 下圣杯布局需要加入 hack，但是如果 container 触发了 BFC 则该 hack 不用加入，例如 container 使用了 clearfix 或 overflow: hidden）。圣杯布局下需要加入的 hack 是左边的列的 left 属性必须是右边列的宽度的值，在正常浏览器布局下 left 属性的值则是自身的宽度的负值，这里提一个现象，在实现圣杯布局的时候我使用了 clearfix 闭合浮动而不是圣杯布局来源文章中的使用 footer 来清除浮动，导致在 IE 6/7 下会出现的异常布局消失了，我估计是触发了 BFC 的原因（我把 clearfix 去掉后使用了 overflow: hidden 出现同样的效果）。</p>\n<h2 id=\"1-双飞翼布局\"><a href=\"#1-双飞翼布局\" class=\"headerlink\" title=\"1.双飞翼布局\"></a>1.双飞翼布局</h2><p>演示地址：<a href=\"http://www.libinhong.com/demo/Flying\">http://www.libinhong.com/demo/Flying</a></p>\n<h3 id=\"CSS：\"><a href=\"#CSS：\" class=\"headerlink\" title=\"CSS：\"></a>CSS：</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body &#123;</span><br><span class=\"line\">    margin: 0;</span><br><span class=\"line\">    padding: 0;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    font-family: Microsoft YaHei;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.fl &#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    height: 300px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.container-center &#123;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.container-center .center &#123;</span><br><span class=\"line\">    margin: 0 200px;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">    background-color: rgb(143, 221, 172);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.container .left &#123;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    margin-left: -100%;</span><br><span class=\"line\">    background: rgb(205, 228, 128);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.container .right &#123;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    margin-left: -200px;</span><br><span class=\"line\">    background-color: rgb(94, 152, 185);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.clearfix:before, .clearfix:after &#123;</span><br><span class=\"line\">    content: \"\";</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.clearfix:after &#123;</span><br><span class=\"line\">    clear: both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.clearfix &#123;</span><br><span class=\"line\">    *zoom: 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"HTML：\"><a href=\"#HTML：\" class=\"headerlink\" title=\"HTML：\"></a>HTML：</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container clearfix\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container-center fl\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"center\"</span>&gt;</span>中间自适应<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left fl\"</span>&gt;</span>左边固定200px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right fl\"</span>&gt;</span>右边固定200px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-圣杯布局\"><a href=\"#2-圣杯布局\" class=\"headerlink\" title=\"2.圣杯布局\"></a>2.圣杯布局</h2><p>演示地址：<a href=\"http://www.libinhong.com/demo/HolyGrails\">http://www.libinhong.com/demo/HolyGrails</a></p>\n<h3 id=\"CSS：-1\"><a href=\"#CSS：-1\" class=\"headerlink\" title=\"CSS：\"></a>CSS：</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body &#123;</span><br><span class=\"line\">    margin: 0;</span><br><span class=\"line\">    padding: 0;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    font-family: Microsoft YaHei;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.fl &#123;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">    height: 300px;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.container &#123;</span><br><span class=\"line\">    padding: 0 200px 0 150px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.container .center &#123;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    background-color: rgb(166, 212, 121);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.container .left &#123;</span><br><span class=\"line\">    width: 150px;</span><br><span class=\"line\">    margin-left: -100%;</span><br><span class=\"line\">    left: -150px;</span><br><span class=\"line\">    /**left: 200px;*/  /** for IE6/7*/*/</span><br><span class=\"line\">    background-color: rgb(136, 204, 194);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.container .right &#123;</span><br><span class=\"line\">    width: 200px;</span><br><span class=\"line\">    margin-right: -200px;</span><br><span class=\"line\">    background-color: rgb(228, 215, 92);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.clearfix:before, .clearfix:after &#123;</span><br><span class=\"line\">    content: \"\";</span><br><span class=\"line\">    display: table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.clearfix:after &#123;</span><br><span class=\"line\">    clear: both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.clearfix &#123;</span><br><span class=\"line\">    *zoom: 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"HTML：-1\"><a href=\"#HTML：-1\" class=\"headerlink\" title=\"HTML：\"></a>HTML：</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container clearfix\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"center fl\"</span>&gt;</span>中间自适应<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left fl\"</span>&gt;</span>左边固定150px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right fl\"</span>&gt;</span>右边固定200px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"演示效果：\"><a href=\"#演示效果：\" class=\"headerlink\" title=\"演示效果：\"></a>演示效果：</h2><p><img src=\"http://7xoehm.com1.z0.glb.clouddn.com/githubclipboard.png\" alt=\"演示效果\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ciqggs7ft0005ikvd43ccqm05","category_id":"ciqggs7fe0003ikvdffso7r4g","_id":"ciqggs7ft000aikvd6fsxo4w6"},{"post_id":"ciqggs7fe0000ikvdu74o23gm","category_id":"ciqggs7fe0003ikvdffso7r4g","_id":"ciqggs7ft000dikvdtj9obaqq"},{"post_id":"ciqggs7fe0001ikvdsqgtbyl0","category_id":"ciqggs7ft0007ikvdxeu833hw","_id":"ciqggs7ft000fikvdmlc37b9j"},{"post_id":"ciqggs7ft0004ikvd3rrage0k","category_id":"ciqggs7fe0003ikvdffso7r4g","_id":"ciqggs7ft000hikvd2b70cxr2"},{"post_id":"ciqggs7jn000kikvduosv4iif","category_id":"ciqggs7fe0003ikvdffso7r4g","_id":"ciqggs7k2000sikvdepm5x413"},{"post_id":"ciqggs7k2000qikvdv91rrf3l","category_id":"ciqggs7ft0007ikvdxeu833hw","_id":"ciqggs7ki000zikvdy6q6zrpr"},{"post_id":"ciqggs7k2000qikvdv91rrf3l","category_id":"ciqggs7k2000oikvdjplx0p1j","_id":"ciqggs7ld0012ikvdkkahsf3y"},{"post_id":"ciqggs7jn000iikvd9xlo0rbz","category_id":"ciqggs7ft0007ikvdxeu833hw","_id":"ciqggs7ld0015ikvd08okurwp"},{"post_id":"ciqggs7jn000iikvd9xlo0rbz","category_id":"ciqggs7k2000oikvdjplx0p1j","_id":"ciqggs7ld0018ikvdjl0g501p"},{"post_id":"ciqggs7ki000tikvdjw9hof02","category_id":"ciqggs7ft0007ikvdxeu833hw","_id":"ciqggs7lt001bikvdqytd18qy"},{"post_id":"ciqggs7ki000tikvdjw9hof02","category_id":"ciqggs7k2000oikvdjplx0p1j","_id":"ciqggs7lt001eikvd9mvors7s"},{"post_id":"ciqggs7ki000wikvdoseocje2","category_id":"ciqggs7ft0007ikvdxeu833hw","_id":"ciqggs7lt001iikvdt8pwh5ka"},{"post_id":"ciqggs7ki000wikvdoseocje2","category_id":"ciqggs7k2000oikvdjplx0p1j","_id":"ciqggs7lt001likvdtw99xfek"},{"post_id":"ciqggs7k2000nikvdax994bvq","category_id":"ciqggs7ft0007ikvdxeu833hw","_id":"ciqggs7mc001oikvdcdqraoig"},{"post_id":"ciqggs7k2000nikvdax994bvq","category_id":"ciqggs7k2000oikvdjplx0p1j","_id":"ciqggs7mf001sikvdxkf7ioy3"},{"post_id":"ciqggs7ki000yikvdvm49jtbi","category_id":"ciqggs7ft0007ikvdxeu833hw","_id":"ciqggs7mf001vikvdrznrparq"},{"post_id":"ciqggs7ki000yikvdvm49jtbi","category_id":"ciqggs7k2000oikvdjplx0p1j","_id":"ciqggs7mf001zikvdhij40n9u"},{"post_id":"ciqggs7ki0011ikvdxc9ncv8b","category_id":"ciqggs7ft0007ikvdxeu833hw","_id":"ciqggs7mf0022ikvdgc3ej7f6"},{"post_id":"ciqggs7ld0014ikvdn0b0abwl","category_id":"ciqggs7ft0007ikvdxeu833hw","_id":"ciqggs7mv0026ikvdpitpyyao"},{"post_id":"ciqggs7ld0017ikvdkng1xbv5","category_id":"ciqggs7ft0007ikvdxeu833hw","_id":"ciqggs7mv002aikvd9l7177do"},{"post_id":"ciqggs7lt001dikvdd8hgv3rj","category_id":"ciqggs7ft0007ikvdxeu833hw","_id":"ciqggs7mv002dikvd0bp7tupk"},{"post_id":"ciqggs7lt001dikvdd8hgv3rj","category_id":"ciqggs7k2000oikvdjplx0p1j","_id":"ciqggs7mv002gikvdf0945lg1"},{"post_id":"ciqggs7lt001gikvdao1syfuh","category_id":"ciqggs7fe0003ikvdffso7r4g","_id":"ciqggs7mv002iikvdwwpunm9h"},{"post_id":"ciqggs7ld001aikvd6y505ff9","category_id":"ciqggs7ft0007ikvdxeu833hw","_id":"ciqggs7mv002kikvd40t9nakd"},{"post_id":"ciqggs7ld001aikvd6y505ff9","category_id":"ciqggs7lt001hikvdr2tmtv8n","_id":"ciqggs7mv002mikvd0p5v7yh3"},{"post_id":"ciqggs7mf001rikvdbrvq113g","category_id":"ciqggs7ft0007ikvdxeu833hw","_id":"ciqggs7mv002nikvdc2h9cwqp"},{"post_id":"ciqggs7mf001tikvd6edgyvij","category_id":"ciqggs7ft0007ikvdxeu833hw","_id":"ciqggs7mv002oikvdlbyzy9xb"},{"post_id":"ciqggs7mf001yikvdsyh0suk3","category_id":"ciqggs7ft0007ikvdxeu833hw","_id":"ciqggs7mv002pikvdknw8arui"},{"post_id":"ciqggs7ma001nikvdvzulnx2j","category_id":"ciqggs7ft0007ikvdxeu833hw","_id":"ciqggs7mv002qikvdqd0qmepj"},{"post_id":"ciqggs7ma001nikvdvzulnx2j","category_id":"ciqggs7mf001uikvdm0ddm2jy","_id":"ciqggs7mv002rikvd096ltpad"},{"post_id":"ciqggs7mf0024ikvd6abwqbk5","category_id":"ciqggs7fe0003ikvdffso7r4g","_id":"ciqggs7mv002sikvdspehymu1"},{"post_id":"ciqggs7mv0029ikvd17cz6nyg","category_id":"ciqggs7ft0007ikvdxeu833hw","_id":"ciqggs7mv002tikvd07q9k5mz"},{"post_id":"ciqggs7mv0029ikvd17cz6nyg","category_id":"ciqggs7k2000oikvdjplx0p1j","_id":"ciqggs7mv002uikvd3uklw3jf"},{"post_id":"ciqggs7mv002cikvd9j5buuci","category_id":"ciqggs7ft0007ikvdxeu833hw","_id":"ciqggs7mv002vikvdvpe2435s"},{"post_id":"ciqggs7mf0021ikvdx38ohnd5","category_id":"ciqggs7mv0027ikvdjrddqlbm","_id":"ciqggs7mv002wikvddoqv3g51"}],"PostTag":[{"post_id":"ciqggs7ft0005ikvd43ccqm05","tag_id":"ciqggs7fe0002ikvdbi4sam5j","_id":"ciqggs7ft0008ikvdcxhqpbh6"},{"post_id":"ciqggs7fe0000ikvdu74o23gm","tag_id":"ciqggs7fe0002ikvdbi4sam5j","_id":"ciqggs7ft0009ikvdgvm54qii"},{"post_id":"ciqggs7fe0001ikvdsqgtbyl0","tag_id":"ciqggs7ft0006ikvdqyxgklad","_id":"ciqggs7ft000eikvdt6y8uko1"},{"post_id":"ciqggs7ft0004ikvd3rrage0k","tag_id":"ciqggs7fe0002ikvdbi4sam5j","_id":"ciqggs7ft000gikvdil9fszzr"},{"post_id":"ciqggs7jn000iikvd9xlo0rbz","tag_id":"ciqggs7ft0006ikvdqyxgklad","_id":"ciqggs7k2000mikvdm2lylhb8"},{"post_id":"ciqggs7jn000kikvduosv4iif","tag_id":"ciqggs7fe0002ikvdbi4sam5j","_id":"ciqggs7k2000pikvdg3wci7os"},{"post_id":"ciqggs7k2000nikvdax994bvq","tag_id":"ciqggs7ft0006ikvdqyxgklad","_id":"ciqggs7k2000rikvdnhdu541n"},{"post_id":"ciqggs7k2000qikvdv91rrf3l","tag_id":"ciqggs7ft0006ikvdqyxgklad","_id":"ciqggs7ki000vikvdbk0oovbd"},{"post_id":"ciqggs7ki000tikvdjw9hof02","tag_id":"ciqggs7ft0006ikvdqyxgklad","_id":"ciqggs7ki000xikvdply89ze3"},{"post_id":"ciqggs7ki000wikvdoseocje2","tag_id":"ciqggs7ft0006ikvdqyxgklad","_id":"ciqggs7ki0010ikvdzk06pd2t"},{"post_id":"ciqggs7ki000yikvdvm49jtbi","tag_id":"ciqggs7ft0006ikvdqyxgklad","_id":"ciqggs7ld0013ikvdk1ma75nj"},{"post_id":"ciqggs7ki0011ikvdxc9ncv8b","tag_id":"ciqggs7ft0006ikvdqyxgklad","_id":"ciqggs7ld0016ikvd3jzzsab4"},{"post_id":"ciqggs7ld0017ikvdkng1xbv5","tag_id":"ciqggs7ft0006ikvdqyxgklad","_id":"ciqggs7lt001cikvdinulsryl"},{"post_id":"ciqggs7ld001aikvd6y505ff9","tag_id":"ciqggs7ft0006ikvdqyxgklad","_id":"ciqggs7lt001fikvdw04xqrsb"},{"post_id":"ciqggs7lt001dikvdd8hgv3rj","tag_id":"ciqggs7ft0006ikvdqyxgklad","_id":"ciqggs7lt001jikvdjm698wb1"},{"post_id":"ciqggs7ld0014ikvdn0b0abwl","tag_id":"ciqggs7ld0019ikvdsztprc6j","_id":"ciqggs7m9001mikvduz2kxzw4"},{"post_id":"ciqggs7lt001gikvdao1syfuh","tag_id":"ciqggs7fe0002ikvdbi4sam5j","_id":"ciqggs7me001qikvdw76ip932"},{"post_id":"ciqggs7mf001rikvdbrvq113g","tag_id":"ciqggs7ld0019ikvdsztprc6j","_id":"ciqggs7mf001wikvdogyy250s"},{"post_id":"ciqggs7mf001tikvd6edgyvij","tag_id":"ciqggs7ft0006ikvdqyxgklad","_id":"ciqggs7mf0020ikvdo4mf75gl"},{"post_id":"ciqggs7lt001kikvd7bdm28xq","tag_id":"ciqggs7md001pikvd69zetxzb","_id":"ciqggs7mf0023ikvd05on3s63"},{"post_id":"ciqggs7ma001nikvdvzulnx2j","tag_id":"ciqggs7mf001xikvdhl7n89ke","_id":"ciqggs7mv0028ikvd8mtyh4vi"},{"post_id":"ciqggs7mf0024ikvd6abwqbk5","tag_id":"ciqggs7fe0002ikvdbi4sam5j","_id":"ciqggs7mv002bikvdhsm15tjn"},{"post_id":"ciqggs7mv0029ikvd17cz6nyg","tag_id":"ciqggs7ft0006ikvdqyxgklad","_id":"ciqggs7mv002fikvdiyzxybsx"},{"post_id":"ciqggs7mf001yikvdsyh0suk3","tag_id":"ciqggs7mv0025ikvdi63qxq6j","_id":"ciqggs7mv002hikvdg1xd156w"},{"post_id":"ciqggs7mv002cikvd9j5buuci","tag_id":"ciqggs7ld0019ikvdsztprc6j","_id":"ciqggs7mv002jikvd4ybdwfxd"},{"post_id":"ciqggs7mf0021ikvdx38ohnd5","tag_id":"ciqggs7mv002eikvd6gvvzrxg","_id":"ciqggs7mv002likvd1qgxzsja"}],"Tag":[{"name":"Oxygen","_id":"ciqggs7fe0002ikvdbi4sam5j"},{"name":"Javascript","_id":"ciqggs7ft0006ikvdqyxgklad"},{"name":"布局","_id":"ciqggs7ld0019ikvdsztprc6j"},{"name":"面试","_id":"ciqggs7md001pikvd69zetxzb"},{"name":"CSS","_id":"ciqggs7mf001xikvdhl7n89ke"},{"name":"gulp","_id":"ciqggs7mv0025ikvdi63qxq6j"},{"name":"模块化","_id":"ciqggs7mv002eikvd6gvvzrxg"}]}}